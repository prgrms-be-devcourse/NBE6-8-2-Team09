<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/backend/src/main/resources/application-dev.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/resources/application-dev.yml" />
              <option name="originalContent" value="spring:&#10;  datasource:&#10;    url: jdbc:h2:./db_dev;MODE=MySQL&#10;    username: sa&#10;    password:&#10;    driver-class-name: org.h2.Driver&#10;    hikari:&#10;      auto-commit: false&#10;&#10;  data:&#10;    redis:&#10;      host: ${REDIS_HOST:localhost}&#10;      port: ${REDIS_PORT:6379}&#10;      password: ${REDIS_PASSWORD:}&#10;&#10;  jpa:&#10;    show-sql: true&#10;    hibernate:&#10;      ddl-auto: update&#10;&#10;  security:&#10;    oauth2:&#10;      client:&#10;        registration:&#10;          google:&#10;            client-id: ${GOOGLE_CLIENT_ID:1017218402748-d5dd60n54002saejbfsma5r4tjnkrk1o.apps.googleusercontent.com}&#10;            client-secret: ${GOOGLE_CLIENT_SECRET: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}&#10;            scope: profile, email&#10;            redirect-uri: ${OAUTH2_REDIRECT_URI:http://localhost:8888/oauth2/callback/google}&#10;        provider:&#10;          google:&#10;            authorization-uri: https://accounts.google.com/o/oauth2/auth&#10;            token-uri: https://oauth2.googleapis.com/token&#10;            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo&#10;            user-name-attribute: sub&#10;&#10;logging:&#10;  level:&#10;    org.hibernate.orm.jdbc.bind: TRACE&#10;    org.hibernate.orm.jdbc.extract: TRACE&#10;    org.springframework.transaction.interceptor: TRACE&#10;    root: INFO&#10;&#10;# 로컬 개발용 OAuth2 쿠키 설정 (도메인 없음)&#10;app:&#10;  oauth2:&#10;    cookie-domain: ${OAUTH2_COOKIE_DOMAIN:}&#10;    frontend-url: ${FRONTEND_URL:http://localhost:8888}&#10;  cookie:&#10;    same-site: Lax&#10;    secure: false&#10;    domain: localhost&#10;" />
              <option name="updatedContent" value="spring:&#10;  datasource:&#10;    url: jdbc:h2:./db_dev;MODE=MySQL&#10;    username: sa&#10;    password:&#10;    driver-class-name: org.h2.Driver&#10;    hikari:&#10;      auto-commit: false&#10;&#10;  data:&#10;    redis:&#10;      host: ${REDIS_HOST:localhost}&#10;      port: ${REDIS_PORT:6379}&#10;      password: ${REDIS_PASSWORD:}&#10;&#10;  jpa:&#10;    show-sql: true&#10;    hibernate:&#10;      ddl-auto: update&#10;&#10;  security:&#10;    oauth2:&#10;      client:&#10;        registration:&#10;          google:&#10;            client-id: ${GOOGLE_CLIENT_ID:1017218402748-d5dd60n54002saejbfsma5r4tjnkrk1o.apps.googleusercontent.com}&#10;            client-secret: ${GOOGLE_CLIENT_SECRET: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}&#10;            scope: profile, email&#10;            redirect-uri: ${OAUTH2_REDIRECT_URI:http://localhost:8888/oauth2/callback/google}&#10;        provider:&#10;          google:&#10;            authorization-uri: https://accounts.google.com/o/oauth2/auth&#10;            token-uri: https://oauth2.googleapis.com/token&#10;            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo&#10;            user-name-attribute: sub&#10;&#10;logging:&#10;  level:&#10;    org.hibernate.orm.jdbc.bind: TRACE&#10;    org.hibernate.orm.jdbc.extract: TRACE&#10;    org.springframework.transaction.interceptor: TRACE&#10;    root: INFO&#10;&#10;# 로컬 개발용 OAuth2 쿠키 설정 (도메인 없음)&#10;app:&#10;  oauth2:&#10;    cookie-domain: ${OAUTH2_COOKIE_DOMAIN:}&#10;    frontend-url: ${FRONTEND_URL:http://localhost:8888}&#10;  cookie:&#10;    same-site: Lax&#10;    secure: false&#10;    domain: localhost  # 추가: 모든 localhost 포트에서 쿠키 공유" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/.env.local">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/.env.local" />
              <option name="updatedContent" value="# 개발환경에서 nginx 프록시를 통해 API 호출하도록 설정&#10;NEXT_PUBLIC_API_URL=http://localhost:8888/api" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/(protected)/admin/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/(protected)/admin/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import { useEffect } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;&#10;export default function AdminPage() {&#10;    const router = useRouter();&#10;    useEffect(() =&gt; {&#10;        const cookies = document.cookie.split(';').map(c =&gt; c.trim());&#10;        const roleCookie = cookies.find(c =&gt; c.startsWith('role='));&#10;        const role = roleCookie ? roleCookie.split('=')[1] : null;&#10;        if (role !== 'ADMIN') {&#10;            router.replace(&quot;/login&quot;);&#10;        }&#10;    }, [router]);&#10;    return &lt;div&gt;관리자 전용 페이지입니다.&lt;/div&gt;;&#10;} " />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { apiCall } from &quot;@/lib/api/client&quot;;&#10;&#10;export default function AdminPage() {&#10;    const router = useRouter();&#10;    const [isLoading, setIsLoading] = useState(true);&#10;&#10;    useEffect(() =&gt; {&#10;        const checkAdminAccess = async () =&gt; {&#10;            try {&#10;                // /me API 호출로 사용자 정보 확인&#10;                const response = await apiCall&lt;any&gt;(&quot;/v1/users/me&quot;);&#10;                const user = response?.result;&#10;                &#10;                // 관리자 권한 확인 (백엔드에서 role 확인)&#10;                if (!user || user.role !== 'ADMIN') {&#10;                    router.replace(&quot;/login&quot;);&#10;                    return;&#10;                }&#10;                setIsLoading(false);&#10;            } catch (error) {&#10;                // 인증 실패 시 로그인 페이지로&#10;                router.replace(&quot;/login&quot;);&#10;            }&#10;        };&#10;&#10;        checkAdminAccess();&#10;    }, [router]);&#10;&#10;    if (isLoading) {&#10;        return &lt;div&gt;로딩 중...&lt;/div&gt;;&#10;    }&#10;&#10;    return &lt;div&gt;관리자 전용 페이지입니다.&lt;/div&gt;;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/(protected)/analytics/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/(protected)/analytics/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { motion } from &quot;framer-motion&quot;;&#10;import { ArrowUpRight, ArrowDownRight } from &quot;lucide-react&quot;;&#10;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import { PageShell } from &quot;@/components/layout/page-shell&quot;;&#10;import { Card, CardContent } from &quot;@/components/ui/card&quot;;&#10;&#10;import { ProfitRateResponse, ProfitAnalysisDto } from &quot;@/lib/types/analytics&quot;;&#10;import { analyticsApi } from &quot;@/lib/api/analytics&quot;;&#10;import { DataTable } from &quot;@/components/ui/data-table&quot;;&#10;import { ColumnDef } from &quot;@tanstack/react-table&quot;;&#10;&#10;const columns: ColumnDef&lt;ProfitAnalysisDto&gt;[] = [&#10;    { accessorKey: &quot;coinName&quot;, header: &quot;코인 이름&quot; },&#10;    {&#10;        accessorKey: &quot;totalQuantity&quot;,&#10;        header: &quot;보유 수량&quot;,&#10;        cell: ({ row }) =&gt; `${row.getValue(&quot;totalQuantity&quot;) as number} 주`&#10;    },&#10;    {&#10;        accessorKey: &quot;averageBuyPrice&quot;,&#10;        header: &quot;평균 구매 금액&quot;,&#10;        cell: ({ row }) =&gt; `$ ${Number(row.getValue(&quot;averageBuyPrice&quot;)).toLocaleString()}`,&#10;    },&#10;    {&#10;        accessorKey: &quot;realizedProfitRate&quot;,&#10;        header: &quot;실현 수익률&quot;,&#10;        cell: ({ row }) =&gt; `${Number(row.getValue(&quot;realizedProfitRate&quot;)).toFixed(2)} %`,&#10;    },&#10;];&#10;&#10;const fadeInUp = {&#10;    hidden: { opacity: 0, y: 16 },&#10;    show: { opacity: 1, y: 0, transition: { duration: 0.4 } },&#10;};&#10;const stagger = (delay = 0.1) =&gt; ({&#10;    hidden: {},&#10;    show: { transition: { staggerChildren: delay } },&#10;});&#10;&#10;export default function TransactionsPage() {&#10;    const [tab, setTab] = useState&lt;&quot;realized&quot; | &quot;evaluated&quot;&gt;(&quot;realized&quot;);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [analyticsData, setAnalyticsData] = useState&lt;ProfitRateResponse | null&gt;(null);&#10;&#10;    const userId = 1;&#10;&#10;    useEffect(() =&gt; {&#10;        fetchAnalyticsRealized();&#10;    }, []);&#10;&#10;    const fetchAnalyticsRealized = async () =&gt; {&#10;        try {&#10;            setIsLoading(true);&#10;            const response = await analyticsApi.getUserAnalyticsRealized(userId);&#10;            console.log(&quot;거래 내역 응답:&quot;, response);&#10;            if (response) {&#10;                // @ts-ignore&#10;                setAnalyticsData(response);&#10;            }&#10;        } catch (error) {&#10;            console.error(&quot;거래 내역 조회 실패:&quot;, error);&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    };&#10;    const handleTabClick = (selectedTab: &quot;realized&quot; | &quot;evaluated&quot;) =&gt; {&#10;        setTab(selectedTab);&#10;        if (selectedTab === &quot;realized&quot;) {&#10;            fetchAnalyticsRealized();&#10;        } else {&#10;            fetchAnalyticsEvaluated(); // 이 함수도 따로 구현 필요&#10;        }&#10;    };&#10;    const fetchAnalyticsEvaluated = async () =&gt; {&#10;        try {&#10;            setIsLoading(true);&#10;            const response = await analyticsApi.getUserAnalyticsUnrealized(userId);&#10;            console.log(&quot;거래 내역 응답:&quot;, response);&#10;            if (response) {&#10;                // @ts-ignore&#10;                setAnalyticsData(response);&#10;            }&#10;        } catch (error) {&#10;            console.error(&quot;거래 내역 조회 실패:&quot;, error);&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    };&#10;    return (&#10;        &lt;PageShell&#10;            maxW=&quot;max-w-[80vw]&quot;&#10;            padded&#10;            innerClassName={cn(&quot;min-h-[60vh] flex flex-col items-center justify-center text-center space-y-6&quot;)}&#10;        &gt;&#10;            &lt;motion.div&#10;                className=&quot;container py-8 space-y-6&quot;&#10;                variants={stagger(0.1)}&#10;                initial=&quot;hidden&quot;&#10;                animate=&quot;show&quot;&#10;                &lt;motion.h1 variants={fadeInUp} className=&quot;text-2xl font-bold w-full text-left&quot; suppressHydrationWarning&gt;&#10;                    분석 페이지&#10;                &lt;/motion.h1&gt;&#10;&#10;                &lt;motion.div&#10;                    key={tab}&#10;                    variants={fadeInUp}&#10;                    initial=&quot;hidden&quot;&#10;                    animate=&quot;show&quot;&#10;                    suppressHydrationWarning&#10;                &gt;                    {/* 탭 메뉴 */}&#10;                    &lt;div className=&quot;flex gap-6 text-sm font-medium&quot;&gt;&#10;                        &lt;button&#10;                            className={`border-b-2 pb-1 ${&#10;                                tab === &quot;realized&quot; ? &quot;border-black&quot; : &quot;border-transparent text-muted-foreground&quot;&#10;                            }`}&#10;                            onClick={() =&gt; handleTabClick(&quot;realized&quot;)}&#10;                        &gt;&#10;                            실현 수익률&#10;                        &lt;/button&gt;&#10;                        &lt;button&#10;                            className={`border-b-2 pb-1 ${&#10;                                tab === &quot;evaluated&quot; ? &quot;border-black&quot; : &quot;border-transparent text-muted-foreground&quot;&#10;                            }`}&#10;                            onClick={() =&gt; handleTabClick(&quot;evaluated&quot;)}&#10;                        &gt;&#10;                            평가 수익률&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* 수익 카드 영역 */}&#10;                    &lt;div className=&quot;flex gap-4 mt-6&quot;&gt;&#10;                        &lt;Card className=&quot;flex-1 bg-[#eef0fe]&quot;&gt;&#10;                            &lt;CardContent className=&quot;py-6&quot;&gt;&#10;                                &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;총 자산 대비 수익률&lt;/div&gt;&#10;                                &lt;div className=&quot;text-3xl font-bold mt-1&quot;&gt;&#10;                                    {analyticsData?.profitRateOnTotalAssets ?? &quot;0&quot;}&#10;                                &lt;/div&gt;&#10;                                &lt;div&#10;                                    className={cn(&#10;                                        &quot;text-sm font-medium flex items-center gap-1&quot;,&#10;                                        (analyticsData?.profitRateOnTotalAssets ?? 0) &gt;= 0&#10;                                            ? &quot;text-green-600&quot;&#10;                                            : &quot;text-red-500&quot;&#10;                                    )}&#10;                                &gt;&#10;                                    {(analyticsData?.profitRateOnTotalAssets ?? 0) &gt;= 0 ? (&#10;                                        &lt;ArrowUpRight size={16} /&gt;&#10;                                    ) : (&#10;                                        &lt;ArrowDownRight size={16} /&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                            &lt;/CardContent&gt;&#10;                        &lt;/Card&gt;&#10;                        &lt;Card className=&quot;flex-1 bg-[#e6f1fb]&quot;&gt;&#10;                            &lt;CardContent className=&quot;py-6&quot;&gt;&#10;                                &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;투자금 대비 수익률&lt;/div&gt;&#10;                                &lt;div className=&quot;text-3xl font-bold mt-1&quot;&gt;&#10;                                    {analyticsData?.profitRateOnInvestment ?? &quot;0&quot;}&#10;&#10;                                &lt;/div&gt;&#10;                                &lt;div&#10;                                    className={cn(&#10;                                        &quot;text-sm font-medium flex items-center gap-1&quot;,&#10;                                        (analyticsData?.profitRateOnTotalAssets ?? 0) &gt;= 0&#10;                                            ? &quot;text-green-600&quot;&#10;                                            : &quot;text-red-500&quot;&#10;                                    )}&#10;                                &gt;&#10;                                    {(analyticsData?.profitRateOnTotalAssets ?? 0) &gt;= 0 ? (&#10;                                        &lt;ArrowUpRight size={16} /&gt;&#10;                                    ) : (&#10;                                        &lt;ArrowDownRight size={16} /&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                            &lt;/CardContent&gt;&#10;                        &lt;/Card&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* 테이블 */}&#10;                    &lt;div className=&quot;border rounded-xl overflow-hidden shadow-sm mt-6&quot;&gt;&#10;                        {analyticsData &amp;&amp; (&#10;                            &lt;DataTable&#10;                                columns={columns}&#10;                                data={analyticsData.coinAnalytics ?? []}&#10;                            /&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/motion.div&gt;&#10;            &lt;/motion.div&gt;&#10;        &lt;/PageShell&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { motion } from &quot;framer-motion&quot;;&#10;import { ArrowUpRight, ArrowDownRight } from &quot;lucide-react&quot;;&#10;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import { PageShell } from &quot;@/components/layout/page-shell&quot;;&#10;import { Card, CardContent } from &quot;@/components/ui/card&quot;;&#10;&#10;import { ProfitRateResponse, ProfitAnalysisDto } from &quot;@/lib/types/analytics&quot;;&#10;import { analyticsApi } from &quot;@/lib/api/analytics&quot;;&#10;import { DataTable } from &quot;@/components/ui/data-table&quot;;&#10;import { ColumnDef } from &quot;@tanstack/react-table&quot;;&#10;&#10;const columns: ColumnDef&lt;ProfitAnalysisDto&gt;[] = [&#10;    { accessorKey: &quot;coinName&quot;, header: &quot;코인 이름&quot; },&#10;    {&#10;        accessorKey: &quot;totalQuantity&quot;,&#10;        header: &quot;보유 수량&quot;,&#10;        cell: ({ row }) =&gt; `${row.getValue(&quot;totalQuantity&quot;) as number} 주`&#10;    },&#10;    {&#10;        accessorKey: &quot;averageBuyPrice&quot;,&#10;        header: &quot;평균 구매 금액&quot;,&#10;        cell: ({ row }) =&gt; `$ ${Number(row.getValue(&quot;averageBuyPrice&quot;)).toLocaleString()}`,&#10;    },&#10;    {&#10;        accessorKey: &quot;realizedProfitRate&quot;,&#10;        header: &quot;실현 수익률&quot;,&#10;        cell: ({ row }) =&gt; `${Number(row.getValue(&quot;realizedProfitRate&quot;)).toFixed(2)} %`,&#10;    },&#10;];&#10;&#10;const fadeInUp = {&#10;    hidden: { opacity: 0, y: 16 },&#10;    show: { opacity: 1, y: 0, transition: { duration: 0.4 } },&#10;};&#10;const stagger = (delay = 0.1) =&gt; ({&#10;    hidden: {},&#10;    show: { transition: { staggerChildren: delay } },&#10;});&#10;&#10;export default function TransactionsPage() {&#10;    const [tab, setTab] = useState&lt;&quot;realized&quot; | &quot;evaluated&quot;&gt;(&quot;realized&quot;);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [analyticsData, setAnalyticsData] = useState&lt;ProfitRateResponse | null&gt;(null);&#10;&#10;    const userId = 1;&#10;&#10;    useEffect(() =&gt; {&#10;        fetchAnalyticsRealized();&#10;    }, []);&#10;&#10;    const fetchAnalyticsRealized = async () =&gt; {&#10;        try {&#10;            setIsLoading(true);&#10;            const response = await analyticsApi.getUserAnalyticsRealized(userId);&#10;            console.log(&quot;거래 내역 응답:&quot;, response);&#10;            if (response) {&#10;                // @ts-ignore&#10;                setAnalyticsData(response);&#10;            }&#10;        } catch (error) {&#10;            console.error(&quot;거래 내역 조회 실패:&quot;, error);&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    };&#10;    const handleTabClick = (selectedTab: &quot;realized&quot; | &quot;evaluated&quot;) =&gt; {&#10;        setTab(selectedTab);&#10;        if (selectedTab === &quot;realized&quot;) {&#10;            fetchAnalyticsRealized();&#10;        } else {&#10;            fetchAnalyticsEvaluated(); // 이 함수도 따로 구현 필요&#10;        }&#10;    };&#10;    const fetchAnalyticsEvaluated = async () =&gt; {&#10;        try {&#10;            setIsLoading(true);&#10;            const response = await analyticsApi.getUserAnalyticsUnrealized(userId);&#10;            console.log(&quot;거래 내역 응답:&quot;, response);&#10;            if (response) {&#10;                // @ts-ignore&#10;                setAnalyticsData(response);&#10;            }&#10;        } catch (error) {&#10;            console.error(&quot;거래 내역 조회 실패:&quot;, error);&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    };&#10;    return (&#10;        &lt;PageShell&#10;            maxW=&quot;max-w-[80vw]&quot;&#10;            padded&#10;            innerClassName={cn(&quot;min-h-[60vh] flex flex-col items-center justify-center text-center space-y-6&quot;)}&#10;        &gt;&#10;            &lt;motion.div&#10;                className=&quot;container py-8 space-y-6&quot;&#10;                variants={stagger(0.1)}&#10;                initial=&quot;hidden&quot;&#10;                animate=&quot;show&quot;&#10;                suppressHydrationWarning&#10;            &gt;&#10;                &lt;motion.h1 variants={fadeInUp} className=&quot;text-2xl font-bold w-full text-left&quot; suppressHydrationWarning&gt;&#10;                    분석 페이지&#10;                &lt;/motion.h1&gt;&#10;&#10;                &lt;motion.div&#10;                    key={tab}&#10;                    variants={fadeInUp}&#10;                    initial=&quot;hidden&quot;&#10;                    animate=&quot;show&quot;&#10;                    suppressHydrationWarning&#10;                &gt;                    {/* 탭 메뉴 */}&#10;                    &lt;div className=&quot;flex gap-6 text-sm font-medium&quot;&gt;&#10;                        &lt;button&#10;                            className={`border-b-2 pb-1 ${&#10;                                tab === &quot;realized&quot; ? &quot;border-black&quot; : &quot;border-transparent text-muted-foreground&quot;&#10;                            }`}&#10;                            onClick={() =&gt; handleTabClick(&quot;realized&quot;)}&#10;                        &gt;&#10;                            실현 수익률&#10;                        &lt;/button&gt;&#10;                        &lt;button&#10;                            className={`border-b-2 pb-1 ${&#10;                                tab === &quot;evaluated&quot; ? &quot;border-black&quot; : &quot;border-transparent text-muted-foreground&quot;&#10;                            }`}&#10;                            onClick={() =&gt; handleTabClick(&quot;evaluated&quot;)}&#10;                        &gt;&#10;                            평가 수익률&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* 수익 카드 영역 */}&#10;                    &lt;div className=&quot;flex gap-4 mt-6&quot;&gt;&#10;                        &lt;Card className=&quot;flex-1 bg-[#eef0fe]&quot;&gt;&#10;                            &lt;CardContent className=&quot;py-6&quot;&gt;&#10;                                &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;총 자산 대비 수익률&lt;/div&gt;&#10;                                &lt;div className=&quot;text-3xl font-bold mt-1&quot;&gt;&#10;                                    {analyticsData?.profitRateOnTotalAssets ?? &quot;0&quot;}&#10;                                &lt;/div&gt;&#10;                                &lt;div&#10;                                    className={cn(&#10;                                        &quot;text-sm font-medium flex items-center gap-1&quot;,&#10;                                        (analyticsData?.profitRateOnTotalAssets ?? 0) &gt;= 0&#10;                                            ? &quot;text-green-600&quot;&#10;                                            : &quot;text-red-500&quot;&#10;                                    )}&#10;                                &gt;&#10;                                    {(analyticsData?.profitRateOnTotalAssets ?? 0) &gt;= 0 ? (&#10;                                        &lt;ArrowUpRight size={16} /&gt;&#10;                                    ) : (&#10;                                        &lt;ArrowDownRight size={16} /&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                            &lt;/CardContent&gt;&#10;                        &lt;/Card&gt;&#10;                        &lt;Card className=&quot;flex-1 bg-[#e6f1fb]&quot;&gt;&#10;                            &lt;CardContent className=&quot;py-6&quot;&gt;&#10;                                &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;투자금 대비 수익률&lt;/div&gt;&#10;                                &lt;div className=&quot;text-3xl font-bold mt-1&quot;&gt;&#10;                                    {analyticsData?.profitRateOnInvestment ?? &quot;0&quot;}&#10;&#10;                                &lt;/div&gt;&#10;                                &lt;div&#10;                                    className={cn(&#10;                                        &quot;text-sm font-medium flex items-center gap-1&quot;,&#10;                                        (analyticsData?.profitRateOnTotalAssets ?? 0) &gt;= 0&#10;                                            ? &quot;text-green-600&quot;&#10;                                            : &quot;text-red-500&quot;&#10;                                    )}&#10;                                &gt;&#10;                                    {(analyticsData?.profitRateOnTotalAssets ?? 0) &gt;= 0 ? (&#10;                                        &lt;ArrowUpRight size={16} /&gt;&#10;                                    ) : (&#10;                                        &lt;ArrowDownRight size={16} /&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                            &lt;/CardContent&gt;&#10;                        &lt;/Card&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* 테이블 */}&#10;                    &lt;div className=&quot;border rounded-xl overflow-hidden shadow-sm mt-6&quot;&gt;&#10;                        {analyticsData &amp;&amp; (&#10;                            &lt;DataTable&#10;                                columns={columns}&#10;                                data={analyticsData.coinAnalytics ?? []}&#10;                            /&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/motion.div&gt;&#10;            &lt;/motion.div&gt;&#10;        &lt;/PageShell&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/(protected)/dashboard/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/(protected)/dashboard/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import { motion } from &quot;framer-motion&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;&#10;const fadeInUp = {&#10;    hidden: { opacity: 0, y: 16 },&#10;    show: { opacity: 1, y: 0, transition: { duration: 0.4 } },&#10;};&#10;&#10;const stagger = (delay = 0.1) =&gt; ({&#10;    hidden: {},&#10;    show: { transition: { staggerChildren: delay } },&#10;});&#10;&#10;type MeResponse = {&#10;    result: {&#10;        id: number;&#10;        userLoginId: string;&#10;        username: string;&#10;        // 필요한 필드만 추가&#10;    };&#10;};&#10;&#10;export default function DashboardPage() {&#10;    const [userInfo, setUserInfo] = useState&lt;MeResponse[&quot;result&quot;] | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const router = useRouter();&#10;&#10;    useEffect(() =&gt; {&#10;        const ctrl = new AbortController();&#10;&#10;        const loadMe = async () =&gt; {&#10;            try {&#10;                console.log(&quot;=== 대시보드: /v1/users/me 호출 ===&quot;);&#10;                const res = await fetch(&quot;/api/v1/users/me&quot;, {&#10;                    method: &quot;GET&quot;,&#10;                    credentials: &quot;include&quot;,&#10;                    headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;                    signal: ctrl.signal,&#10;                });&#10;&#10;                console.log(&quot;응답 상태:&quot;, res.status);&#10;&#10;                if (res.ok) {&#10;                    const data: MeResponse = await res.json();&#10;                    setUserInfo(data.result);&#10;                } else if (res.status === 401 || res.status === 403) {&#10;                    router.replace(&quot;/login&quot;);&#10;                } else {&#10;                    // 기타 에러는 사용자에게 알리고 로그인으로&#10;                    router.replace(&quot;/login&quot;);&#10;                }&#10;            } catch (e) {&#10;                console.error(&quot;me 호출 중 오류:&quot;, e);&#10;                router.replace(&quot;/login&quot;);&#10;            } finally {&#10;                setIsLoading(false);&#10;            }&#10;        };&#10;&#10;        loadMe();&#10;        return () =&gt; ctrl.abort();&#10;    }, [router]);&#10;&#10;    if (isLoading) {&#10;        return (&#10;            &lt;div className=&quot;container py-8 flex items-center justify-center&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;p&gt;로딩 중...&lt;/p&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-500 mt-2&quot;&gt;인증 상태를 확인하고 있습니다...&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    if (!userInfo) {&#10;        return (&#10;            &lt;div className=&quot;container py-8 flex items-center justify-center&quot;&gt;&#10;                &lt;div className=&quot;text-center&quot;&gt;&#10;                    &lt;p&gt;인증이 필요합니다.&lt;/p&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-500 mt-2&quot;&gt;잠시 후 로그인 페이지로 이동합니다...&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    return (&#10;        &lt;motion.div&#10;            className=&quot;container py-8&quot;&#10;            variants={stagger(0.1)}&#10;            initial=&quot;hidden&quot;&#10;            animate=&quot;show&quot;&#10;            suppressHydrationWarning&#10;        &gt;&#10;            &lt;motion.h1 variants={fadeInUp} className=&quot;text-2xl font-bold mb-4&quot; suppressHydrationWarning&gt;&#10;                Dashboard&#10;            &lt;/motion.h1&gt;&#10;&#10;            &lt;motion.div variants={fadeInUp} className=&quot;mb-6&quot; suppressHydrationWarning&gt;&#10;                &lt;p className=&quot;text-lg&quot;&gt;안녕하세요, {userInfo.username}님!&lt;/p&gt;&#10;                &lt;p className=&quot;text-gray-600&quot;&gt;{userInfo.userLoginId}&lt;/p&gt;&#10;            &lt;/motion.div&gt;&#10;        &lt;/motion.div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;import { motion } from &quot;framer-motion&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;&#10;const fadeInUp = {&#10;    hidden: { opacity: 0, y: 16 },&#10;    show: { opacity: 1, y: 0, transition: { duration: 0.4 } },&#10;};&#10;&#10;const stagger = (delay = 0.1) =&gt; ({&#10;    hidden: {},&#10;    show: { transition: { staggerChildren: delay } },&#10;});&#10;&#10;type MeResponse = {&#10;    result: {&#10;        id: number;&#10;        userLoginId: string;&#10;        username: string;&#10;        // 필요한 필드만 추가&#10;    };&#10;};&#10;&#10;export default function DashboardPage() {&#10;    const [userInfo, setUserInfo] = useState&lt;MeResponse[&quot;result&quot;] | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const router = useRouter();&#10;&#10;    useEffect(() =&gt; {&#10;        const ctrl = new AbortController();&#10;&#10;        const loadMe = async () =&gt; {&#10;            try {&#10;                console.log(&quot;=== 대시보드: /v1/users/me 호출 ===&quot;);&#10;                const res = await fetch(&quot;/api/v1/users/me&quot;, {&#10;                    method: &quot;GET&quot;,&#10;                    credentials: &quot;include&quot;,&#10;                    headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;                    signal: ctrl.signal,&#10;                });&#10;&#10;                console.log(&quot;응답 상태:&quot;, res.status);&#10;&#10;                if (res.ok) {&#10;                    const data: MeResponse = await res.json();&#10;                    setUserInfo(data.result);&#10;                } else if (res.status === 401 || res.status === 403) {&#10;                    router.replace(&quot;/login&quot;);&#10;                } else {&#10;                    // 기타 에러는 사용자에게 알리고 로그인으로&#10;                    router.replace(&quot;/login&quot;);&#10;                }&#10;            } catch (e) {&#10;                // AbortError는 정상적인 취소이므로 무시&#10;                if (e instanceof Error &amp;&amp; e.name === 'AbortError') {&#10;                    console.log(&quot;API 요청이 취소되었습니다 (정상)&quot;);&#10;                    return;&#10;                }&#10;                console.error(&quot;me 호출 중 오류:&quot;, e);&#10;                if (!ctrl.signal.aborted) {&#10;                    router.replace(&quot;/login&quot;);&#10;                }&#10;            } finally {&#10;                if (!ctrl.signal.aborted) {&#10;                    setIsLoading(false);&#10;                }&#10;            }&#10;        };&#10;&#10;        loadMe();&#10;        return () =&gt; ctrl.abort();&#10;    }, [router]);&#10;&#10;    if (isLoading) {&#10;        return (&#10;            &lt;div className=&quot;container py-8 flex items-center justify-center&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;p&gt;로딩 중...&lt;/p&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-500 mt-2&quot;&gt;인증 상태를 확인하고 있습니다...&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    if (!userInfo) {&#10;        return (&#10;            &lt;div className=&quot;container py-8 flex items-center justify-center&quot;&gt;&#10;                &lt;div className=&quot;text-center&quot;&gt;&#10;                    &lt;p&gt;인증이 필요합니다.&lt;/p&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-500 mt-2&quot;&gt;잠시 후 로그인 페이지로 이동합니다...&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    return (&#10;        &lt;motion.div&#10;            className=&quot;container py-8&quot;&#10;            variants={stagger(0.1)}&#10;            initial=&quot;hidden&quot;&#10;            animate=&quot;show&quot;&#10;            suppressHydrationWarning&#10;        &gt;&#10;            &lt;motion.h1 variants={fadeInUp} className=&quot;text-2xl font-bold mb-4&quot; suppressHydrationWarning&gt;&#10;                Dashboard&#10;            &lt;/motion.h1&gt;&#10;&#10;            &lt;motion.div variants={fadeInUp} className=&quot;mb-6&quot; suppressHydrationWarning&gt;&#10;                &lt;p className=&quot;text-lg&quot;&gt;안녕하세요, {userInfo.username}님!&lt;/p&gt;&#10;                &lt;p className=&quot;text-gray-600&quot;&gt;{userInfo.userLoginId}&lt;/p&gt;&#10;            &lt;/motion.div&gt;&#10;        &lt;/motion.div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/(protected)/logout/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/(protected)/logout/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useEffect } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;&#10;export default function LogoutPage() {&#10;    const router = useRouter();&#10;&#10;    useEffect(() =&gt; {&#10;        const logout = async () =&gt; {&#10;            try {&#10;                // 백엔드 로그아웃 (accessToken, apiKey 삭제)&#10;                await fetch(&#10;                    `/api/v1/users/logout`,&#10;                    {&#10;                        method: &quot;DELETE&quot;,&#10;                        credentials: &quot;include&quot;,&#10;                    }&#10;                );&#10;            } catch (error) {&#10;                console.warn('백엔드 로그아웃 실패:', error);&#10;            } finally {&#10;                // 프론트엔드가 만든 중복 쿠키들 삭제&#10;                document.cookie = &quot;access_Token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT&quot;;&#10;                document.cookie = &quot;role=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT&quot;;&#10;                document.cookie = &quot;apiKey=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT&quot;;&#10;&#10;                setTimeout(() =&gt; {&#10;                    router.replace(&quot;/login&quot;);&#10;                }, 500);&#10;            }&#10;        };&#10;&#10;        logout();&#10;    }, [router]);&#10;&#10;    return (&#10;        &lt;div className=&quot;flex items-center justify-center min-h-screen&quot;&gt;&#10;            &lt;div className=&quot;text-center&quot;&gt;&#10;                &lt;p className=&quot;text-lg&quot;&gt;로그아웃 중...&lt;/p&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useEffect } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;&#10;export default function LogoutPage() {&#10;    const router = useRouter();&#10;&#10;    useEffect(() =&gt; {&#10;        const logout = async () =&gt; {&#10;            try {&#10;                // 백엔드 로그아웃 API 호출 (HttpOnly 쿠키 삭제는 백엔드에서 처리)&#10;                await fetch(&#10;                    `/api/v1/users/logout`,&#10;                    {&#10;                        method: &quot;DELETE&quot;,&#10;                        credentials: &quot;include&quot;, // HttpOnly 쿠키 자동 전송&#10;                    }&#10;                );&#10;            } catch (error) {&#10;                console.warn('백엔드 로그아웃 실패:', error);&#10;            } finally {&#10;                // 백엔드에서 쿠키 삭제를 처리하므로 프론트엔드에서는 바로 리다이렉트&#10;                setTimeout(() =&gt; {&#10;                    router.replace(&quot;/login&quot;);&#10;                }, 500);&#10;            }&#10;        };&#10;&#10;        logout();&#10;    }, [router]);&#10;&#10;    return (&#10;        &lt;div className=&quot;container py-8 flex items-center justify-center&quot;&gt;&#10;            &lt;div className=&quot;text-center&quot;&gt;&#10;                &lt;p&gt;로그아웃 중...&lt;/p&gt;&#10;                &lt;p className=&quot;text-sm text-gray-500 mt-2&quot;&gt;잠시만 기다려주세요.&lt;/p&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/lib/api/coin.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/lib/api/coin.ts" />
              <option name="originalContent" value="const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || &quot;http://localhost:8080&quot;;&#10;&#10;// 토큰 가져오기 함수&#10;const getAuthToken = () =&gt; {&#10;    const cookies = document.cookie.split(';');&#10;    const tokenCookie = cookies.find(cookie =&gt;&#10;        cookie.trim().startsWith('accessToken=')&#10;    );&#10;    if (tokenCookie) {&#10;        const token = tokenCookie.split('=')[1];&#10;        return tokenCookie.split('=')[1];&#10;    }&#10;    return null;&#10;};&#10;&#10;export const coinApi = {&#10;&#10;    // 코인 목록 조회 (관리자용)&#10;    getCoins: async () =&gt; {&#10;        const token = getAuthToken();&#10;        const res = await fetch(`${API_BASE_URL}/api/v1/adm/coins`, {&#10;            method: &quot;GET&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                ...(token &amp;&amp; {&quot;Authorization&quot;: `Bearer ${token}`}),&#10;            },&#10;            credentials: &quot;include&quot;,&#10;        });&#10;&#10;        if (!res.ok) {&#10;            throw new Error(`코인 목록 조회 실패: ${res.status}`);&#10;        }&#10;&#10;        return res.json();&#10;    },&#10;&#10;    // 코인 등록 (관리자용)&#10;    createCoin: async (coinData: { koreanName: string; englishName: string; symbol: string; }) =&gt; {&#10;        const token = getAuthToken();&#10;        const res = await fetch(`${API_BASE_URL}/api/v1/adm/coins`, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                ...(token &amp;&amp; {&quot;Authorization&quot;: `Bearer ${token}`}),&#10;            },&#10;            credentials: &quot;include&quot;,&#10;            body: JSON.stringify(coinData),&#10;        });&#10;&#10;        if (!res.ok) {&#10;            throw new Error(`코인 등록 실패: ${res.status}`);&#10;        }&#10;&#10;        return res.json();&#10;    },&#10;&#10;    // 코인 삭제 (관리자용)&#10;    deleteCoin: async (id: number) =&gt; {&#10;        const token = getAuthToken();&#10;        const res = await fetch(`${API_BASE_URL}/api/v1/adm/coins/${id}`, {&#10;            method: &quot;DELETE&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                ...(token &amp;&amp; {&quot;Authorization&quot;: `Bearer ${token}`}),&#10;            },&#10;            credentials: &quot;include&quot;,&#10;        });&#10;&#10;        if (!res.ok) {&#10;            throw new Error(`코인 삭제 실패: ${res.status}`);&#10;        }&#10;    },&#10;}" />
              <option name="updatedContent" value="const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || &quot;http://localhost:8080&quot;;&#10;&#10;export const coinApi = {&#10;&#10;    // 코인 목록 조회 (관리자용)&#10;    getCoins: async () =&gt; {&#10;        const res = await fetch(`${API_BASE_URL}/api/v1/adm/coins`, {&#10;            method: &quot;GET&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;            },&#10;            credentials: &quot;include&quot;, // HttpOnly 쿠키 자동 전송&#10;        });&#10;&#10;        if (!res.ok) {&#10;            throw new Error(`코인 목록 조회 실패: ${res.status}`);&#10;        }&#10;&#10;        return res.json();&#10;    },&#10;&#10;    // 코인 등록 (관리자용)&#10;    createCoin: async (coinData: { koreanName: string; englishName: string; symbol: string; }) =&gt; {&#10;        const res = await fetch(`${API_BASE_URL}/api/v1/adm/coins`, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;            },&#10;            credentials: &quot;include&quot;, // HttpOnly 쿠키 자동 전송&#10;            body: JSON.stringify(coinData),&#10;        });&#10;&#10;        if (!res.ok) {&#10;            throw new Error(`코인 등록 실패: ${res.status}`);&#10;        }&#10;&#10;        return res.json();&#10;    },&#10;&#10;    // 코인 삭제 (관리자용)&#10;    deleteCoin: async (id: number) =&gt; {&#10;        const res = await fetch(`${API_BASE_URL}/api/v1/adm/coins/${id}`, {&#10;            method: &quot;DELETE&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;            },&#10;            credentials: &quot;include&quot;, // HttpOnly 쿠키 자동 전송&#10;        });&#10;&#10;        if (!res.ok) {&#10;            throw new Error(`코인 삭제 실패: ${res.status}`);&#10;        }&#10;    },&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/middlewar2e.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/middlewar2e.ts" />
              <option name="originalContent" value="// middlewar2e.ts (또는 src/middlewar2e.ts)&#10;import type { NextRequest } from &quot;next/server&quot;;&#10;import { NextResponse } from &quot;next/server&quot;;&#10;&#10;const AUTH_ENABLED = process.env.NEXT_PUBLIC_AUTH_ENABLED !== &quot;false&quot;;&#10;&#10;export function middlewar2e(req: NextRequest) {&#10;    // 인증 끄고 싶을 때는 그냥 통과&#10;    if (!AUTH_ENABLED) return NextResponse.next();&#10;&#10;    const { pathname } = req.nextUrl;&#10;    const token = req.cookies.get(&quot;accessToken&quot;)?.value; // access_token → accessToken으로 변경&#10;    const role = req.cookies.get(&quot;role&quot;)?.value;&#10;&#10;    // ADMIN 전용&#10;    if (pathname.startsWith(&quot;/admin&quot;)) {&#10;        if (!token || role !== &quot;ADMIN&quot;) {&#10;            return NextResponse.redirect(new URL(&quot;/login&quot;, req.url));&#10;        }&#10;        return NextResponse.next();&#10;    }&#10;&#10;    // 보호가 필요한 경로&#10;    const needAuth = [&#10;        &quot;/dashboard&quot;,&#10;        &quot;/wallet&quot;,&#10;        &quot;/transactions&quot;,&#10;        &quot;/coin-transactions&quot;,&#10;    ].some((p) =&gt; pathname.startsWith(p));&#10;&#10;    if (needAuth &amp;&amp; !token) {&#10;        return NextResponse.redirect(new URL(&quot;/login&quot;, req.url));&#10;    }&#10;&#10;    return NextResponse.next();&#10;}&#10;&#10;&#10;export const config = {&#10;    matcher: [&#10;        &quot;/dashboard/:path*&quot;,&#10;        &quot;/wallet/:path*&quot;,&#10;        &quot;/transactions/:path*&quot;,&#10;        &quot;/coin-transactions/:path*&quot;,&#10;        &quot;/admin/:path*&quot;,&#10;    ],&#10;};&#10;" />
              <option name="updatedContent" value="// middlewar2e.ts (또는 src/middlewar2e.ts)&#13;&#10;import type { NextRequest } from &quot;next/server&quot;;&#13;&#10;import { NextResponse } from &quot;next/server&quot;;&#13;&#10;&#13;&#10;// HttpOnly 쿠키 사용 시 middleware에서 인증 확인 불가능하므로 비활성화&#13;&#10;const AUTH_ENABLED = false; // process.env.NEXT_PUBLIC_AUTH_ENABLED !== &quot;false&quot;;&#13;&#10;&#13;&#10;export function middlewar2e(req: NextRequest) {&#13;&#10;    // HttpOnly 쿠키는 middleware에서 읽을 수 없으므로 항상 통과&#13;&#10;    // 실제 인증은 각 페이지에서 API 호출로 처리&#13;&#10;    return NextResponse.next();&#13;&#10;}&#13;&#10;&#13;&#10;export const config = {&#13;&#10;    matcher: [&#13;&#10;        &quot;/dashboard/:path*&quot;,&#13;&#10;        &quot;/wallet/:path*&quot;,&#13;&#10;        &quot;/transactions/:path*&quot;,&#13;&#10;        &quot;/coin-transactions/:path*&quot;,&#13;&#10;        &quot;/admin/:path*&quot;,&#13;&#10;    ],&#13;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>