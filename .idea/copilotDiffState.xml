<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/frontend/src/app/(protected)/transactions/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/(protected)/transactions/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { motion } from &quot;framer-motion&quot;;&#10;import {format, formatDate} from &quot;date-fns&quot;;&#10;import { ko } from &quot;date-fns/locale&quot;;&#10;import { CalendarIcon, RotateCcw, AlertCircle } from &quot;lucide-react&quot;;&#10;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Calendar } from &quot;@/components/ui/calendar&quot;;&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from &quot;@/components/ui/select&quot;;&#10;import { Popover, PopoverContent, PopoverTrigger } from &quot;@/components/ui/popover&quot;;&#10;import { DataTable } from &quot;@/components/ui/data-table&quot;;&#10;import { ColumnDef } from &quot;@tanstack/react-table&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import { PageShell } from &quot;@/components/layout/page-shell&quot;;&#10;import { tradeLogApi } from &quot;@/lib/api/tradelog&quot;;&#10;import type { TradeLogResponse } from &quot;@/lib/types/tradelog&quot;;&#10;&#10;const columns: ColumnDef&lt;TradeLogResponse&gt;[] = [&#10;    {&#10;        accessorKey: &quot;date&quot;,&#10;        header: () =&gt; &lt;div className=&quot;text-center&quot;&gt;거래날짜&lt;/div&gt;,&#10;        cell: ({ getValue }) =&gt; &lt;div className=&quot;text-center&quot;&gt;{getValue() as string}&lt;/div&gt;,&#10;    },&#10;    {&#10;        accessorKey: &quot;coinSymbol&quot;,&#10;        header: () =&gt; &lt;div className=&quot;text-center&quot;&gt;가상화폐 이름&lt;/div&gt;,&#10;        cell: ({ getValue }) =&gt; &lt;div className=&quot;text-center&quot;&gt;{getValue() as string}&lt;/div&gt;,&#10;    },&#10;    {&#10;        accessorKey: &quot;tradeType&quot;,&#10;        header: () =&gt; &lt;div className=&quot;text-center&quot;&gt;거래 구분&lt;/div&gt;,&#10;        cell: ({ getValue }) =&gt; &lt;div className=&quot;text-center&quot;&gt;{getValue() as string}&lt;/div&gt;,&#10;    },&#10;    {&#10;        accessorKey: &quot;price&quot;,&#10;        header: () =&gt; &lt;div className=&quot;text-center&quot;&gt;구매/판매 금액&lt;/div&gt;,&#10;        cell: ({ getValue }) =&gt; &lt;div className=&quot;text-center&quot;&gt;$ {Number(getValue()).toLocaleString()}&lt;/div&gt;,&#10;    },&#10;    {&#10;        accessorKey: &quot;quantity&quot;,&#10;        header: () =&gt; &lt;div className=&quot;text-center&quot;&gt;구매/판매 수&lt;/div&gt;,&#10;        cell: ({ getValue }) =&gt; &lt;div className=&quot;text-center&quot;&gt;{getValue() as string}&lt;/div&gt;,&#10;    },&#10;];&#10;&#10;const fadeInUp = {&#10;    hidden: { opacity: 0, y: 16 },&#10;    show: { opacity: 1, y: 0, transition: { duration: 0.4 } },&#10;};&#10;const stagger = (delay = 0.1) =&gt; ({&#10;    hidden: {},&#10;    show: { transition: { staggerChildren: delay } },&#10;});&#10;&#10;interface FilterState {&#10;    startDate: Date | undefined;&#10;    endDate: Date | undefined;&#10;    transactionType: string;&#10;}&#10;&#10;export default function TransactionsPage() {&#10;    const router = useRouter();&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [isAuthenticated, setIsAuthenticated] = useState(false);&#10;    const [filters, setFilters] = useState&lt;FilterState&gt;({&#10;        startDate: undefined,&#10;        endDate: undefined,&#10;        transactionType: &quot;전체&quot;,&#10;    });&#10;    const [tradeLogData, setTradeLogData] = useState&lt;TradeLogResponse[]&gt;([]);&#10;    const [dateError, setDateError] = useState(&quot;&quot;);&#10;    const [isStartOpen, setIsStartOpen] = useState(false);&#10;    const [isEndOpen, setIsEndOpen] = useState(false);&#10;    const userId = 1;&#10;&#10;    useEffect(() =&gt; {&#10;        const checkAuth = async () =&gt; {&#10;            try {&#10;                const response = await fetch(&#10;                    `${process.env.NEXT_PUBLIC_API_URL || &quot;http://localhost:8080&quot;}/api/v1/users/me`,&#10;                    {&#10;                        method: &quot;GET&quot;,&#10;                        credentials: &quot;include&quot;,&#10;                    }&#10;                );&#10;                if (response.ok) {&#10;                    setIsAuthenticated(true);&#10;                } else {&#10;                    router.replace(&quot;/login&quot;);&#10;                    return;&#10;                }&#10;            } catch (error) {&#10;                console.error(&quot;인증 확인 실패:&quot;, error);&#10;                router.replace(&quot;/login&quot;);&#10;                return;&#10;            } finally {&#10;                setIsLoading(false);&#10;            }&#10;        };&#10;        checkAuth();&#10;    }, [router]);&#10;&#10;    useEffect(() =&gt; {&#10;        if (isAuthenticated) {&#10;           fetchTradeLog();&#10;        }&#10;    }, [isAuthenticated]);&#10;&#10;    const fetchTradeLog = async () =&gt; {&#10;        try {&#10;            setIsLoading(true);&#10;            const response = await tradeLogApi.getUserTradeLogs(userId);&#10;            console.log(&quot;거래 내역 응답:&quot;, response);&#10;&#10;            if (response !== null) {&#10;                // @ts-ignore&#10;                setTradeLogData(response);&#10;            } else {&#10;                console.warn(&quot;거래 내역이 없습니다.&quot;);&#10;            }&#10;        } catch (error) {&#10;            console.error(&quot;거래 내역 조회 실패:&quot;, error);&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    };&#10;&#10;    const handleFilterChange = (key: keyof FilterState, value: any) =&gt; {&#10;        const newFilters = { ...filters, [key]: value };&#10;        setFilters(newFilters);&#10;        const startDate = key === &quot;startDate&quot; ? value : newFilters.startDate;&#10;        const endDate = key === &quot;endDate&quot; ? value : newFilters.endDate;&#10;&#10;        if (startDate &amp;&amp; !endDate) setDateError(&quot;종료일을 선택해주세요.&quot;);&#10;        else if (!startDate &amp;&amp; endDate) setDateError(&quot;시작일을 선택해주세요.&quot;);&#10;        else if (startDate &amp;&amp; endDate &amp;&amp; startDate &gt; endDate)&#10;            setDateError(&quot;시작일은 종료일보다 이전이어야 합니다.&quot;);&#10;        else setDateError(&quot;&quot;);&#10;    };&#10;&#10;    const handleClear = () =&gt; {&#10;        setFilters({&#10;            startDate: undefined,&#10;            endDate: undefined,&#10;            transactionType: &quot;전체&quot;,&#10;        });&#10;        setDateError(&quot;&quot;);&#10;    };&#10;&#10;    const handleFilter = async () =&gt; {&#10;        const params: Record&lt;string, any&gt; = {};&#10;&#10;        if (filters.startDate) {&#10;            params.startDate = formatDate(filters.startDate, 'yyyy-MM-dd');&#10;        }&#10;        if (filters.endDate) {&#10;            params.endDate = formatDate(filters.endDate, 'yyyy-MM-dd');&#10;        }&#10;&#10;        // 거래 유형이 존재할 경우만 추가&#10;        if (filters.transactionType === '매수') {&#10;            params.type = 'BUY';&#10;        } else if (filters.transactionType === '매도') {&#10;            params.type = 'SELL';&#10;        } else if (filters.transactionType === '충전') {&#10;            params.type = 'CHARGE';&#10;        }&#10;&#10;&#10;        try {&#10;            const response = await tradeLogApi.getFilteredTradeLogs(userId, params);&#10;            // @ts-ignore&#10;            setTradeLogData(response);&#10;        } catch (error) {&#10;            console.error(&quot;필터 적용 중 오류 발생:&quot;, error);&#10;        }&#10;    };&#10;&#10;    if (isLoading) {&#10;        return (&#10;            &lt;div className=&quot;container py-8 flex items-center justify-center&quot;&gt;&#10;                &lt;p&gt;로딩 중...&lt;/p&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    if (!isAuthenticated) {&#10;        return null;&#10;    }&#10;&#10;    return (&#10;        &lt;PageShell&#10;            maxW=&quot;max-w-[80vw]&quot;&#10;            padded&#10;            innerClassName={cn(&quot;min-h-[60vh] flex flex-col items-center justify-center text-center space-y-6&quot;)}&#10;        &gt;&#10;            &lt;motion.div className=&quot;container py-8 space-y-6&quot; variants={stagger(0.1)} initial=&quot;hidden&quot; animate=&quot;show&quot;&gt;&#10;                &lt;motion.h1 variants={fadeInUp} className=&quot;text-2xl font-bold w-full text-left&quot;&gt;&#10;                    가상화폐 주문 내역 페이지&#10;                &lt;/motion.h1&gt;&#10;&#10;                {/* 필터 */}&#10;                &lt;motion.div variants={fadeInUp}&gt;&#10;                    &lt;div className=&quot;bg-white p-4 rounded-lg border shadow-sm mb-6&quot;&gt;&#10;                        &lt;div className=&quot;flex flex-wrap items-center justify-around gap-4&quot;&gt;&#10;                            {/* 날짜 선택 */}&#10;                            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                &lt;span className=&quot;text-sm font-medium text-gray-700&quot;&gt;기간 선택&lt;/span&gt;&#10;                                &lt;Popover open={isStartOpen} onOpenChange={setIsStartOpen}&gt;&#10;                                    &lt;PopoverTrigger asChild&gt;&#10;                                        &lt;Button variant=&quot;outline&quot; className={`w-40 justify-start ${dateError ? &quot;border-red-500&quot; : &quot;&quot;}`}&gt;&#10;                                            &lt;CalendarIcon className=&quot;mr-2 h-4 w-4&quot; /&gt;&#10;                                            {filters.startDate ? format(filters.startDate, &quot;yyyy.MM.dd&quot;, { locale: ko }) : &quot;시작일 선택&quot;}&#10;                                        &lt;/Button&gt;&#10;                                    &lt;/PopoverTrigger&gt;&#10;                                    &lt;PopoverContent className=&quot;w-auto p-0&quot;&gt;&#10;                                        &lt;Calendar&#10;                                            mode=&quot;single&quot;&#10;                                            selected={filters.startDate}&#10;                                            onSelect={(date) =&gt; {&#10;                                                setIsStartOpen(false);&#10;                                                handleFilterChange(&quot;startDate&quot;, date);&#10;                                            }}&#10;                                            initialFocus&#10;                                        /&gt;&#10;                                    &lt;/PopoverContent&gt;&#10;                                &lt;/Popover&gt;&#10;                                &lt;span className=&quot;text-gray-500&quot;&gt;~&lt;/span&gt;&#10;                                &lt;Popover open={isEndOpen} onOpenChange={setIsEndOpen}&gt;&#10;                                    &lt;PopoverTrigger asChild&gt;&#10;                                        &lt;Button variant=&quot;outline&quot; className={`w-40 justify-start ${dateError ? &quot;border-red-500&quot; : &quot;&quot;}`}&gt;&#10;                                            &lt;CalendarIcon className=&quot;mr-2 h-4 w-4&quot; /&gt;&#10;                                            {filters.endDate ? format(filters.endDate, &quot;yyyy.MM.dd&quot;, { locale: ko }) : &quot;종료일 선택&quot;}&#10;                                        &lt;/Button&gt;&#10;                                    &lt;/PopoverTrigger&gt;&#10;                                    &lt;PopoverContent className=&quot;w-auto p-0&quot;&gt;&#10;                                        &lt;Calendar&#10;                                            mode=&quot;single&quot;&#10;                                            selected={filters.endDate}&#10;                                            onSelect={(date) =&gt; {&#10;                                                setIsEndOpen(false);&#10;                                                handleFilterChange(&quot;endDate&quot;, date);&#10;                                            }}&#10;                                            initialFocus&#10;                                        /&gt;&#10;                                    &lt;/PopoverContent&gt;&#10;                                &lt;/Popover&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* 거래 구분 */}&#10;                            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                &lt;span className=&quot;text-sm font-medium text-gray-700&quot;&gt;거래구분 선택&lt;/span&gt;&#10;                                &lt;Select&#10;                                    value={filters.transactionType}&#10;                                    onValueChange={(value) =&gt; handleFilterChange(&quot;transactionType&quot;, value)}&#10;                                &gt;&#10;                                    &lt;SelectTrigger className=&quot;w-32&quot;&gt;&#10;                                        &lt;SelectValue /&gt;&#10;                                    &lt;/SelectTrigger&gt;&#10;                                    &lt;SelectContent&gt;&#10;                                        &lt;SelectItem value=&quot;전체&quot;&gt;전체&lt;/SelectItem&gt;&#10;                                        &lt;SelectItem value=&quot;매수&quot;&gt;매수&lt;/SelectItem&gt;&#10;                                        &lt;SelectItem value=&quot;매도&quot;&gt;매도&lt;/SelectItem&gt;&#10;                                        &lt;SelectItem value=&quot;충전&quot;&gt;충전&lt;/SelectItem&gt;&#10;&#10;                                    &lt;/SelectContent&gt;&#10;                                &lt;/Select&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* 버튼 */}&#10;                            &lt;div className=&quot;flex items-center gap-2 justify-end&quot;&gt;&#10;                                &lt;Button variant=&quot;outline&quot; size=&quot;sm&quot; onClick={handleClear} className=&quot;flex items-center gap-2&quot;&gt;&#10;                                    &lt;RotateCcw className=&quot;h-4 w-4&quot; /&gt;&#10;                                    초기화&#10;                                &lt;/Button&gt;&#10;                                &lt;Button&#10;                                    size=&quot;sm&quot;&#10;                                    onClick={handleFilter}&#10;                                    className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;                                    disabled={!!dateError}&#10;                                &gt;&#10;                                    적용&#10;                                &lt;/Button&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        {dateError &amp;&amp; (&#10;                            &lt;div className=&quot;mt-3 flex items-center gap-2 text-red-600 text-sm&quot;&gt;&#10;                                &lt;AlertCircle className=&quot;h-4 w-4&quot; /&gt;&#10;                                {dateError}&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/motion.div&gt;&#10;&#10;                {/* 거래 내역 테이블 */}&#10;                &lt;motion.div variants={fadeInUp}&gt;&#10;                    &lt;DataTable columns={columns} data={tradeLogData} pageSize={10} /&gt;&#10;                &lt;/motion.div&gt;&#10;            &lt;/motion.div&gt;&#10;            {/*&lt;Button*/}&#10;            {/*    size=&quot;sm&quot;*/}&#10;            {/*    className=&quot;bg-green-600 hover:bg-green-700&quot;*/}&#10;            {/*    onClick={async () =&gt; {*/}&#10;            {/*        try {*/}&#10;            {/*            const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/tradeLog/mock`, {*/}&#10;            {/*                method: &quot;POST&quot;,*/}&#10;            {/*                credentials : &quot;include&quot;,*/}&#10;            {/*            });*/}&#10;            {/*            if (res.ok) {*/}&#10;            {/*                alert(&quot;거래 내역 15개 생성 완료!&quot;);*/}&#10;            {/*                fetchTradeLog(); // 다시 불러오기*/}&#10;            {/*            } else {*/}&#10;            {/*                alert(&quot;생성 실패&quot;);*/}&#10;            {/*            }*/}&#10;            {/*        } catch (err) {*/}&#10;            {/*            console.error(&quot;Mock 생성 실패:&quot;, err);*/}&#10;            {/*            alert(&quot;에러 발생&quot;);*/}&#10;            {/*        }*/}&#10;            {/*    }}*/}&#10;            {/*&gt;*/}&#10;            {/*    거래내역 생성*/}&#10;            {/*&lt;/Button&gt;*/}&#10;        &lt;/PageShell&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { motion } from &quot;framer-motion&quot;;&#10;import {format, formatDate} from &quot;date-fns&quot;;&#10;import { ko } from &quot;date-fns/locale&quot;;&#10;import { CalendarIcon, RotateCcw, AlertCircle } from &quot;lucide-react&quot;;&#10;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Calendar } from &quot;@/components/ui/calendar&quot;;&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from &quot;@/components/ui/select&quot;;&#10;import { Popover, PopoverContent, PopoverTrigger } from &quot;@/components/ui/popover&quot;;&#10;import { DataTable } from &quot;@/components/ui/data-table&quot;;&#10;import { ColumnDef } from &quot;@tanstack/react-table&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import { PageShell } from &quot;@/components/layout/page-shell&quot;;&#10;import { tradeLogApi } from &quot;@/lib/api/tradelog&quot;;&#10;import { apiCall } from &quot;@/lib/api/client&quot;;&#10;import type { TradeLogResponse } from &quot;@/lib/types/tradelog&quot;;&#10;&#10;const columns: ColumnDef&lt;TradeLogResponse&gt;[] = [&#10;    {&#10;        accessorKey: &quot;date&quot;,&#10;        header: () =&gt; &lt;div className=&quot;text-center&quot;&gt;거래날짜&lt;/div&gt;,&#10;        cell: ({ getValue }) =&gt; &lt;div className=&quot;text-center&quot;&gt;{getValue() as string}&lt;/div&gt;,&#10;    },&#10;    {&#10;        accessorKey: &quot;coinSymbol&quot;,&#10;        header: () =&gt; &lt;div className=&quot;text-center&quot;&gt;가상화폐 이름&lt;/div&gt;,&#10;        cell: ({ getValue }) =&gt; &lt;div className=&quot;text-center&quot;&gt;{getValue() as string}&lt;/div&gt;,&#10;    },&#10;    {&#10;        accessorKey: &quot;tradeType&quot;,&#10;        header: () =&gt; &lt;div className=&quot;text-center&quot;&gt;거래 구분&lt;/div&gt;,&#10;        cell: ({ getValue }) =&gt; &lt;div className=&quot;text-center&quot;&gt;{getValue() as string}&lt;/div&gt;,&#10;    },&#10;    {&#10;        accessorKey: &quot;price&quot;,&#10;        header: () =&gt; &lt;div className=&quot;text-center&quot;&gt;구매/판매 금액&lt;/div&gt;,&#10;        cell: ({ getValue }) =&gt; &lt;div className=&quot;text-center&quot;&gt;$ {Number(getValue()).toLocaleString()}&lt;/div&gt;,&#10;    },&#10;    {&#10;        accessorKey: &quot;quantity&quot;,&#10;        header: () =&gt; &lt;div className=&quot;text-center&quot;&gt;구매/판매 수&lt;/div&gt;,&#10;        cell: ({ getValue }) =&gt; &lt;div className=&quot;text-center&quot;&gt;{getValue() as string}&lt;/div&gt;,&#10;    },&#10;];&#10;&#10;const fadeInUp = {&#10;    hidden: { opacity: 0, y: 16 },&#10;    show: { opacity: 1, y: 0, transition: { duration: 0.4 } },&#10;};&#10;const stagger = (delay = 0.1) =&gt; ({&#10;    hidden: {},&#10;    show: { transition: { staggerChildren: delay } },&#10;});&#10;&#10;interface FilterState {&#10;    startDate: Date | undefined;&#10;    endDate: Date | undefined;&#10;    transactionType: string;&#10;}&#10;&#10;export default function TransactionsPage() {&#10;    const router = useRouter();&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [isAuthenticated, setIsAuthenticated] = useState(false);&#10;    const [filters, setFilters] = useState&lt;FilterState&gt;({&#10;        startDate: undefined,&#10;        endDate: undefined,&#10;        transactionType: &quot;전체&quot;,&#10;    });&#10;    const [tradeLogData, setTradeLogData] = useState&lt;TradeLogResponse[]&gt;([]);&#10;    const [dateError, setDateError] = useState(&quot;&quot;);&#10;    const [isStartOpen, setIsStartOpen] = useState(false);&#10;    const [isEndOpen, setIsEndOpen] = useState(false);&#10;    const userId = 1;&#10;&#10;    useEffect(() =&gt; {&#10;        const checkAuth = async () =&gt; {&#10;            try {&#10;                // API 클라이언트를 사용하여 일관된 URL과 설정으로 인증 확인&#10;                const response = await apiCall('/v1/users/me');&#10;                if (response) {&#10;                    setIsAuthenticated(true);&#10;                } else {&#10;                    router.replace(&quot;/login&quot;);&#10;                    return;&#10;                }&#10;            } catch (error) {&#10;                console.error(&quot;인증 확인 실패:&quot;, error);&#10;                router.replace(&quot;/login&quot;);&#10;                return;&#10;            } finally {&#10;                setIsLoading(false);&#10;            }&#10;        };&#10;        checkAuth();&#10;    }, [router]);&#10;&#10;    useEffect(() =&gt; {&#10;        if (isAuthenticated) {&#10;           fetchTradeLog();&#10;        }&#10;    }, [isAuthenticated]);&#10;&#10;    const fetchTradeLog = async () =&gt; {&#10;        try {&#10;            setIsLoading(true);&#10;            const response = await tradeLogApi.getUserTradeLogs(userId);&#10;            console.log(&quot;거래 내역 응답:&quot;, response);&#10;&#10;            if (response !== null) {&#10;                // @ts-ignore&#10;                setTradeLogData(response);&#10;            } else {&#10;                console.warn(&quot;거래 내역이 없습니다.&quot;);&#10;            }&#10;        } catch (error) {&#10;            console.error(&quot;거래 내역 조회 실패:&quot;, error);&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    };&#10;&#10;    const handleFilterChange = (key: keyof FilterState, value: any) =&gt; {&#10;        const newFilters = { ...filters, [key]: value };&#10;        setFilters(newFilters);&#10;        const startDate = key === &quot;startDate&quot; ? value : newFilters.startDate;&#10;        const endDate = key === &quot;endDate&quot; ? value : newFilters.endDate;&#10;&#10;        if (startDate &amp;&amp; !endDate) setDateError(&quot;종료일을 선택해주세요.&quot;);&#10;        else if (!startDate &amp;&amp; endDate) setDateError(&quot;시작일을 선택해주세요.&quot;);&#10;        else if (startDate &amp;&amp; endDate &amp;&amp; startDate &gt; endDate)&#10;            setDateError(&quot;시작일은 종료일보다 이전이어야 합니다.&quot;);&#10;        else setDateError(&quot;&quot;);&#10;    };&#10;&#10;    const handleClear = () =&gt; {&#10;        setFilters({&#10;            startDate: undefined,&#10;            endDate: undefined,&#10;            transactionType: &quot;전체&quot;,&#10;        });&#10;        setDateError(&quot;&quot;);&#10;    };&#10;&#10;    const handleFilter = async () =&gt; {&#10;        const params: Record&lt;string, any&gt; = {};&#10;&#10;        if (filters.startDate) {&#10;            params.startDate = formatDate(filters.startDate, 'yyyy-MM-dd');&#10;        }&#10;        if (filters.endDate) {&#10;            params.endDate = formatDate(filters.endDate, 'yyyy-MM-dd');&#10;        }&#10;&#10;        // 거래 유형이 존재할 경우만 추가&#10;        if (filters.transactionType === '매수') {&#10;            params.type = 'BUY';&#10;        } else if (filters.transactionType === '매도') {&#10;            params.type = 'SELL';&#10;        } else if (filters.transactionType === '충전') {&#10;            params.type = 'CHARGE';&#10;        }&#10;&#10;&#10;        try {&#10;            const response = await tradeLogApi.getFilteredTradeLogs(userId, params);&#10;            // @ts-ignore&#10;            setTradeLogData(response);&#10;        } catch (error) {&#10;            console.error(&quot;필터 적용 중 오류 발생:&quot;, error);&#10;        }&#10;    };&#10;&#10;    if (isLoading) {&#10;        return (&#10;            &lt;div className=&quot;container py-8 flex items-center justify-center&quot;&gt;&#10;                &lt;p&gt;로딩 중...&lt;/p&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    if (!isAuthenticated) {&#10;        return null;&#10;    }&#10;&#10;    return (&#10;        &lt;PageShell&#10;            maxW=&quot;max-w-[80vw]&quot;&#10;            padded&#10;            innerClassName={cn(&quot;min-h-[60vh] flex flex-col items-center justify-center text-center space-y-6&quot;)}&#10;        &gt;&#10;            &lt;motion.div className=&quot;container py-8 space-y-6&quot; variants={stagger(0.1)} initial=&quot;hidden&quot; animate=&quot;show&quot;&gt;&#10;                &lt;motion.h1 variants={fadeInUp} className=&quot;text-2xl font-bold w-full text-left&quot;&gt;&#10;                    가상화폐 주문 내역 페이지&#10;                &lt;/motion.h1&gt;&#10;&#10;                {/* 필터 */}&#10;                &lt;motion.div variants={fadeInUp}&gt;&#10;                    &lt;div className=&quot;bg-white p-4 rounded-lg border shadow-sm mb-6&quot;&gt;&#10;                        &lt;div className=&quot;flex flex-wrap items-center justify-around gap-4&quot;&gt;&#10;                            {/* 날짜 선택 */}&#10;                            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                &lt;span className=&quot;text-sm font-medium text-gray-700&quot;&gt;기간 선택&lt;/span&gt;&#10;                                &lt;Popover open={isStartOpen} onOpenChange={setIsStartOpen}&gt;&#10;                                    &lt;PopoverTrigger asChild&gt;&#10;                                        &lt;Button variant=&quot;outline&quot; className={`w-40 justify-start ${dateError ? &quot;border-red-500&quot; : &quot;&quot;}`}&gt;&#10;                                            &lt;CalendarIcon className=&quot;mr-2 h-4 w-4&quot; /&gt;&#10;                                            {filters.startDate ? format(filters.startDate, &quot;yyyy.MM.dd&quot;, { locale: ko }) : &quot;시작일 선택&quot;}&#10;                                        &lt;/Button&gt;&#10;                                    &lt;/PopoverTrigger&gt;&#10;                                    &lt;PopoverContent className=&quot;w-auto p-0&quot;&gt;&#10;                                        &lt;Calendar&#10;                                            mode=&quot;single&quot;&#10;                                            selected={filters.startDate}&#10;                                            onSelect={(date) =&gt; {&#10;                                                setIsStartOpen(false);&#10;                                                handleFilterChange(&quot;startDate&quot;, date);&#10;                                            }}&#10;                                            initialFocus&#10;                                        /&gt;&#10;                                    &lt;/PopoverContent&gt;&#10;                                &lt;/Popover&gt;&#10;                                &lt;span className=&quot;text-gray-500&quot;&gt;~&lt;/span&gt;&#10;                                &lt;Popover open={isEndOpen} onOpenChange={setIsEndOpen}&gt;&#10;                                    &lt;PopoverTrigger asChild&gt;&#10;                                        &lt;Button variant=&quot;outline&quot; className={`w-40 justify-start ${dateError ? &quot;border-red-500&quot; : &quot;&quot;}`}&gt;&#10;                                            &lt;CalendarIcon className=&quot;mr-2 h-4 w-4&quot; /&gt;&#10;                                            {filters.endDate ? format(filters.endDate, &quot;yyyy.MM.dd&quot;, { locale: ko }) : &quot;종료일 선택&quot;}&#10;                                        &lt;/Button&gt;&#10;                                    &lt;/PopoverTrigger&gt;&#10;                                    &lt;PopoverContent className=&quot;w-auto p-0&quot;&gt;&#10;                                        &lt;Calendar&#10;                                            mode=&quot;single&quot;&#10;                                            selected={filters.endDate}&#10;                                            onSelect={(date) =&gt; {&#10;                                                setIsEndOpen(false);&#10;                                                handleFilterChange(&quot;endDate&quot;, date);&#10;                                            }}&#10;                                            initialFocus&#10;                                        /&gt;&#10;                                    &lt;/PopoverContent&gt;&#10;                                &lt;/Popover&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* 거래 구분 */}&#10;                            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                &lt;span className=&quot;text-sm font-medium text-gray-700&quot;&gt;거래구분 선택&lt;/span&gt;&#10;                                &lt;Select&#10;                                    value={filters.transactionType}&#10;                                    onValueChange={(value) =&gt; handleFilterChange(&quot;transactionType&quot;, value)}&#10;                                &gt;&#10;                                    &lt;SelectTrigger className=&quot;w-32&quot;&gt;&#10;                                        &lt;SelectValue /&gt;&#10;                                    &lt;/SelectTrigger&gt;&#10;                                    &lt;SelectContent&gt;&#10;                                        &lt;SelectItem value=&quot;전체&quot;&gt;전체&lt;/SelectItem&gt;&#10;                                        &lt;SelectItem value=&quot;매수&quot;&gt;매수&lt;/SelectItem&gt;&#10;                                        &lt;SelectItem value=&quot;매도&quot;&gt;매도&lt;/SelectItem&gt;&#10;                                        &lt;SelectItem value=&quot;충전&quot;&gt;충전&lt;/SelectItem&gt;&#10;&#10;                                    &lt;/SelectContent&gt;&#10;                                &lt;/Select&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* 버튼 */}&#10;                            &lt;div className=&quot;flex items-center gap-2 justify-end&quot;&gt;&#10;                                &lt;Button variant=&quot;outline&quot; size=&quot;sm&quot; onClick={handleClear} className=&quot;flex items-center gap-2&quot;&gt;&#10;                                    &lt;RotateCcw className=&quot;h-4 w-4&quot; /&gt;&#10;                                    초기화&#10;                                &lt;/Button&gt;&#10;                                &lt;Button&#10;                                    size=&quot;sm&quot;&#10;                                    onClick={handleFilter}&#10;                                    className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;                                    disabled={!!dateError}&#10;                                &gt;&#10;                                    적용&#10;                                &lt;/Button&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        {dateError &amp;&amp; (&#10;                            &lt;div className=&quot;mt-3 flex items-center gap-2 text-red-600 text-sm&quot;&gt;&#10;                                &lt;AlertCircle className=&quot;h-4 w-4&quot; /&gt;&#10;                                {dateError}&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/motion.div&gt;&#10;&#10;                {/* 거래 내역 테이블 */}&#10;                &lt;motion.div variants={fadeInUp}&gt;&#10;                    &lt;DataTable columns={columns} data={tradeLogData} pageSize={10} /&gt;&#10;                &lt;/motion.div&gt;&#10;            &lt;/motion.div&gt;&#10;            {/*&lt;Button*/}&#10;            {/*    size=&quot;sm&quot;*/}&#10;            {/*    className=&quot;bg-green-600 hover:bg-green-700&quot;*/}&#10;            {/*    onClick={async () =&gt; {*/}&#10;            {/*        try {*/}&#10;            {/*            const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/tradeLog/mock`, {*/}&#10;            {/*                method: &quot;POST&quot;,*/}&#10;            {/*                credentials : &quot;include&quot;,*/}&#10;            {/*            });*/}&#10;            {/*            if (res.ok) {*/}&#10;            {/*                alert(&quot;거래 내역 15개 생성 완료!&quot;);*/}&#10;            {/*                fetchTradeLog(); // 다시 불러오기*/}&#10;            {/*            } else {*/}&#10;            {/*                alert(&quot;생성 실패&quot;);*/}&#10;            {/*            }*/}&#10;            {/*        } catch (err) {*/}&#10;            {/*            console.error(&quot;Mock 생성 실패:&quot;, err);*/}&#10;            {/*            alert(&quot;에러 발생&quot;);*/}&#10;            {/*        }*/}&#10;            {/*    }}*/}&#10;            {/*&gt;*/}&#10;            {/*    거래내역 생성*/}&#10;            {/*&lt;/Button&gt;*/}&#10;        &lt;/PageShell&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/layout/main-nav.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/layout/main-nav.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import { usePathname } from &quot;next/navigation&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import * as React from &quot;react&quot;;&#10;&#10;type NavLink = { href: string; label: string };&#10;&#10;const defaultLinks: NavLink[] = [&#10;    { href: &quot;/&quot;, label: &quot;Home&quot; },&#10;    { href: &quot;/dashboard&quot;, label: &quot;Dashboard&quot; },&#10;    { href: &quot;/wallet&quot;, label: &quot;Wallet&quot; },&#10;    { href: &quot;/transactions&quot;, label: &quot;Transactions&quot; },&#10;    { href: &quot;/analytics&quot;, label: &quot;Analytics&quot; },&#10;    { href: &quot;/admin/coins/new&quot;, label: &quot;Admin&quot; },&#10;];&#10;&#10;type MainNavProps = React.ComponentPropsWithoutRef&lt;&quot;header&quot;&gt; &amp; {&#10;    innerClassName?: string;&#10;    links?: NavLink[];&#10;};&#10;&#10;export function MainNav({&#10;    className,&#10;    innerClassName,&#10;    links = defaultLinks,&#10;    ...props&#10;}: MainNavProps) {&#10;    const pathname = usePathname();&#10;    const [isLoggedIn, setIsLoggedIn] = React.useState(false);&#10;&#10;    React.useEffect(() =&gt; {&#10;        const checkLoginStatus = async () =&gt; {&#10;            try {&#10;                const response = await fetch(&#10;                    `${process.env.NEXT_PUBLIC_API_URL || &quot;http://localhost:8080&quot;}/api/v1/users/me`,&#10;                    {&#10;                        method: &quot;GET&quot;,&#10;                        credentials: &quot;include&quot;, // HttpOnly 쿠키 전송&#10;                    }&#10;                );&#10;                &#10;                setIsLoggedIn(response.ok);&#10;                console.log(' 로그인 상태:', response.ok);&#10;            } catch (error) {&#10;                console.error('로그인 상태 확인 실패:', error);&#10;                setIsLoggedIn(false);&#10;            }&#10;        };&#10;        &#10;        // 초기 체크&#10;        checkLoginStatus();&#10;        &#10;        // 페이지 포커스 시에도 체크&#10;        window.addEventListener('focus', checkLoginStatus);&#10;        &#10;        // 주기적 체크 (30초마다)&#10;        const interval = setInterval(checkLoginStatus, 30000);&#10;        &#10;        return () =&gt; {&#10;            window.removeEventListener('focus', checkLoginStatus);&#10;            clearInterval(interval);&#10;        };&#10;    }, []);&#10;&#10;    return (&#10;        &lt;header className={cn(&quot;border-b bg-white&quot;, className)} {...props}&gt;&#10;            &lt;div&#10;                className={cn(&#10;                    &quot;w-full px-4 md:px-6 lg:px-8&quot;,&#10;                    &quot;flex h-16 items-center justify-between&quot;,&#10;                    innerClassName&#10;                )}&#10;            &gt;&#10;&#10;                &lt;Link href=&quot;/&quot; className=&quot;flex items-center gap-2 font-bold text-amber-600&quot;&gt;&#10;                    &lt;img &#10;                        src=&quot;/images/back9-coin-logo.PNG&quot; &#10;                        alt=&quot;BACK9 Coin Logo&quot; &#10;                        className=&quot;w-8 h-8 object-contain&quot;&#10;                    /&gt;&#10;                    Back9 Coin&#10;                &lt;/Link&gt;&#10;&#10;                &lt;nav className=&quot;hidden md:flex gap-6&quot;&gt;&#10;                    {links.map((l) =&gt; {&#10;                        const active = pathname === l.href;&#10;                        return (&#10;                            &lt;Link&#10;                                key={l.href}&#10;                                href={l.href}&#10;                                className={cn(&#10;                                    &quot;text-sm font-medium text-muted-foreground hover:text-foreground transition-colors&quot;,&#10;                                    active &amp;&amp; &quot;text-foreground&quot;&#10;                                )}&#10;                                aria-current={active ? &quot;page&quot; : undefined}&#10;                                prefetch&#10;                            &gt;&#10;                                {l.label}&#10;                            &lt;/Link&gt;&#10;                        );&#10;                    })}&#10;                &lt;/nav&gt;&#10;&#10;                &lt;Button asChild variant=&quot;outline&quot; size=&quot;sm&quot;&gt;&#10;                    &lt;Link href={isLoggedIn ? &quot;/user&quot; : &quot;/login&quot;}&gt;&#10;                        {isLoggedIn ? &quot;MyPage&quot; : &quot;Login&quot;}&#10;                    &lt;/Link&gt;&#10;                &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/header&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import Link from &quot;next/link&quot;;&#10;import { usePathname } from &quot;next/navigation&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import { apiCall } from &quot;@/lib/api/client&quot;;&#10;import * as React from &quot;react&quot;;&#10;&#10;type NavLink = { href: string; label: string };&#10;&#10;const defaultLinks: NavLink[] = [&#10;    { href: &quot;/&quot;, label: &quot;Home&quot; },&#10;    { href: &quot;/dashboard&quot;, label: &quot;Dashboard&quot; },&#10;    { href: &quot;/wallet&quot;, label: &quot;Wallet&quot; },&#10;    { href: &quot;/transactions&quot;, label: &quot;Transactions&quot; },&#10;    { href: &quot;/analytics&quot;, label: &quot;Analytics&quot; },&#10;    { href: &quot;/admin/coins/new&quot;, label: &quot;Admin&quot; },&#10;];&#10;&#10;type MainNavProps = React.ComponentPropsWithoutRef&lt;&quot;header&quot;&gt; &amp; {&#10;    innerClassName?: string;&#10;    links?: NavLink[];&#10;};&#10;&#10;export function MainNav({&#10;    className,&#10;    innerClassName,&#10;    links = defaultLinks,&#10;    ...props&#10;}: MainNavProps) {&#10;    const pathname = usePathname();&#10;    const [isLoggedIn, setIsLoggedIn] = React.useState(false);&#10;&#10;    React.useEffect(() =&gt; {&#10;        const checkLoginStatus = async () =&gt; {&#10;            try {&#10;                // API 클라이언트를 사용하여 일관된 URL과 설정으로 로그인 상태 확인&#10;                const response = await apiCall('/v1/users/me');&#10;                &#10;                setIsLoggedIn(!!response);&#10;                console.log(' 로그인 상태:', !!response);&#10;            } catch (error) {&#10;                console.error('로그인 상태 확인 실패:', error);&#10;                setIsLoggedIn(false);&#10;            }&#10;        };&#10;        &#10;        // 초기 체크&#10;        checkLoginStatus();&#10;        &#10;        // 페이지 포커스 시에도 체크&#10;        window.addEventListener('focus', checkLoginStatus);&#10;        &#10;        // 주기적 체크 (30초마다)&#10;        const interval = setInterval(checkLoginStatus, 30000);&#10;        &#10;        return () =&gt; {&#10;            window.removeEventListener('focus', checkLoginStatus);&#10;            clearInterval(interval);&#10;        };&#10;    }, []);&#10;&#10;    return (&#10;        &lt;header className={cn(&quot;border-b bg-white&quot;, className)} {...props}&gt;&#10;            &lt;div&#10;                className={cn(&#10;                    &quot;w-full px-4 md:px-6 lg:px-8&quot;,&#10;                    &quot;flex h-16 items-center justify-between&quot;,&#10;                    innerClassName&#10;                )}&#10;            &gt;&#10;&#10;                &lt;Link href=&quot;/&quot; className=&quot;flex items-center gap-2 font-bold text-amber-600&quot;&gt;&#10;                    &lt;img &#10;                        src=&quot;/images/back9-coin-logo.PNG&quot; &#10;                        alt=&quot;BACK9 Coin Logo&quot; &#10;                        className=&quot;w-8 h-8 object-contain&quot;&#10;                    /&gt;&#10;                    Back9 Coin&#10;                &lt;/Link&gt;&#10;&#10;                &lt;nav className=&quot;hidden md:flex gap-6&quot;&gt;&#10;                    {links.map((l) =&gt; {&#10;                        const active = pathname === l.href;&#10;                        return (&#10;                            &lt;Link&#10;                                key={l.href}&#10;                                href={l.href}&#10;                                className={cn(&#10;                                    &quot;text-sm font-medium text-muted-foreground hover:text-foreground transition-colors&quot;,&#10;                                    active &amp;&amp; &quot;text-foreground&quot;&#10;                                )}&#10;                                aria-current={active ? &quot;page&quot; : undefined}&#10;                                prefetch&#10;                            &gt;&#10;                                {l.label}&#10;                            &lt;/Link&gt;&#10;                        );&#10;                    })}&#10;                &lt;/nav&gt;&#10;&#10;                &lt;Button asChild variant=&quot;outline&quot; size=&quot;sm&quot;&gt;&#10;                    &lt;Link href={isLoggedIn ? &quot;/user&quot; : &quot;/login&quot;}&gt;&#10;                        {isLoggedIn ? &quot;MyPage&quot; : &quot;Login&quot;}&#10;                    &lt;/Link&gt;&#10;                &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/header&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>