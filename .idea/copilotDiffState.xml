<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/backend/src/main/java/com/back/back9/domain/tradeLog/controller/TradeLogController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/com/back/back9/domain/tradeLog/controller/TradeLogController.java" />
              <option name="originalContent" value="package com.back.back9.domain.tradeLog.controller;&#10;&#10;import com.back.back9.domain.tradeLog.dto.TradeLogDto;&#10;import com.back.back9.domain.tradeLog.dto.TradeLogRequest;&#10;import com.back.back9.domain.tradeLog.dto.TradeLogResponse;&#10;import com.back.back9.domain.tradeLog.entity.TradeLog;&#10;import com.back.back9.domain.tradeLog.entity.TradeType;&#10;import com.back.back9.domain.tradeLog.service.TradeLogService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.slf4j.Logger;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.transaction.annotation.Transactional;&#10;import org.springframework.validation.annotation.Validated;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.time.LocalDateTime;&#10;import java.time.LocalTime;&#10;import java.util.List;&#10;&#10;/**&#10; * 거래내역 컨트롤러&#10; * @author dhj&#10; * 거래내역은 거래가 발생할 때마다 자동으로 생성되며, 사용자가 직접 추가하거나 수정할 수 없음&#10; * 본인 계정의 거래내역만 조회 가능&#10; */&#10;@RestController&#10;@RequestMapping(&quot;/api/tradeLog&quot;)&#10;@RequiredArgsConstructor&#10;@Validated&#10;public class TradeLogController {&#10;    private final TradeLogService tradeLogService;&#10;    private static final Logger log = (Logger) org.slf4j.LoggerFactory.getLogger(TradeLogController.class);&#10;&#10;    @GetMapping(&quot;/wallet/{wallet_id}&quot;)&#10;    ///back9/tradeLogs?startDate=2023-10-01&amp;endDate=2023-10-31&amp;type=buy&#10;    public ResponseEntity&lt;List&lt;TradeLogResponse&gt;&gt; getItems(&#10;            @PathVariable(&quot;wallet_id&quot;) Long walletId,  // int → Long으로 변경&#10;            @ModelAttribute TradeLogRequest request,&#10;            Pageable pageable&#10;    ) {&#10;        LocalDateTime startDateTime = request.startDate() != null ? request.startDate().atStartOfDay() : null;&#10;        LocalDateTime endDateTime = request.endDate() != null ? request.endDate().atTime(LocalTime.MAX) : null;&#10;&#10;        TradeType tradeType = null;&#10;        if (request.type() != null) {&#10;            try {&#10;                tradeType = TradeType.valueOf(request.type().toUpperCase());&#10;            } catch (IllegalArgumentException e) {&#10;                throw new IllegalArgumentException(&quot;Invalid trade type: &quot; + request.type());&#10;            }&#10;        }&#10;&#10;        List&lt;TradeLogDto&gt; items = tradeLogService.findByFilter(&#10;                walletId,&#10;                tradeType,&#10;                request.coinId(),&#10;                startDateTime,&#10;                endDateTime,&#10;                pageable&#10;        );&#10;&#10;        List&lt;TradeLogResponse&gt; result = items.stream()&#10;                .map(TradeLogResponse::new)&#10;                .toList();&#10;&#10;        log.info(&quot;거래내역 조회 - 지갑 ID: {}, 거래 유형: {}, 코인 ID: {}, 시작일: {}, 종료일: {}, 페이지: {}&quot;,&#10;                walletId, request.type(), request.coinId(), request.startDate(), request.endDate(), pageable.getPageNumber());&#10;&#10;        return ResponseEntity.ok(result);&#10;    }&#10;    @PostMapping(&quot;/mock&quot;)&#10;    public ResponseEntity&lt;?&gt; createMockTradeLogs() {&#10;        tradeLogService.createMockLogs();&#10;        return ResponseEntity.ok(&quot;Mock trade logs created.&quot;);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.back.back9.domain.tradeLog.controller;&#10;&#10;import com.back.back9.domain.tradeLog.dto.TradeLogDto;&#10;import com.back.back9.domain.tradeLog.dto.TradeLogRequest;&#10;import com.back.back9.domain.tradeLog.dto.TradeLogResponse;&#10;import com.back.back9.domain.tradeLog.entity.TradeLog;&#10;import com.back.back9.domain.tradeLog.entity.TradeType;&#10;import com.back.back9.domain.tradeLog.service.TradeLogService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.slf4j.Logger;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.transaction.annotation.Transactional;&#10;import org.springframework.validation.annotation.Validated;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.time.LocalDateTime;&#10;import java.time.LocalTime;&#10;import java.util.List;&#10;&#10;/**&#10; * 거래내역 컨트롤러&#10; * @author dhj&#10; * 거래내역은 거래가 발생할 때마다 자동으로 생성되며, 사용자가 직접 추가하거나 수정할 수 없음&#10; * 본인 계정의 거래내역만 조회 가능&#10; */&#10;@RestController&#10;@RequestMapping(&quot;/api/tradeLog&quot;)&#10;@RequiredArgsConstructor&#10;@Validated&#10;public class TradeLogController {&#10;    private final TradeLogService tradeLogService;&#10;    private static final Logger log = (Logger) org.slf4j.LoggerFactory.getLogger(TradeLogController.class);&#10;&#10;    @GetMapping(&quot;/wallet/{wallet_id}&quot;)&#10;    ///back9/tradeLogs?startDate=2023-10-01&amp;endDate=2023-10-31&amp;type=buy&#10;    public ResponseEntity&lt;List&lt;TradeLogResponse&gt;&gt; getItems(&#10;            @PathVariable(&quot;wallet_id&quot;) Long walletId,  // int → Long으로 변경&#10;            @ModelAttribute TradeLogRequest request,&#10;            Pageable pageable&#10;    ) {&#10;        LocalDateTime startDateTime = request.startDate() != null ? request.startDate().atStartOfDay() : null;&#10;        LocalDateTime endDateTime = request.endDate() != null ? request.endDate().atTime(LocalTime.MAX) : null;&#10;&#10;        TradeType tradeType = null;&#10;        if (request.type() != null) {&#10;            try {&#10;                tradeType = TradeType.valueOf(request.type().toUpperCase());&#10;            } catch (IllegalArgumentException e) {&#10;                throw new IllegalArgumentException(&quot;Invalid trade type: &quot; + request.type());&#10;            }&#10;        }&#10;&#10;        List&lt;TradeLogDto&gt; items = tradeLogService.findByFilter(&#10;                walletId,&#10;                tradeType,&#10;                request.coinId(),&#10;                startDateTime,&#10;                endDateTime,&#10;                pageable&#10;        );&#10;&#10;        List&lt;TradeLogResponse&gt; result = items.stream()&#10;                .map(TradeLogResponse::new)&#10;                .toList();&#10;&#10;        log.info(&quot;거래내역 조회 - 지갑 ID: {}, 거래 유형: {}, 코인 ID: {}, 시작일: {}, 종료일: {}, 페이지: {}&quot;,&#10;                walletId, request.type(), request.coinId(), request.startDate(), request.endDate(), pageable.getPageNumber());&#10;&#10;        return ResponseEntity.ok(result);&#10;    }&#10;&#10;    // 새로운 엔드포인트: userId로 거래 내역 조회&#10;    @GetMapping(&quot;/user/{user_id}&quot;)&#10;    public ResponseEntity&lt;List&lt;TradeLogResponse&gt;&gt; getItemsByUserId(&#10;            @PathVariable(&quot;user_id&quot;) Long userId,&#10;            @ModelAttribute TradeLogRequest request,&#10;            Pageable pageable&#10;    ) {&#10;        LocalDateTime startDateTime = request.startDate() != null ? request.startDate().atStartOfDay() : null;&#10;        LocalDateTime endDateTime = request.endDate() != null ? request.endDate().atTime(LocalTime.MAX) : null;&#10;&#10;        TradeType tradeType = null;&#10;        if (request.type() != null) {&#10;            try {&#10;                tradeType = TradeType.valueOf(request.type().toUpperCase());&#10;            } catch (IllegalArgumentException e) {&#10;                throw new IllegalArgumentException(&quot;Invalid trade type: &quot; + request.type());&#10;            }&#10;        }&#10;&#10;        // userId로 거래 내역 조회 (서비스에서 내부적으로 지갑 찾기)&#10;        List&lt;TradeLogDto&gt; items = tradeLogService.findByUserIdAndFilter(&#10;                userId,&#10;                tradeType,&#10;                request.coinId(),&#10;                startDateTime,&#10;                endDateTime,&#10;                pageable&#10;        );&#10;&#10;        List&lt;TradeLogResponse&gt; result = items.stream()&#10;                .map(TradeLogResponse::new)&#10;                .toList();&#10;&#10;        log.info(&quot;사용자별 거래내역 조회 - 사용자 ID: {}, 거래 유형: {}, 코인 ID: {}, 시작일: {}, 종료일: {}, 페이지: {}&quot;,&#10;                userId, request.type(), request.coinId(), request.startDate(), request.endDate(), pageable.getPageNumber());&#10;&#10;        return ResponseEntity.ok(result);&#10;    }&#10;&#10;    @PostMapping(&quot;/mock&quot;)&#10;    public ResponseEntity&lt;?&gt; createMockTradeLogs() {&#10;        tradeLogService.createMockLogs();&#10;        return ResponseEntity.ok(&quot;Mock trade logs created.&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/main/java/com/back/back9/domain/tradeLog/repository/TradeLogRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/com/back/back9/domain/tradeLog/repository/TradeLogRepository.java" />
              <option name="originalContent" value="package com.back.back9.domain.tradeLog.repository;&#10;&#10;import com.back.back9.domain.tradeLog.entity.TradeLog;&#10;import com.back.back9.domain.tradeLog.entity.TradeType;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public interface TradeLogRepository extends JpaRepository&lt;TradeLog, Long&gt; {&#10;    Optional&lt;TradeLog&gt; findFirstByOrderByIdDesc();&#10;    List&lt;TradeLog&gt; findByWalletId(Long walletId);&#10;    Page&lt;TradeLog&gt; findByWalletId(Long walletId, Pageable pageable);&#10;    @Query(&quot;SELECT t FROM TradeLog t &quot; +&#10;            &quot;WHERE t.wallet.id = :walletId &quot; +&#10;            &quot;AND (:type IS NULL OR t.type = :type) &quot; +&#10;            &quot;AND (:coinId IS NULL OR t.coin.id = :coinId) &quot; +&#10;            &quot;AND (:startDate IS NULL OR t.createdAt &gt;= :startDate) &quot; +&#10;            &quot;AND (:endDate IS NULL OR t.createdAt &lt;= :endDate)&quot;)&#10;    Page&lt;TradeLog&gt; findByWalletIdFilter(@Param(&quot;walletId&quot;) Long walletId,&#10;                                        @Param(&quot;type&quot;) TradeType type, // ← enum으로 변경&#10;                                        @Param(&quot;coinId&quot;) Integer  coinId,&#10;                                        @Param(&quot;startDate&quot;) LocalDateTime startDate,&#10;                                        @Param(&quot;endDate&quot;) LocalDateTime endDate,&#10;                                        Pageable pageable);&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.back.back9.domain.tradeLog.repository;&#10;&#10;import com.back.back9.domain.tradeLog.entity.TradeLog;&#10;import com.back.back9.domain.tradeLog.entity.TradeType;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public interface TradeLogRepository extends JpaRepository&lt;TradeLog, Long&gt; {&#10;    Optional&lt;TradeLog&gt; findFirstByOrderByIdDesc();&#10;    List&lt;TradeLog&gt; findByWalletId(Long walletId);&#10;    Page&lt;TradeLog&gt; findByWalletId(Long walletId, Pageable pageable);&#10;    @Query(&quot;SELECT t FROM TradeLog t &quot; +&#10;            &quot;WHERE t.wallet.id = :walletId &quot; +&#10;            &quot;AND (:type IS NULL OR t.type = :type) &quot; +&#10;            &quot;AND (:coinId IS NULL OR t.coin.id = :coinId) &quot; +&#10;            &quot;AND (:startDate IS NULL OR t.createdAt &gt;= :startDate) &quot; +&#10;            &quot;AND (:endDate IS NULL OR t.createdAt &lt;= :endDate)&quot;)&#10;    Page&lt;TradeLog&gt; findByWalletIdFilter(@Param(&quot;walletId&quot;) Long walletId,&#10;                                        @Param(&quot;type&quot;) TradeType type,&#10;                                        @Param(&quot;coinId&quot;) Integer coinId,&#10;                                        @Param(&quot;startDate&quot;) LocalDateTime startDate,&#10;                                        @Param(&quot;endDate&quot;) LocalDateTime endDate,&#10;                                        Pageable pageable);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/main/java/com/back/back9/domain/tradeLog/service/TradeLogService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/com/back/back9/domain/tradeLog/service/TradeLogService.java" />
              <option name="originalContent" value="package com.back.back9.domain.tradeLog.service;&#10;&#10;import com.back.back9.domain.coin.entity.Coin;&#10;import com.back.back9.domain.coin.repository.CoinRepository;&#10;import com.back.back9.domain.tradeLog.dto.TradeLogDto;&#10;import com.back.back9.domain.tradeLog.entity.TradeLog;&#10;import com.back.back9.domain.tradeLog.entity.TradeType;&#10;import com.back.back9.domain.tradeLog.repository.TradeLogRepository;&#10;import com.back.back9.domain.wallet.entity.Wallet;&#10;import com.back.back9.domain.wallet.repository.WalletRepository;&#10;import jakarta.persistence.EntityNotFoundException;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.stream.Collectors;&#10;&#10;&#10;@Service&#10;public class TradeLogService {&#10;    private final TradeLogRepository tradeLogRepository;&#10;    private final WalletRepository walletRepository;&#10;    private final CoinRepository coinRepository;&#10;&#10;    public TradeLogService(TradeLogRepository tradeLogRepository,&#10;                           WalletRepository walletRepository,&#10;                           CoinRepository coinRepository) {&#10;        this.tradeLogRepository = tradeLogRepository;&#10;        this.walletRepository = walletRepository;&#10;        this.coinRepository = coinRepository;&#10;&#10;    }&#10;    @Transactional(readOnly = true)&#10;    public List&lt;TradeLog&gt; findAll() {&#10;        return tradeLogRepository.findAll();&#10;    }&#10;    @Transactional(readOnly = true)&#10;    public Optional&lt;TradeLog&gt; findLatest() {&#10;        return tradeLogRepository.findFirstByOrderByIdDesc();&#10;&#10;    }&#10;    @Transactional(readOnly = true)&#10;    public List&lt;TradeLogDto&gt; findByWalletId(LONG walletId) {&#10;        return tradeLogRepository.findByWalletId(walletId)&#10;                .stream()&#10;                .map(TradeLogDto::from)&#10;                .collect(Collectors.toList());&#10;    }&#10;    @Transactional(readOnly = true)&#10;    public List&lt;TradeLogDto&gt; findByFilter(Long walletId, TradeType type, Integer coinId, LocalDateTime startDate, LocalDateTime endDate, Pageable pageable) {&#10;        Page&lt;TradeLog&gt; logs = tradeLogRepository.findByWalletIdFilter(walletId, type, coinId, startDate, endDate, pageable);&#10;&#10;        return logs.stream()&#10;                .map(TradeLogDto::from)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    // 새로운 메서드: userId로 거래 내역 조회&#10;    @Transactional(readOnly = true)&#10;    public List&lt;TradeLogDto&gt; findByUserIdAndFilter(Long userId, TradeType type, Integer coinId, LocalDateTime startDate, LocalDateTime endDate, Pageable pageable) {&#10;        // userId로 지갑 찾기&#10;        Wallet wallet = walletRepository.findByUserId(userId)&#10;                .orElseThrow(() -&gt; new EntityNotFoundException(&quot;사용자 ID &quot; + userId + &quot;의 지갑을 찾을 수 없습니다.&quot;));&#10;&#10;        // 지갑 ID를 Long → int로 변환하여 기존 메서드 호출&#10;        Page&lt;TradeLog&gt; logs = tradeLogRepository.findByWalletIdFilter(wallet.getId().intValue(), type, coinId, startDate, endDate, pageable);&#10;&#10;        return logs.stream()&#10;                .map(TradeLogDto::from)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public List&lt;TradeLogDto&gt; findByWalletIdAndTypeCharge(Long walletId) {&#10;        return findByWalletId(walletId).stream()&#10;                .filter(log -&gt; log.tradeType() == com.back.back9.domain.tradeLog.entity.TradeType.CHARGE)&#10;                .collect(Collectors.toList());&#10;    }&#10;    @Transactional(readOnly = true)&#10;    public int count() {&#10;        return (int) tradeLogRepository.count();&#10;    }&#10;&#10;    @Transactional&#10;    public void saveAll(List&lt;TradeLog&gt; tradeLogs) {&#10;        tradeLogRepository.saveAll(tradeLogs);&#10;    }&#10;    @Transactional&#10;    public TradeLogDto save(TradeLogDto tradeLogDto) {&#10;        Wallet wallet = walletRepository.findById((long) tradeLogDto.walletId())&#10;                .orElseThrow(() -&gt; new EntityNotFoundException(&quot;Wallet not found&quot;));&#10;&#10;        Coin coin = coinRepository.findById((long) tradeLogDto.coinId())&#10;                .orElseThrow(() -&gt; new EntityNotFoundException(&quot;Coin not found&quot;));&#10;&#10;        TradeLog tradeLog = TradeLogDto.toEntity(tradeLogDto, wallet, coin);&#10;        TradeLog savedTradeLog = tradeLogRepository.save(tradeLog);&#10;&#10;        return TradeLogDto.from(savedTradeLog);&#10;    }&#10;&#10;    @Transactional&#10;    public TradeLog save(TradeLog tradeLog) {&#10;&#10;        return tradeLogRepository.save(tradeLog);&#10;    }&#10;    @Transactional&#10;    public void createMockLogs() {&#10;        if (count() &gt; 0) return;&#10;        coinRepository.deleteAll();&#10;        Wallet wallet = walletRepository.findById(1L)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;wallet not found&quot;));&#10;        Coin coin1 = coinRepository.save(&#10;                Coin.builder()&#10;                        .koreanName(&quot;비트코인1&quot;)&#10;                        .englishName(&quot;Bitcoin1&quot;)&#10;                        .symbol(&quot;BTC1&quot;)&#10;                        .build()&#10;        );&#10;&#10;        Coin coin2 = coinRepository.save(&#10;                Coin.builder()&#10;                        .koreanName(&quot;이더리움1&quot;)&#10;                        .englishName(&quot;Ethereum1&quot;)&#10;                        .symbol(&quot;ETH1&quot;)&#10;                        .build()&#10;        );&#10;&#10;        Coin coin3 = coinRepository.save(&#10;                Coin.builder()&#10;                        .koreanName(&quot;리플1&quot;)&#10;                        .englishName(&quot;Ripple1&quot;)&#10;                        .symbol(&quot;XRP1&quot;)&#10;                        .build()&#10;        );&#10;        List&lt;TradeLog&gt; logs = new ArrayList&lt;&gt;();&#10;        LocalDateTime baseDate = LocalDateTime.of(2025, 7, 25, 0, 0);&#10;&#10;        for (int i = 1; i &lt;= 15; i++) {&#10;            Coin coin = (i &lt;= 9) ? coin1 : coin2;&#10;            TradeType type = (i % 3 == 0) ? TradeType.SELL : TradeType.BUY;&#10;&#10;            TradeLog log = TradeLog.builder()&#10;                    .wallet(wallet)&#10;                    .coin(coin)&#10;                    .type(type)&#10;                    .quantity(BigDecimal.valueOf(1))&#10;                    .price(BigDecimal.valueOf(100_000_000L + (i * 10_000_000L)))&#10;                    .build();&#10;            log.setCreatedAt(baseDate.plusDays((i - 1) * 7));&#10;            logs.add(log);&#10;        }&#10;&#10;        saveAll(logs);&#10;&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.back.back9.domain.tradeLog.service;&#10;&#10;import com.back.back9.domain.coin.entity.Coin;&#10;import com.back.back9.domain.coin.repository.CoinRepository;&#10;import com.back.back9.domain.tradeLog.dto.TradeLogDto;&#10;import com.back.back9.domain.tradeLog.entity.TradeLog;&#10;import com.back.back9.domain.tradeLog.entity.TradeType;&#10;import com.back.back9.domain.tradeLog.repository.TradeLogRepository;&#10;import com.back.back9.domain.wallet.entity.Wallet;&#10;import com.back.back9.domain.wallet.repository.WalletRepository;&#10;import jakarta.persistence.EntityNotFoundException;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.stream.Collectors;&#10;&#10;&#10;@Service&#10;public class TradeLogService {&#10;    private final TradeLogRepository tradeLogRepository;&#10;    private final WalletRepository walletRepository;&#10;    private final CoinRepository coinRepository;&#10;&#10;    public TradeLogService(TradeLogRepository tradeLogRepository,&#10;                           WalletRepository walletRepository,&#10;                           CoinRepository coinRepository) {&#10;        this.tradeLogRepository = tradeLogRepository;&#10;        this.walletRepository = walletRepository;&#10;        this.coinRepository = coinRepository;&#10;&#10;    }&#10;    @Transactional(readOnly = true)&#10;    public List&lt;TradeLog&gt; findAll() {&#10;        return tradeLogRepository.findAll();&#10;    }&#10;    @Transactional(readOnly = true)&#10;    public Optional&lt;TradeLog&gt; findLatest() {&#10;        return tradeLogRepository.findFirstByOrderByIdDesc();&#10;&#10;    }&#10;    @Transactional(readOnly = true)&#10;    public List&lt;TradeLogDto&gt; findByWalletId(Long walletId) {&#10;        return tradeLogRepository.findByWalletId(walletId)&#10;                .stream()&#10;                .map(TradeLogDto::from)&#10;                .collect(Collectors.toList());&#10;    }&#10;    @Transactional(readOnly = true)&#10;    public List&lt;TradeLogDto&gt; findByFilter(Long walletId, TradeType type, Integer coinId, LocalDateTime startDate, LocalDateTime endDate, Pageable pageable) {&#10;        Page&lt;TradeLog&gt; logs = tradeLogRepository.findByWalletIdFilter(walletId, type, coinId, startDate, endDate, pageable);&#10;&#10;        return logs.stream()&#10;                .map(TradeLogDto::from)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    // 새로운 메서드: userId로 거래 내역 조회&#10;    @Transactional(readOnly = true)&#10;    public List&lt;TradeLogDto&gt; findByUserIdAndFilter(Long userId, TradeType type, Integer coinId, LocalDateTime startDate, LocalDateTime endDate, Pageable pageable) {&#10;        // userId로 지갑 찾기&#10;        Wallet wallet = walletRepository.findByUserId(userId)&#10;                .orElseThrow(() -&gt; new EntityNotFoundException(&quot;사용자 ID &quot; + userId + &quot;의 지갑을 찾을 수 없습니다.&quot;));&#10;&#10;        // 지갑 ID를 Long 타입으로 직접 사용&#10;        Page&lt;TradeLog&gt; logs = tradeLogRepository.findByWalletIdFilter(wallet.getId(), type, coinId, startDate, endDate, pageable);&#10;&#10;        return logs.stream()&#10;                .map(TradeLogDto::from)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public List&lt;TradeLogDto&gt; findByWalletIdAndTypeCharge(Long walletId) {&#10;        return findByWalletId(walletId).stream()&#10;                .filter(log -&gt; log.tradeType() == com.back.back9.domain.tradeLog.entity.TradeType.CHARGE)&#10;                .collect(Collectors.toList());&#10;    }&#10;    @Transactional(readOnly = true)&#10;    public int count() {&#10;        return (int) tradeLogRepository.count();&#10;    }&#10;&#10;    @Transactional&#10;    public void saveAll(List&lt;TradeLog&gt; tradeLogs) {&#10;        tradeLogRepository.saveAll(tradeLogs);&#10;    }&#10;    @Transactional&#10;    public TradeLogDto save(TradeLogDto tradeLogDto) {&#10;        Wallet wallet = walletRepository.findById((long) tradeLogDto.walletId())&#10;                .orElseThrow(() -&gt; new EntityNotFoundException(&quot;Wallet not found&quot;));&#10;&#10;        Coin coin = coinRepository.findById((long) tradeLogDto.coinId())&#10;                .orElseThrow(() -&gt; new EntityNotFoundException(&quot;Coin not found&quot;));&#10;&#10;        TradeLog tradeLog = TradeLogDto.toEntity(tradeLogDto, wallet, coin);&#10;        TradeLog savedTradeLog = tradeLogRepository.save(tradeLog);&#10;&#10;        return TradeLogDto.from(savedTradeLog);&#10;    }&#10;&#10;    @Transactional&#10;    public TradeLog save(TradeLog tradeLog) {&#10;&#10;        return tradeLogRepository.save(tradeLog);&#10;    }&#10;    @Transactional&#10;    public void createMockLogs() {&#10;        if (count() &gt; 0) return;&#10;        coinRepository.deleteAll();&#10;        Wallet wallet = walletRepository.findById(1L)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;wallet not found&quot;));&#10;        Coin coin1 = coinRepository.save(&#10;                Coin.builder()&#10;                        .koreanName(&quot;비트코인1&quot;)&#10;                        .englishName(&quot;Bitcoin1&quot;)&#10;                        .symbol(&quot;BTC1&quot;)&#10;                        .build()&#10;        );&#10;&#10;        Coin coin2 = coinRepository.save(&#10;                Coin.builder()&#10;                        .koreanName(&quot;이더리움1&quot;)&#10;                        .englishName(&quot;Ethereum1&quot;)&#10;                        .symbol(&quot;ETH1&quot;)&#10;                        .build()&#10;        );&#10;&#10;        Coin coin3 = coinRepository.save(&#10;                Coin.builder()&#10;                        .koreanName(&quot;리플1&quot;)&#10;                        .englishName(&quot;Ripple1&quot;)&#10;                        .symbol(&quot;XRP1&quot;)&#10;                        .build()&#10;        );&#10;        List&lt;TradeLog&gt; logs = new ArrayList&lt;&gt;();&#10;        LocalDateTime baseDate = LocalDateTime.of(2025, 7, 25, 0, 0);&#10;&#10;        for (int i = 1; i &lt;= 15; i++) {&#10;            Coin coin = (i &lt;= 9) ? coin1 : coin2;&#10;            TradeType type = (i % 3 == 0) ? TradeType.SELL : TradeType.BUY;&#10;&#10;            TradeLog log = TradeLog.builder()&#10;                    .wallet(wallet)&#10;                    .coin(coin)&#10;                    .type(type)&#10;                    .quantity(BigDecimal.valueOf(1))&#10;                    .price(BigDecimal.valueOf(100_000_000L + (i * 10_000_000L)))&#10;                    .build();&#10;            log.setCreatedAt(baseDate.plusDays((i - 1) * 7));&#10;            logs.add(log);&#10;        }&#10;&#10;        saveAll(logs);&#10;&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/main/java/com/back/back9/domain/wallet/service/WalletService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/com/back/back9/domain/wallet/service/WalletService.java" />
              <option name="originalContent" value="package com.back.back9.domain.wallet.service;&#10;&#10;import com.back.back9.domain.coin.entity.Coin;&#10;import com.back.back9.domain.coin.repository.CoinRepository;&#10;import com.back.back9.domain.tradeLog.entity.TradeLog;&#10;import com.back.back9.domain.tradeLog.entity.TradeType;&#10;import com.back.back9.domain.tradeLog.repository.TradeLogRepository;&#10;import com.back.back9.domain.user.entity.User;&#10;import com.back.back9.domain.user.repository.UserRepository;&#10;import com.back.back9.domain.wallet.dto.*;&#10;import com.back.back9.domain.wallet.entity.CoinAmount;&#10;import com.back.back9.domain.wallet.entity.Wallet;&#10;import com.back.back9.domain.wallet.repository.CoinAmountRepository;&#10;import com.back.back9.domain.wallet.repository.WalletRepository;&#10;import com.back.back9.global.error.ErrorCode;&#10;import com.back.back9.global.error.ErrorException;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;@Slf4j&#10;public class WalletService {&#10;&#10;    private final WalletRepository walletRepository;&#10;    private final CoinAmountRepository coinAmountRepository;&#10;    private final CoinRepository coinRepository; // 추가된 부분&#10;    private final UserRepository userRepository; // 사용자 정보 조회를 위한 리포지토리&#10;    private final TradeLogRepository tradeLogRepository;&#10;&#10;&#10;    // 사용자 지갑 생성&#10;    @Transactional&#10;    public Wallet createWallet(Long userId) {&#10;        // 이미 지갑이 존재하는지 확인&#10;        if (walletRepository.findByUserId(userId).isPresent()) {&#10;            throw new ErrorException(ErrorCode.WALLET_ALREADY_EXISTS, userId);&#10;        }&#10;&#10;        User user = userRepository.findById(userId).orElseThrow(() -&gt; new ErrorException(ErrorCode.USER_NOT_FOUND, userId));&#10;&#10;        // 새 지갑 생성&#10;        Wallet wallet = Wallet.builder()&#10;                .user(user)&#10;                .address(&quot;Wallet_address_&quot; + userId)&#10;                .balance(BigDecimal.valueOf(500000000))&#10;                .build();&#10;&#10;        walletRepository.save(wallet);&#10;&#10;        log.info(&quot;새 지갑 생성 완료 - 사용자 ID: {}, 주소: {}&quot;, userId, wallet.getAddress());&#10;&#10;        return wallet;&#10;    }&#10;&#10;    // 사용자 지갑 정보 조회 (모든 코인 수량 포함)&#10;    @Transactional&#10;    public ResponseEntity&lt;WalletResponse&gt; getUserWallet(Long userId) {&#10;        // 지갑이 없으면 자동으로 생성&#10;        Wallet wallet = walletRepository.findByUserId(userId)&#10;                .orElseGet(() -&gt; {&#10;                    log.warn(&quot;사용자 지갑이 없어 자동 생성 - 사용자 ID: {}&quot;, userId);&#10;                    return createWallet(userId);&#10;                });&#10;&#10;&#10;        List&lt;CoinAmount&gt; validCoinAmounts = wallet.getCoinAmounts()&#10;                .stream()&#10;                .filter(this::isValidCoinAmount)&#10;                .toList();&#10;&#10;        log.info(&quot;사용자 지갑 조회 완료 - 사용자 ID: {}, 전체 코인: {}개, 유효한 코인: {}개&quot;,&#10;                userId, wallet.getCoinAmounts().size(), validCoinAmounts.size());&#10;&#10;        WalletResponse response = WalletResponse.fromWithValidCoinAmounts(wallet, validCoinAmounts);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;    // 지갑 잔액 충전&#10;    @Transactional&#10;    public ResponseEntity&lt;WalletResponse&gt; chargeWallet(Long userId, ChargePointsRequest request) {&#10;        // 지갑 조회&#10;        Wallet wallet = walletRepository.findByUserId(userId)&#10;                .orElseThrow(() -&gt; new ErrorException(ErrorCode.WALLET_NOT_FOUND, userId));&#10;&#10;        // 충전 금액 유효성 검사&#10;        if(request.getAmount().compareTo(BigDecimal.ZERO) &lt;= 0) {&#10;            throw new ErrorException(ErrorCode.INVALID_REQUEST, &quot;충전 금액은 0보다 커야 합니다.&quot;);&#10;        }&#10;&#10;        // 지갑 잔액에 충전&#10;        wallet.charge(request.getAmount());&#10;&#10;        // 지갑 정보 저장&#10;        walletRepository.save(wallet);&#10;&#10;        // 거래 로그 저장 (충전)&#10;        TradeLog chargeLog = TradeLog.builder()&#10;                .wallet(wallet)&#10;                .type(TradeType.CHARGE)&#10;                .quantity(BigDecimal.ONE)&#10;                .price(request.getAmount())&#10;                .build();&#10;&#10;        tradeLogRepository.save(chargeLog);&#10;&#10;        log.info(&quot;지갑 잔액 충전 완료 - 사용자 ID: {}, 충전 금액: {}, 현재 잔액: {}&quot;,&#10;                userId, request.getAmount(), wallet.getBalance());&#10;&#10;        // coinAmounts는 항상 빈 리스트로 초기화되므로 null 체크 불필요&#10;        List&lt;CoinAmount&gt; validCoinAmounts = wallet.getCoinAmounts()&#10;                .stream()&#10;                .filter(this::isValidCoinAmount)&#10;                .toList();&#10;&#10;        WalletResponse response = WalletResponse.fromWithValidCoinAmounts(wallet, validCoinAmounts);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;    // 지갑의 코인 보유 정보를 조회하여 평가 수익률 계산에 사용&#10;    public List&lt;CoinHoldingInfo&gt; getCoinHoldingsForProfitCalculation(Long walletId) {&#10;        // 지갑 ID로 지갑 조회&#10;        Wallet wallet = walletRepository.findById(walletId)&#10;                .orElseThrow(() -&gt; new ErrorException(ErrorCode.WALLET_NOT_FOUND, walletId));&#10;&#10;        // coinAmounts는 항상 빈 리스트로 초기화되므로 null 체크 불필요&#10;        List&lt;CoinAmount&gt; validCoinAmounts = wallet.getCoinAmounts()&#10;                .stream()&#10;                .filter(this::isValidCoinAmount)&#10;                .toList();&#10;&#10;        // CoinAmount를 CoinHoldingInfo로 변환&#10;        List&lt;CoinHoldingInfo&gt; coinHoldings = validCoinAmounts.stream()&#10;                .map(CoinHoldingInfo::from)  // 시세 정보는 Exchange에서 별도 제공&#10;                .toList();&#10;&#10;        log.info(&quot;지갑 ID {}의 코인 보유 정보 조회 완료 - 보유 코인 종류: {}개&quot;,&#10;                walletId, coinHoldings.size());&#10;&#10;        return coinHoldings;&#10;    }&#10;&#10;    // 사용자 ID로 지갑의 코인 보유 정보를 조회하여 평가 수익률 계산에 사용&#10;    public List&lt;CoinHoldingInfo&gt; getCoinHoldingsByUserId(Long userId) {&#10;        // 사용자 ID로 지갑 조회&#10;        Wallet wallet = walletRepository.findByUserId(userId)&#10;                .orElseThrow(() -&gt; new ErrorException(ErrorCode.WALLET_NOT_FOUND, userId));&#10;&#10;        return getCoinHoldingsForProfitCalculation(wallet.getId());&#10;    }&#10;&#10;    // CoinAmount 유효성 검사&#10;    private boolean isValidCoinAmount(CoinAmount coinAmount) {&#10;        if (coinAmount == null) {&#10;            log.warn(&quot;CoinAmount가 null입니다.&quot;);&#10;            throw new ErrorException(ErrorCode.INVALID_COIN_DATA, &quot;null&quot;);&#10;        }&#10;&#10;        if (coinAmount.getCoin() == null) {&#10;            log.warn(&quot;CoinAmount ID {}의 Coin 정보가 null입니다.&quot;, coinAmount.getId());&#10;            throw new ErrorException(ErrorCode.INVALID_COIN_DATA, coinAmount.getId());&#10;        }&#10;&#10;        if (coinAmount.getCoin().getId() &lt;= 0) {&#10;            log.warn(&quot;유효하지 않은 코인 ID: {}&quot;, coinAmount.getCoin().getId());&#10;            throw new ErrorException(ErrorCode.INVALID_COIN_DATA, coinAmount.getId());&#10;        }&#10;&#10;        if (coinAmount.getCoin().getSymbol() == null || coinAmount.getCoin().getSymbol().trim().isEmpty()) {&#10;            log.warn(&quot;코인 ID {}의 심볼이 비어있습니다.&quot;, coinAmount.getCoin().getId());&#10;            throw new ErrorException(ErrorCode.INVALID_COIN_DATA, coinAmount.getId());&#10;        }&#10;&#10;        if (coinAmount.getTotalAmount() == null) {&#10;            log.warn(&quot;CoinAmount ID {}의 수량 정보가 null입니다.&quot;, coinAmount.getId());&#10;            throw new ErrorException(ErrorCode.INVALID_COIN_DATA, coinAmount.getId());&#10;        }&#10;&#10;        if (coinAmount.getQuantity() == null) {&#10;            log.warn(&quot;CoinAmount ID {}의 코인 개수 정보가 null입니다.&quot;, coinAmount.getId());&#10;            throw new ErrorException(ErrorCode.INVALID_COIN_DATA, coinAmount.getId());&#10;        }&#10;&#10;        if (coinAmount.getTotalAmount().compareTo(BigDecimal.ZERO) &lt; 0) {&#10;            log.warn(&quot;CoinAmount ID {}의 총 금액이 음수입니다: {}&quot;, coinAmount.getId(), coinAmount.getTotalAmount());&#10;            return false;&#10;        }&#10;&#10;        if (coinAmount.getQuantity().compareTo(BigDecimal.ZERO) &lt; 0) {&#10;            log.warn(&quot;CoinAmount ID {}의 코인 개수가 음수입니다: {}&quot;, coinAmount.getId(), coinAmount.getQuantity());&#10;            throw new ErrorException(ErrorCode.INVALID_COIN_DATA, coinAmount.getId());&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    // 범용 거래 처리 메서드 (구매/판매)&#10;    @Transactional&#10;    public ResponseEntity&lt;WalletResponse&gt; processTransaction(Long userId, BuyCoinRequest request, TransactionType transactionType) {&#10;        // ID로 코인과 지갑 조회&#10;        Coin coin = coinRepository.findById(request.coinId())&#10;                .orElseThrow(() -&gt; new ErrorException(ErrorCode.COIN_NOT_FOUND, request.coinId()));&#10;&#10;        Wallet wallet = walletRepository.findById(request.walletId())&#10;                .orElseThrow(() -&gt; new ErrorException(ErrorCode.WALLET_NOT_FOUND, request.walletId()));&#10;&#10;        User user = userRepository.findById(userId)&#10;                .orElseThrow(() -&gt; new ErrorException(ErrorCode.USER_NOT_FOUND, userId));&#10;&#10;&#10;&#10;&#10;        // 지갑의 소유자가 요청한 사용자와 일치하는지 확인&#10;        if (!wallet.getUser().getId().equals(userId)) {&#10;            throw new ErrorException(ErrorCode.UNAUTHORIZED, &quot;지갑에 대한 접근 권한이 없습니다.&quot;);&#10;        }&#10;&#10;        // 거래 금액 유효성 검사&#10;        if(request.amount().compareTo(BigDecimal.ZERO) &lt;= 0) {&#10;            throw new ErrorException(ErrorCode.INVALID_REQUEST, &quot;거래 금액은 0보다 커야 합니다.&quot;);&#10;        }&#10;&#10;        // 거래 타입에 따른 지갑 잔액 처리&#10;        if (transactionType == TransactionType.BUY) {&#10;            // 구매: 잔액 부족 검사 후 차감&#10;            if(wallet.getBalance().compareTo(request.amount()) &lt; 0) {&#10;                throw new ErrorException(ErrorCode.INSUFFICIENT_BALANCE, &quot;잔액이 부족합니다.&quot;);&#10;            }&#10;            wallet.deduct(request.amount());&#10;        } else if (transactionType == TransactionType.SELL) {&#10;            // 판매: 지갑 잔액 증가&#10;            wallet.charge(request.amount());&#10;        }&#10;&#10;        // 지갑 정보 저장&#10;        walletRepository.save(wallet);&#10;&#10;        log.info(&quot;{} 완료 - 사용자 ID: {}, 코인 ID: {}, 거래 금액: {}, 현재 잔액: {}&quot;,&#10;                transactionType == TransactionType.BUY ? &quot;구매&quot; : &quot;판매&quot;,&#10;                userId, coin.getId(), request.amount(), wallet.getBalance());&#10;&#10;        // coinAmounts는 항상 빈 리스트로 초기화되므로 null 체크 불필요&#10;        List&lt;CoinAmount&gt; validCoinAmounts = wallet.getCoinAmounts()&#10;                .stream()&#10;                .filter(this::isValidCoinAmount)&#10;                .filter(ca -&gt; ca.getCoin().getId().equals(coin.getId()))&#10;                .toList();&#10;&#10;        // 해당 코인의 CoinAmount가 없다면 빈 CoinAmount 생성 (구매 시에만)&#10;        if (validCoinAmounts.isEmpty() &amp;&amp; transactionType == TransactionType.BUY) {&#10;            log.info(&quot;사용자 ID {}의 지갑에 코인 ID {}가 없습니다. 새로운 CoinAmount 생성&quot;,&#10;                    userId, coin.getId());&#10;            CoinAmount newCoinAmount = CoinAmount.builder()&#10;                    .coin(coin)&#10;                    .wallet(wallet)&#10;                    .quantity(BigDecimal.ZERO)&#10;                    .totalAmount(BigDecimal.ZERO)&#10;                    .build();&#10;            coinAmountRepository.save(newCoinAmount);&#10;&#10;            // wallet의 coinAmounts 리스트에 새로 생성한 CoinAmount 추가&#10;            wallet.getCoinAmounts().add(newCoinAmount);&#10;            validCoinAmounts = List.of(newCoinAmount);&#10;        } else if (validCoinAmounts.isEmpty() &amp;&amp; transactionType == TransactionType.SELL) {&#10;            // 판매 시 해당 코인이 없으면 에러&#10;            throw new ErrorException(ErrorCode.INSUFFICIENT_BALANCE, &quot;판매할 코인이 없습니다.&quot;);&#10;        }&#10;&#10;        // 거래 타입에 따른 CoinAmount 업데이트&#10;        CoinAmount targetCoinAmount = validCoinAmounts.get(0);&#10;&#10;        if (transactionType == TransactionType.BUY) {&#10;            targetCoinAmount.addQuantityAndAmount(request.quantity(), request.amount());&#10;        } else if (transactionType == TransactionType.SELL) {&#10;            // 판매 시 보유 수량 검사&#10;            if (targetCoinAmount.getQuantity().compareTo(request.quantity()) &lt; 0) {&#10;                throw new ErrorException(ErrorCode.INSUFFICIENT_BALANCE, &quot;보유 수량이 부족합니다.&quot;);&#10;            }&#10;            targetCoinAmount.subtractQuantityAndAmount(request.quantity(), request.amount());&#10;        }&#10;&#10;        // CoinAmount 저장 및 wallet의 coinAmounts 리스트 동기화&#10;        coinAmountRepository.save(targetCoinAmount);&#10;&#10;        // wallet의 기존 리스트에서 해당 CoinAmount를 찾아서 업데이트&#10;        List&lt;CoinAmount&gt; walletCoinAmounts = wallet.getCoinAmounts();&#10;        for (int i = 0; i &lt; walletCoinAmounts.size(); i++) {&#10;            if (walletCoinAmounts.get(i).getId().equals(targetCoinAmount.getId())) {&#10;                walletCoinAmounts.set(i, targetCoinAmount);&#10;                break;&#10;            }&#10;        }&#10;&#10;        WalletResponse response = WalletResponse.fromWithValidCoinAmounts(wallet,&#10;                wallet.getCoinAmounts().stream().filter(this::isValidCoinAmount).toList());&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;    // 구매 편의 메서드&#10;    public ResponseEntity&lt;WalletResponse&gt; purchaseItem(Long userId, BuyCoinRequest request) {&#10;        return processTransaction(userId, request, TransactionType.BUY);&#10;    }&#10;&#10;    // 판매 편의 메서드&#10;    public ResponseEntity&lt;WalletResponse&gt; sellItem(Long userId, BuyCoinRequest request) {&#10;        return processTransaction(userId, request, TransactionType.SELL);&#10;    }&#10;&#10;    public void deleteWalletByUserId(Long userId) {&#10;        walletRepository.findByUserId(userId)&#10;                .ifPresent(walletRepository::delete);&#10;    }&#10;    public boolean existsByUserId(Long userId) {&#10;        return walletRepository.existsByUserId(userId);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.back.back9.domain.wallet.service;&#10;&#10;import com.back.back9.domain.coin.entity.Coin;&#10;import com.back.back9.domain.coin.repository.CoinRepository;&#10;import com.back.back9.domain.tradeLog.entity.TradeLog;&#10;import com.back.back9.domain.tradeLog.entity.TradeType;&#10;import com.back.back9.domain.tradeLog.repository.TradeLogRepository;&#10;import com.back.back9.domain.user.entity.User;&#10;import com.back.back9.domain.user.repository.UserRepository;&#10;import com.back.back9.domain.wallet.dto.*;&#10;import com.back.back9.domain.wallet.entity.CoinAmount;&#10;import com.back.back9.domain.wallet.entity.Wallet;&#10;import com.back.back9.domain.wallet.repository.CoinAmountRepository;&#10;import com.back.back9.domain.wallet.repository.WalletRepository;&#10;import com.back.back9.global.error.ErrorCode;&#10;import com.back.back9.global.error.ErrorException;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.List;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;@Slf4j&#10;public class WalletService {&#10;&#10;    private final WalletRepository walletRepository;&#10;    private final CoinAmountRepository coinAmountRepository;&#10;    private final CoinRepository coinRepository; // 추가된 부분&#10;    private final UserRepository userRepository; // 사용자 정보 조회를 위한 리포지토리&#10;    private final TradeLogRepository tradeLogRepository;&#10;&#10;&#10;    // 사용자 지갑 생성&#10;    @Transactional&#10;    public Wallet createWallet(Long userId) {&#10;        // 이미 지갑이 존재하는지 확인&#10;        if (walletRepository.findByUserId(userId).isPresent()) {&#10;            throw new ErrorException(ErrorCode.WALLET_ALREADY_EXISTS, userId);&#10;        }&#10;&#10;        User user = userRepository.findById(userId).orElseThrow(() -&gt; new ErrorException(ErrorCode.USER_NOT_FOUND, userId));&#10;&#10;        // 새 지갑 생성&#10;        Wallet wallet = Wallet.builder()&#10;                .user(user)&#10;                .address(&quot;Wallet_address_&quot; + userId)&#10;                .balance(BigDecimal.valueOf(500000000))&#10;                .build();&#10;&#10;        walletRepository.save(wallet);&#10;&#10;        log.info(&quot;새 지갑 생성 완료 - 사용자 ID: {}, 주소: {}&quot;, userId, wallet.getAddress());&#10;&#10;        return wallet;&#10;    }&#10;&#10;    // 사용자 지갑 정보 조회 (모든 코인 수량 포함)&#10;    @Transactional(readOnly = true)&#10;    public ResponseEntity&lt;WalletResponse&gt; getUserWallet(Long userId) {&#10;        Wallet wallet = walletRepository.findByUserId(userId)&#10;                .orElseThrow(() -&gt; new ErrorException(ErrorCode.WALLET_NOT_FOUND, userId));&#10;&#10;&#10;        List&lt;CoinAmount&gt; validCoinAmounts = wallet.getCoinAmounts()&#10;                .stream()&#10;                .filter(this::isValidCoinAmount)&#10;                .toList();&#10;&#10;        log.info(&quot;사용자 지갑 조회 완료 - 사용자 ID: {}, 전체 코인: {}개, 유효한 코인: {}개&quot;,&#10;                userId, wallet.getCoinAmounts().size(), validCoinAmounts.size());&#10;&#10;        WalletResponse response = WalletResponse.fromWithValidCoinAmounts(wallet, validCoinAmounts);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;    // 지갑 잔액 충전&#10;    @Transactional&#10;    public ResponseEntity&lt;WalletResponse&gt; chargeWallet(Long userId, ChargePointsRequest request) {&#10;        // 지갑 조회&#10;        Wallet wallet = walletRepository.findByUserId(userId)&#10;                .orElseThrow(() -&gt; new ErrorException(ErrorCode.WALLET_NOT_FOUND, userId));&#10;&#10;        // 충전 금액 유효성 검사&#10;        if(request.getAmount().compareTo(BigDecimal.ZERO) &lt;= 0) {&#10;            throw new ErrorException(ErrorCode.INVALID_REQUEST, &quot;충전 금액은 0보다 커야 합니다.&quot;);&#10;        }&#10;&#10;        // 지갑 잔액에 충전&#10;        wallet.charge(request.getAmount());&#10;&#10;        // 지갑 정보 저장&#10;        walletRepository.save(wallet);&#10;&#10;        // 거래 로그 저장 (충전)&#10;        TradeLog chargeLog = TradeLog.builder()&#10;                .wallet(wallet)&#10;                .type(TradeType.CHARGE)&#10;                .quantity(BigDecimal.ONE)&#10;                .price(request.getAmount())&#10;                .build();&#10;&#10;        tradeLogRepository.save(chargeLog);&#10;&#10;        log.info(&quot;지갑 잔액 충전 완료 - 사용자 ID: {}, 충전 금액: {}, 현재 잔액: {}&quot;,&#10;                userId, request.getAmount(), wallet.getBalance());&#10;&#10;        // coinAmounts는 항상 빈 리스트로 초기화되므로 null 체크 불필요&#10;        List&lt;CoinAmount&gt; validCoinAmounts = wallet.getCoinAmounts()&#10;                .stream()&#10;                .filter(this::isValidCoinAmount)&#10;                .toList();&#10;&#10;        WalletResponse response = WalletResponse.fromWithValidCoinAmounts(wallet, validCoinAmounts);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;    // 지갑의 코인 보유 정보를 조회하여 평가 수익률 계산에 사용&#10;    public List&lt;CoinHoldingInfo&gt; getCoinHoldingsForProfitCalculation(Long walletId) {&#10;        // 지갑 ID로 지갑 조회&#10;        Wallet wallet = walletRepository.findById(walletId)&#10;                .orElseThrow(() -&gt; new ErrorException(ErrorCode.WALLET_NOT_FOUND, walletId));&#10;&#10;        // coinAmounts는 항상 빈 리스트로 초기화되므로 null 체크 불필요&#10;        List&lt;CoinAmount&gt; validCoinAmounts = wallet.getCoinAmounts()&#10;                .stream()&#10;                .filter(this::isValidCoinAmount)&#10;                .toList();&#10;&#10;        // CoinAmount를 CoinHoldingInfo로 변환&#10;        List&lt;CoinHoldingInfo&gt; coinHoldings = validCoinAmounts.stream()&#10;                .map(CoinHoldingInfo::from)  // 시세 정보는 Exchange에서 별도 제공&#10;                .toList();&#10;&#10;        log.info(&quot;지갑 ID {}의 코인 보유 정보 조회 완료 - 보유 코인 종류: {}개&quot;,&#10;                walletId, coinHoldings.size());&#10;&#10;        return coinHoldings;&#10;    }&#10;&#10;    // 사용자 ID로 지갑의 코인 보유 정보를 조회하여 평가 수익률 계산에 사용&#10;    public List&lt;CoinHoldingInfo&gt; getCoinHoldingsByUserId(Long userId) {&#10;        // 사용자 ID로 지갑 조회&#10;        Wallet wallet = walletRepository.findByUserId(userId)&#10;                .orElseThrow(() -&gt; new ErrorException(ErrorCode.WALLET_NOT_FOUND, userId));&#10;&#10;        return getCoinHoldingsForProfitCalculation(wallet.getId());&#10;    }&#10;&#10;    // CoinAmount 유효성 검사&#10;    private boolean isValidCoinAmount(CoinAmount coinAmount) {&#10;        if (coinAmount == null) {&#10;            log.warn(&quot;CoinAmount가 null입니다.&quot;);&#10;            throw new ErrorException(ErrorCode.INVALID_COIN_DATA, &quot;null&quot;);&#10;        }&#10;&#10;        if (coinAmount.getCoin() == null) {&#10;            log.warn(&quot;CoinAmount ID {}의 Coin 정보가 null입니다.&quot;, coinAmount.getId());&#10;            throw new ErrorException(ErrorCode.INVALID_COIN_DATA, coinAmount.getId());&#10;        }&#10;&#10;        if (coinAmount.getCoin().getId() &lt;= 0) {&#10;            log.warn(&quot;유효하지 않은 코인 ID: {}&quot;, coinAmount.getCoin().getId());&#10;            throw new ErrorException(ErrorCode.INVALID_COIN_DATA, coinAmount.getId());&#10;        }&#10;&#10;        if (coinAmount.getCoin().getSymbol() == null || coinAmount.getCoin().getSymbol().trim().isEmpty()) {&#10;            log.warn(&quot;코인 ID {}의 심볼이 비어있습니다.&quot;, coinAmount.getCoin().getId());&#10;            throw new ErrorException(ErrorCode.INVALID_COIN_DATA, coinAmount.getId());&#10;        }&#10;&#10;        if (coinAmount.getTotalAmount() == null) {&#10;            log.warn(&quot;CoinAmount ID {}의 수량 정보가 null입니다.&quot;, coinAmount.getId());&#10;            throw new ErrorException(ErrorCode.INVALID_COIN_DATA, coinAmount.getId());&#10;        }&#10;&#10;        if (coinAmount.getQuantity() == null) {&#10;            log.warn(&quot;CoinAmount ID {}의 코인 개수 정보가 null입니다.&quot;, coinAmount.getId());&#10;            throw new ErrorException(ErrorCode.INVALID_COIN_DATA, coinAmount.getId());&#10;        }&#10;&#10;        if (coinAmount.getTotalAmount().compareTo(BigDecimal.ZERO) &lt; 0) {&#10;            log.warn(&quot;CoinAmount ID {}의 총 금액이 음수입니다: {}&quot;, coinAmount.getId(), coinAmount.getTotalAmount());&#10;            return false;&#10;        }&#10;&#10;        if (coinAmount.getQuantity().compareTo(BigDecimal.ZERO) &lt; 0) {&#10;            log.warn(&quot;CoinAmount ID {}의 코인 개수가 음수입니다: {}&quot;, coinAmount.getId(), coinAmount.getQuantity());&#10;            throw new ErrorException(ErrorCode.INVALID_COIN_DATA, coinAmount.getId());&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    // 범용 거래 처리 메서드 (구매/판매)&#10;    @Transactional&#10;    public ResponseEntity&lt;WalletResponse&gt; processTransaction(Long userId, BuyCoinRequest request, TransactionType transactionType) {&#10;        // ID로 코인과 지갑 조회&#10;        Coin coin = coinRepository.findById(request.coinId())&#10;                .orElseThrow(() -&gt; new ErrorException(ErrorCode.COIN_NOT_FOUND, request.coinId()));&#10;&#10;        Wallet wallet = walletRepository.findById(request.walletId())&#10;                .orElseThrow(() -&gt; new ErrorException(ErrorCode.WALLET_NOT_FOUND, request.walletId()));&#10;&#10;        User user = userRepository.findById(userId)&#10;                .orElseThrow(() -&gt; new ErrorException(ErrorCode.USER_NOT_FOUND, userId));&#10;&#10;&#10;&#10;&#10;        // 지갑의 소유자가 요청한 사용자와 일치하는지 확인&#10;        if (!wallet.getUser().getId().equals(userId)) {&#10;            throw new ErrorException(ErrorCode.UNAUTHORIZED, &quot;지갑에 대한 접근 권한이 없습니다.&quot;);&#10;        }&#10;&#10;        // 거래 금액 유효성 검사&#10;        if(request.amount().compareTo(BigDecimal.ZERO) &lt;= 0) {&#10;            throw new ErrorException(ErrorCode.INVALID_REQUEST, &quot;거래 금액은 0보다 커야 합니다.&quot;);&#10;        }&#10;&#10;        // 거래 타입에 따른 지갑 잔액 처리&#10;        if (transactionType == TransactionType.BUY) {&#10;            // 구매: 잔액 부족 검사 후 차감&#10;            if(wallet.getBalance().compareTo(request.amount()) &lt; 0) {&#10;                throw new ErrorException(ErrorCode.INSUFFICIENT_BALANCE, &quot;잔액이 부족합니다.&quot;);&#10;            }&#10;            wallet.deduct(request.amount());&#10;        } else if (transactionType == TransactionType.SELL) {&#10;            // 판매: 지갑 잔액 증가&#10;            wallet.charge(request.amount());&#10;        }&#10;&#10;        // 지갑 정보 저장&#10;        walletRepository.save(wallet);&#10;&#10;        log.info(&quot;{} 완료 - 사용자 ID: {}, 코인 ID: {}, 거래 금액: {}, 현재 잔액: {}&quot;,&#10;                transactionType == TransactionType.BUY ? &quot;구매&quot; : &quot;판매&quot;,&#10;                userId, coin.getId(), request.amount(), wallet.getBalance());&#10;&#10;        // coinAmounts는 항상 빈 리스트로 초기화되므로 null 체크 불필요&#10;        List&lt;CoinAmount&gt; validCoinAmounts = wallet.getCoinAmounts()&#10;                .stream()&#10;                .filter(this::isValidCoinAmount)&#10;                .filter(ca -&gt; ca.getCoin().getId().equals(coin.getId()))&#10;                .toList();&#10;&#10;        // 해당 코인의 CoinAmount가 없다면 빈 CoinAmount 생성 (구매 시에만)&#10;        if (validCoinAmounts.isEmpty() &amp;&amp; transactionType == TransactionType.BUY) {&#10;            log.info(&quot;사용자 ID {}의 지갑에 코인 ID {}가 없습니다. 새로운 CoinAmount 생성&quot;,&#10;                    userId, coin.getId());&#10;            CoinAmount newCoinAmount = CoinAmount.builder()&#10;                    .coin(coin)&#10;                    .wallet(wallet)&#10;                    .quantity(BigDecimal.ZERO)&#10;                    .totalAmount(BigDecimal.ZERO)&#10;                    .build();&#10;            coinAmountRepository.save(newCoinAmount);&#10;&#10;            // wallet의 coinAmounts 리스트에 새로 생성한 CoinAmount 추가&#10;            wallet.getCoinAmounts().add(newCoinAmount);&#10;            validCoinAmounts = List.of(newCoinAmount);&#10;        } else if (validCoinAmounts.isEmpty() &amp;&amp; transactionType == TransactionType.SELL) {&#10;            // 판매 시 해당 코인이 없으면 에러&#10;            throw new ErrorException(ErrorCode.INSUFFICIENT_BALANCE, &quot;판매할 코인이 없습니다.&quot;);&#10;        }&#10;&#10;        // 거래 타입에 따른 CoinAmount 업데이트&#10;        CoinAmount targetCoinAmount = validCoinAmounts.get(0);&#10;&#10;        if (transactionType == TransactionType.BUY) {&#10;            targetCoinAmount.addQuantityAndAmount(request.quantity(), request.amount());&#10;        } else if (transactionType == TransactionType.SELL) {&#10;            // 판매 시 보유 수량 검사&#10;            if (targetCoinAmount.getQuantity().compareTo(request.quantity()) &lt; 0) {&#10;                throw new ErrorException(ErrorCode.INSUFFICIENT_BALANCE, &quot;보유 수량이 부족합니다.&quot;);&#10;            }&#10;            targetCoinAmount.subtractQuantityAndAmount(request.quantity(), request.amount());&#10;        }&#10;&#10;        // CoinAmount 저장 및 wallet의 coinAmounts 리스트 동기화&#10;        coinAmountRepository.save(targetCoinAmount);&#10;&#10;        // wallet의 기존 리스트에서 해당 CoinAmount를 찾아서 업데이트&#10;        List&lt;CoinAmount&gt; walletCoinAmounts = wallet.getCoinAmounts();&#10;        for (int i = 0; i &lt; walletCoinAmounts.size(); i++) {&#10;            if (walletCoinAmounts.get(i).getId().equals(targetCoinAmount.getId())) {&#10;                walletCoinAmounts.set(i, targetCoinAmount);&#10;                break;&#10;            }&#10;        }&#10;&#10;        WalletResponse response = WalletResponse.fromWithValidCoinAmounts(wallet,&#10;                wallet.getCoinAmounts().stream().filter(this::isValidCoinAmount).toList());&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;    // 구매 편의 메서드&#10;    public ResponseEntity&lt;WalletResponse&gt; purchaseItem(Long userId, BuyCoinRequest request) {&#10;        return processTransaction(userId, request, TransactionType.BUY);&#10;    }&#10;&#10;    // 판매 편의 메서드&#10;    public ResponseEntity&lt;WalletResponse&gt; sellItem(Long userId, BuyCoinRequest request) {&#10;        return processTransaction(userId, request, TransactionType.SELL);&#10;    }&#10;&#10;    public void deleteWalletByUserId(Long userId) {&#10;        walletRepository.findByUserId(userId)&#10;                .ifPresent(walletRepository::delete);&#10;    }&#10;    public boolean existsByUserId(Long userId) {&#10;        return walletRepository.existsByUserId(userId);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/main/resources/application-dev.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/resources/application-dev.yml" />
              <option name="originalContent" value="spring:&#10;  datasource:&#10;    url: jdbc:h2:./db_dev;MODE=MySQL&#10;    username: sa&#10;    password:&#10;    driver-class-name: org.h2.Driver&#10;    hikari:&#10;      auto-commit: false&#10;&#10;  data:&#10;    redis:&#10;      host: ${REDIS_HOST:localhost}&#10;      port: ${REDIS_PORT:6379}&#10;      password: ${REDIS_PASSWORD:}&#10;&#10;  jpa:&#10;    show-sql: true&#10;    hibernate:&#10;      ddl-auto: update&#10;&#10;  security:&#10;    oauth2:&#10;      client:&#10;        registration:&#10;          google:&#10;            client-id: ${GOOGLE_CLIENT_ID:1017218402748-d5dd60n54002saejbfsma5r4tjnkrk1o.apps.googleusercontent.com}&#10;            client-secret: ${GOOGLE_CLIENT_SECRET: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}&#10;            scope: profile, email&#10;            redirect-uri: ${OAUTH2_REDIRECT_URI:http://localhost:8888/oauth2/callback/google}&#10;        provider:&#10;          google:&#10;            authorization-uri: https://accounts.google.com/o/oauth2/auth&#10;            token-uri: https://oauth2.googleapis.com/token&#10;            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo&#10;            user-name-attribute: sub&#10;&#10;logging:&#10;  level:&#10;    org.hibernate.orm.jdbc.bind: TRACE&#10;    org.hibernate.orm.jdbc.extract: TRACE&#10;    org.springframework.transaction.interceptor: TRACE&#10;    root: INFO&#10;&#10;# 로컬 개발용 OAuth2 쿠키 설정 (도메인 없음)&#10;app:&#10;  oauth2:&#10;    cookie-domain: ${OAUTH2_COOKIE_DOMAIN:}&#10;    frontend-url: ${FRONTEND_URL:http://localhost:8888}&#10;  cookie:&#10;    same-site: Lax&#10;    secure: false&#10;    domain: localhost&#10;" />
              <option name="updatedContent" value="spring:&#10;  datasource:&#10;    url: jdbc:h2:./db_dev;MODE=MySQL&#10;    username: sa&#10;    password:&#10;    driver-class-name: org.h2.Driver&#10;    hikari:&#10;      auto-commit: false&#10;&#10;  data:&#10;    redis:&#10;      host: ${REDIS_HOST:localhost}&#10;      port: ${REDIS_PORT:6379}&#10;      password: ${REDIS_PASSWORD:}&#10;&#10;  jpa:&#10;    show-sql: true&#10;    hibernate:&#10;      ddl-auto: update&#10;&#10;  security:&#10;    oauth2:&#10;      client:&#10;        registration:&#10;          google:&#10;            client-id: ${GOOGLE_CLIENT_ID:1017218402748-d5dd60n54002saejbfsma5r4tjnkrk1o.apps.googleusercontent.com}&#10;            client-secret: ${GOOGLE_CLIENT_SECRET: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}&#10;            scope: profile, email&#10;            redirect-uri: ${OAUTH2_REDIRECT_URI:http://localhost:8888/oauth2/callback/google}&#10;        provider:&#10;          google:&#10;            authorization-uri: https://accounts.google.com/o/oauth2/auth&#10;            token-uri: https://oauth2.googleapis.com/token&#10;            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo&#10;            user-name-attribute: sub&#10;&#10;logging:&#10;  level:&#10;    org.hibernate.orm.jdbc.bind: TRACE&#10;    org.hibernate.orm.jdbc.extract: TRACE&#10;    org.springframework.transaction.interceptor: TRACE&#10;    root: INFO&#10;&#10;# 로컬 개발용 OAuth2 쿠키 설정 (도메인 없음)&#10;app:&#10;  oauth2:&#10;    cookie-domain: ${OAUTH2_COOKIE_DOMAIN:}&#10;    frontend-url: ${FRONTEND_URL:http://localhost:8888}&#10;  cookie:&#10;    same-site: Lax&#10;    secure: false&#10;    domain: localhost  # 추가: 모든 localhost 포트에서 쿠키 공유" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/.env.local">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/.env.local" />
              <option name="updatedContent" value="# 개발환경에서 nginx 프록시를 통해 API 호출하도록 설정&#10;NEXT_PUBLIC_API_URL=http://localhost:8888/api" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/(protected)/admin/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/(protected)/admin/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { apiCall } from &quot;@/lib/api/client&quot;;&#10;&#10;export default function AdminPage() {&#10;    const router = useRouter();&#10;    const [isLoading, setIsLoading] = useState(true);&#10;&#10;    useEffect(() =&gt; {&#10;        const checkAdminAccess = async () =&gt; {&#10;            try {&#10;                // /me API 호출로 사용자 정보 확인&#10;                const response = await apiCall&lt;any&gt;(&quot;/v1/users/me&quot;);&#10;                const user = response?.result;&#10;&#10;                // 관리자 권한 확인 (백엔드에서 role 확인)&#10;                if (!user || user.role !== 'ADMIN') {&#10;                    router.replace(&quot;/login&quot;);&#10;                    return;&#10;                }&#10;                setIsLoading(false);&#10;            } catch (error) {&#10;                // 인증 실패 시 로그인 페이지로&#10;                router.replace(&quot;/login&quot;);&#10;            }&#10;        };&#10;&#10;        checkAdminAccess();&#10;    }, [router]);&#10;&#10;    if (isLoading) {&#10;        return &lt;div&gt;로딩 중...&lt;/div&gt;;&#10;    }&#10;&#10;    return &lt;div&gt;관리자 전용 페이지입니다.&lt;/div&gt;;&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#13;&#10;import { useEffect, useState } from &quot;react&quot;;&#13;&#10;import { useRouter } from &quot;next/navigation&quot;;&#13;&#10;import { apiCall } from &quot;@/lib/api/client&quot;;&#13;&#10;&#13;&#10;export default function AdminPage() {&#13;&#10;    const router = useRouter();&#13;&#10;    const [isLoading, setIsLoading] = useState(true);&#13;&#10;&#13;&#10;    useEffect(() =&gt; {&#13;&#10;        const checkAdminAccess = async () =&gt; {&#13;&#10;            try {&#13;&#10;                // /me API 호출로 사용자 정보 확인&#13;&#10;                const response = await apiCall&lt;{&#13;&#10;                    result: {&#13;&#10;                        id: number;&#13;&#10;                        userLoginId: string;&#13;&#10;                        username: string;&#13;&#10;                        role?: string;&#13;&#10;                    };&#13;&#10;                    message?: string;&#13;&#10;                }&gt;(&quot;/v1/users/me&quot;);&#13;&#10;                const user = response?.result;&#13;&#10;&#13;&#10;                // 관리자 권한 확인 (백엔드에서 role 확인)&#13;&#10;                if (!user || user.role !== 'ADMIN') {&#13;&#10;                    router.replace(&quot;/login&quot;);&#13;&#10;                    return;&#13;&#10;                }&#13;&#10;                setIsLoading(false);&#13;&#10;            } catch (error) {&#13;&#10;                // 인증 실패 시 로그인 페이지로&#13;&#10;                router.replace(&quot;/login&quot;);&#13;&#10;            }&#13;&#10;        };&#13;&#10;&#13;&#10;        checkAdminAccess();&#13;&#10;    }, [router]);&#13;&#10;&#13;&#10;    if (isLoading) {&#13;&#10;        return &lt;div&gt;로딩 중...&lt;/div&gt;;&#13;&#10;    }&#13;&#10;&#13;&#10;    return &lt;div&gt;관리자 전용 페이지입니다.&lt;/div&gt;;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/(protected)/analytics/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/(protected)/analytics/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { motion } from &quot;framer-motion&quot;;&#10;import { ArrowUpRight, ArrowDownRight } from &quot;lucide-react&quot;;&#10;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import { PageShell } from &quot;@/components/layout/page-shell&quot;;&#10;import { Card, CardContent } from &quot;@/components/ui/card&quot;;&#10;&#10;import { ProfitRateResponse, ProfitAnalysisDto } from &quot;@/lib/types/analytics&quot;;&#10;import { analyticsApi } from &quot;@/lib/api/analytics&quot;;&#10;import { DataTable } from &quot;@/components/ui/data-table&quot;;&#10;import { ColumnDef } from &quot;@tanstack/react-table&quot;;&#10;&#10;const columns: ColumnDef&lt;ProfitAnalysisDto&gt;[] = [&#10;    { accessorKey: &quot;coinName&quot;, header: &quot;코인 이름&quot; },&#10;    {&#10;        accessorKey: &quot;totalQuantity&quot;,&#10;        header: &quot;보유 수량&quot;,&#10;        cell: ({ row }) =&gt; `${row.getValue(&quot;totalQuantity&quot;) as number} 주`&#10;    },&#10;    {&#10;        accessorKey: &quot;averageBuyPrice&quot;,&#10;        header: &quot;평균 구매 금액&quot;,&#10;        cell: ({ row }) =&gt; `$ ${Number(row.getValue(&quot;averageBuyPrice&quot;)).toLocaleString()}`,&#10;    },&#10;    {&#10;        accessorKey: &quot;realizedProfitRate&quot;,&#10;        header: &quot;실현 수익률&quot;,&#10;        cell: ({ row }) =&gt; `${Number(row.getValue(&quot;realizedProfitRate&quot;)).toFixed(2)} %`,&#10;    },&#10;];&#10;&#10;const fadeInUp = {&#10;    hidden: { opacity: 0, y: 16 },&#10;    show: { opacity: 1, y: 0, transition: { duration: 0.4 } },&#10;};&#10;const stagger = (delay = 0.1) =&gt; ({&#10;    hidden: {},&#10;    show: { transition: { staggerChildren: delay } },&#10;});&#10;&#10;export default function TransactionsPage() {&#10;    const [tab, setTab] = useState&lt;&quot;realized&quot; | &quot;evaluated&quot;&gt;(&quot;realized&quot;);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [analyticsData, setAnalyticsData] = useState&lt;ProfitRateResponse | null&gt;(null);&#10;&#10;    const userId = 1;&#10;&#10;    useEffect(() =&gt; {&#10;        fetchAnalyticsRealized();&#10;    }, []);&#10;&#10;    const fetchAnalyticsRealized = async () =&gt; {&#10;        try {&#10;            setIsLoading(true);&#10;            const response = await analyticsApi.getUserAnalyticsRealized(userId);&#10;            console.log(&quot;거래 내역 응답:&quot;, response);&#10;            if (response) {&#10;                // @ts-ignore&#10;                setAnalyticsData(response);&#10;            }&#10;        } catch (error) {&#10;            console.error(&quot;거래 내역 조회 실패:&quot;, error);&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    };&#10;    const handleTabClick = (selectedTab: &quot;realized&quot; | &quot;evaluated&quot;) =&gt; {&#10;        setTab(selectedTab);&#10;        if (selectedTab === &quot;realized&quot;) {&#10;            fetchAnalyticsRealized();&#10;        } else {&#10;            fetchAnalyticsEvaluated(); // 이 함수도 따로 구현 필요&#10;        }&#10;    };&#10;    const fetchAnalyticsEvaluated = async () =&gt; {&#10;        try {&#10;            setIsLoading(true);&#10;            const response = await analyticsApi.getUserAnalyticsUnrealized(userId);&#10;            console.log(&quot;거래 내역 응답:&quot;, response);&#10;            if (response) {&#10;                // @ts-ignore&#10;                setAnalyticsData(response);&#10;            }&#10;        } catch (error) {&#10;            console.error(&quot;거래 내역 조회 실패:&quot;, error);&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    };&#10;    return (&#10;        &lt;PageShell&#10;            maxW=&quot;max-w-[80vw]&quot;&#10;            padded&#10;            innerClassName={cn(&quot;min-h-[60vh] flex flex-col items-center justify-center text-center space-y-6&quot;)}&#10;        &gt;&#10;            &lt;motion.div&#10;                className=&quot;container py-8 space-y-6&quot;&#10;                variants={stagger(0.1)}&#10;                initial=&quot;hidden&quot;&#10;                animate=&quot;show&quot;&#10;                &lt;motion.h1 variants={fadeInUp} className=&quot;text-2xl font-bold w-full text-left&quot; suppressHydrationWarning&gt;&#10;                    분석 페이지&#10;                &lt;/motion.h1&gt;&#10;&#10;                &lt;motion.div&#10;                    key={tab}&#10;                    variants={fadeInUp}&#10;                    initial=&quot;hidden&quot;&#10;                    animate=&quot;show&quot;&#10;                    suppressHydrationWarning&#10;                &gt;                    {/* 탭 메뉴 */}&#10;                    &lt;div className=&quot;flex gap-6 text-sm font-medium&quot;&gt;&#10;                        &lt;button&#10;                            className={`border-b-2 pb-1 ${&#10;                                tab === &quot;realized&quot; ? &quot;border-black&quot; : &quot;border-transparent text-muted-foreground&quot;&#10;                            }`}&#10;                            onClick={() =&gt; handleTabClick(&quot;realized&quot;)}&#10;                        &gt;&#10;                            실현 수익률&#10;                        &lt;/button&gt;&#10;                        &lt;button&#10;                            className={`border-b-2 pb-1 ${&#10;                                tab === &quot;evaluated&quot; ? &quot;border-black&quot; : &quot;border-transparent text-muted-foreground&quot;&#10;                            }`}&#10;                            onClick={() =&gt; handleTabClick(&quot;evaluated&quot;)}&#10;                        &gt;&#10;                            평가 수익률&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* 수익 카드 영역 */}&#10;                    &lt;div className=&quot;flex gap-4 mt-6&quot;&gt;&#10;                        &lt;Card className=&quot;flex-1 bg-[#eef0fe]&quot;&gt;&#10;                            &lt;CardContent className=&quot;py-6&quot;&gt;&#10;                                &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;총 자산 대비 수익률&lt;/div&gt;&#10;                                &lt;div className=&quot;text-3xl font-bold mt-1&quot;&gt;&#10;                                    {analyticsData?.profitRateOnTotalAssets ?? &quot;0&quot;}&#10;                                &lt;/div&gt;&#10;                                &lt;div&#10;                                    className={cn(&#10;                                        &quot;text-sm font-medium flex items-center gap-1&quot;,&#10;                                        (analyticsData?.profitRateOnTotalAssets ?? 0) &gt;= 0&#10;                                            ? &quot;text-green-600&quot;&#10;                                            : &quot;text-red-500&quot;&#10;                                    )}&#10;                                &gt;&#10;                                    {(analyticsData?.profitRateOnTotalAssets ?? 0) &gt;= 0 ? (&#10;                                        &lt;ArrowUpRight size={16} /&gt;&#10;                                    ) : (&#10;                                        &lt;ArrowDownRight size={16} /&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                            &lt;/CardContent&gt;&#10;                        &lt;/Card&gt;&#10;                        &lt;Card className=&quot;flex-1 bg-[#e6f1fb]&quot;&gt;&#10;                            &lt;CardContent className=&quot;py-6&quot;&gt;&#10;                                &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;투자금 대비 수익률&lt;/div&gt;&#10;                                &lt;div className=&quot;text-3xl font-bold mt-1&quot;&gt;&#10;                                    {analyticsData?.profitRateOnInvestment ?? &quot;0&quot;}&#10;&#10;                                &lt;/div&gt;&#10;                                &lt;div&#10;                                    className={cn(&#10;                                        &quot;text-sm font-medium flex items-center gap-1&quot;,&#10;                                        (analyticsData?.profitRateOnTotalAssets ?? 0) &gt;= 0&#10;                                            ? &quot;text-green-600&quot;&#10;                                            : &quot;text-red-500&quot;&#10;                                    )}&#10;                                &gt;&#10;                                    {(analyticsData?.profitRateOnTotalAssets ?? 0) &gt;= 0 ? (&#10;                                        &lt;ArrowUpRight size={16} /&gt;&#10;                                    ) : (&#10;                                        &lt;ArrowDownRight size={16} /&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                            &lt;/CardContent&gt;&#10;                        &lt;/Card&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* 테이블 */}&#10;                    &lt;div className=&quot;border rounded-xl overflow-hidden shadow-sm mt-6&quot;&gt;&#10;                        {analyticsData &amp;&amp; (&#10;                            &lt;DataTable&#10;                                columns={columns}&#10;                                data={analyticsData.coinAnalytics ?? []}&#10;                            /&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/motion.div&gt;&#10;            &lt;/motion.div&gt;&#10;        &lt;/PageShell&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { motion } from &quot;framer-motion&quot;;&#10;import { ArrowUpRight, ArrowDownRight } from &quot;lucide-react&quot;;&#10;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import { PageShell } from &quot;@/components/layout/page-shell&quot;;&#10;import { Card, CardContent } from &quot;@/components/ui/card&quot;;&#10;&#10;import { ProfitRateResponse, ProfitAnalysisDto } from &quot;@/lib/types/analytics&quot;;&#10;import { analyticsApi } from &quot;@/lib/api/analytics&quot;;&#10;import { DataTable } from &quot;@/components/ui/data-table&quot;;&#10;import { ColumnDef } from &quot;@tanstack/react-table&quot;;&#10;&#10;const columns: ColumnDef&lt;ProfitAnalysisDto&gt;[] = [&#10;    { accessorKey: &quot;coinName&quot;, header: &quot;코인 이름&quot; },&#10;    {&#10;        accessorKey: &quot;totalQuantity&quot;,&#10;        header: &quot;보유 수량&quot;,&#10;        cell: ({ row }) =&gt; `${row.getValue(&quot;totalQuantity&quot;) as number} 주`&#10;    },&#10;    {&#10;        accessorKey: &quot;averageBuyPrice&quot;,&#10;        header: &quot;평균 구매 금액&quot;,&#10;        cell: ({ row }) =&gt; `$ ${Number(row.getValue(&quot;averageBuyPrice&quot;)).toLocaleString()}`,&#10;    },&#10;    {&#10;        accessorKey: &quot;realizedProfitRate&quot;,&#10;        header: &quot;실현 수익률&quot;,&#10;        cell: ({ row }) =&gt; `${Number(row.getValue(&quot;realizedProfitRate&quot;)).toFixed(2)} %`,&#10;    },&#10;];&#10;&#10;const fadeInUp = {&#10;    hidden: { opacity: 0, y: 16 },&#10;    show: { opacity: 1, y: 0, transition: { duration: 0.4 } },&#10;};&#10;const stagger = (delay = 0.1) =&gt; ({&#10;    hidden: {},&#10;    show: { transition: { staggerChildren: delay } },&#10;});&#10;&#10;export default function TransactionsPage() {&#10;    const [tab, setTab] = useState&lt;&quot;realized&quot; | &quot;evaluated&quot;&gt;(&quot;realized&quot;);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [analyticsData, setAnalyticsData] = useState&lt;ProfitRateResponse | null&gt;(null);&#10;&#10;    const userId = 1;&#10;&#10;    useEffect(() =&gt; {&#10;        fetchAnalyticsRealized();&#10;    }, []);&#10;&#10;    const fetchAnalyticsRealized = async () =&gt; {&#10;        try {&#10;            setIsLoading(true);&#10;            const response = await analyticsApi.getUserAnalyticsRealized(userId);&#10;            console.log(&quot;거래 내역 응답:&quot;, response);&#10;            if (response) {&#10;                // @ts-ignore&#10;                setAnalyticsData(response);&#10;            }&#10;        } catch (error) {&#10;            console.error(&quot;거래 내역 조회 실패:&quot;, error);&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    };&#10;    const handleTabClick = (selectedTab: &quot;realized&quot; | &quot;evaluated&quot;) =&gt; {&#10;        setTab(selectedTab);&#10;        if (selectedTab === &quot;realized&quot;) {&#10;            fetchAnalyticsRealized();&#10;        } else {&#10;            fetchAnalyticsEvaluated(); // 이 함수도 따로 구현 필요&#10;        }&#10;    };&#10;    const fetchAnalyticsEvaluated = async () =&gt; {&#10;        try {&#10;            setIsLoading(true);&#10;            const response = await analyticsApi.getUserAnalyticsUnrealized(userId);&#10;            console.log(&quot;거래 내역 응답:&quot;, response);&#10;            if (response) {&#10;                // @ts-ignore&#10;                setAnalyticsData(response);&#10;            }&#10;        } catch (error) {&#10;            console.error(&quot;거래 내역 조회 실패:&quot;, error);&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    };&#10;    return (&#10;        &lt;PageShell&#10;            maxW=&quot;max-w-[80vw]&quot;&#10;            padded&#10;            innerClassName={cn(&quot;min-h-[60vh] flex flex-col items-center justify-center text-center space-y-6&quot;)}&#10;        &gt;&#10;            &lt;motion.div&#10;                className=&quot;container py-8 space-y-6&quot;&#10;                variants={stagger(0.1)}&#10;                initial=&quot;hidden&quot;&#10;                animate=&quot;show&quot;&#10;                suppressHydrationWarning&#10;            &gt;&#10;                &lt;motion.h1 variants={fadeInUp} className=&quot;text-2xl font-bold w-full text-left&quot; suppressHydrationWarning&gt;&#10;                    분석 페이지&#10;                &lt;/motion.h1&gt;&#10;&#10;                &lt;motion.div&#10;                    key={tab}&#10;                    variants={fadeInUp}&#10;                    initial=&quot;hidden&quot;&#10;                    animate=&quot;show&quot;&#10;                    suppressHydrationWarning&#10;                &gt;                    {/* 탭 메뉴 */}&#10;                    &lt;div className=&quot;flex gap-6 text-sm font-medium&quot;&gt;&#10;                        &lt;button&#10;                            className={`border-b-2 pb-1 ${&#10;                                tab === &quot;realized&quot; ? &quot;border-black&quot; : &quot;border-transparent text-muted-foreground&quot;&#10;                            }`}&#10;                            onClick={() =&gt; handleTabClick(&quot;realized&quot;)}&#10;                        &gt;&#10;                            실현 수익률&#10;                        &lt;/button&gt;&#10;                        &lt;button&#10;                            className={`border-b-2 pb-1 ${&#10;                                tab === &quot;evaluated&quot; ? &quot;border-black&quot; : &quot;border-transparent text-muted-foreground&quot;&#10;                            }`}&#10;                            onClick={() =&gt; handleTabClick(&quot;evaluated&quot;)}&#10;                        &gt;&#10;                            평가 수익률&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* 수익 카드 영역 */}&#10;                    &lt;div className=&quot;flex gap-4 mt-6&quot;&gt;&#10;                        &lt;Card className=&quot;flex-1 bg-[#eef0fe]&quot;&gt;&#10;                            &lt;CardContent className=&quot;py-6&quot;&gt;&#10;                                &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;총 자산 대비 수익률&lt;/div&gt;&#10;                                &lt;div className=&quot;text-3xl font-bold mt-1&quot;&gt;&#10;                                    {analyticsData?.profitRateOnTotalAssets ?? &quot;0&quot;}&#10;                                &lt;/div&gt;&#10;                                &lt;div&#10;                                    className={cn(&#10;                                        &quot;text-sm font-medium flex items-center gap-1&quot;,&#10;                                        (analyticsData?.profitRateOnTotalAssets ?? 0) &gt;= 0&#10;                                            ? &quot;text-green-600&quot;&#10;                                            : &quot;text-red-500&quot;&#10;                                    )}&#10;                                &gt;&#10;                                    {(analyticsData?.profitRateOnTotalAssets ?? 0) &gt;= 0 ? (&#10;                                        &lt;ArrowUpRight size={16} /&gt;&#10;                                    ) : (&#10;                                        &lt;ArrowDownRight size={16} /&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                            &lt;/CardContent&gt;&#10;                        &lt;/Card&gt;&#10;                        &lt;Card className=&quot;flex-1 bg-[#e6f1fb]&quot;&gt;&#10;                            &lt;CardContent className=&quot;py-6&quot;&gt;&#10;                                &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;투자금 대비 수익률&lt;/div&gt;&#10;                                &lt;div className=&quot;text-3xl font-bold mt-1&quot;&gt;&#10;                                    {analyticsData?.profitRateOnInvestment ?? &quot;0&quot;}&#10;&#10;                                &lt;/div&gt;&#10;                                &lt;div&#10;                                    className={cn(&#10;                                        &quot;text-sm font-medium flex items-center gap-1&quot;,&#10;                                        (analyticsData?.profitRateOnTotalAssets ?? 0) &gt;= 0&#10;                                            ? &quot;text-green-600&quot;&#10;                                            : &quot;text-red-500&quot;&#10;                                    )}&#10;                                &gt;&#10;                                    {(analyticsData?.profitRateOnTotalAssets ?? 0) &gt;= 0 ? (&#10;                                        &lt;ArrowUpRight size={16} /&gt;&#10;                                    ) : (&#10;                                        &lt;ArrowDownRight size={16} /&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                            &lt;/CardContent&gt;&#10;                        &lt;/Card&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    {/* 테이블 */}&#10;                    &lt;div className=&quot;border rounded-xl overflow-hidden shadow-sm mt-6&quot;&gt;&#10;                        {analyticsData &amp;&amp; (&#10;                            &lt;DataTable&#10;                                columns={columns}&#10;                                data={analyticsData.coinAnalytics ?? []}&#10;                            /&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/motion.div&gt;&#10;            &lt;/motion.div&gt;&#10;        &lt;/PageShell&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/(protected)/dashboard/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/(protected)/dashboard/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import { motion } from &quot;framer-motion&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { apiCall } from &quot;@/lib/api/client&quot;; // apiCall import 추가&#10;&#10;const fadeInUp = {&#10;    hidden: { opacity: 0, y: 16 },&#10;    show: { opacity: 1, y: 0, transition: { duration: 0.4 } },&#10;};&#10;&#10;const stagger = (delay = 0.1) =&gt; ({&#10;    hidden: {},&#10;    show: { transition: { staggerChildren: delay } },&#10;});&#10;&#10;type MeResponse = {&#10;    result: {&#10;        id: number;&#10;        userLoginId: string;&#10;        username: string;&#10;        // 필요한 필드만 추가&#10;    };&#10;};&#10;&#10;export default function DashboardPage() {&#10;    const [userInfo, setUserInfo] = useState&lt;MeResponse[&quot;result&quot;] | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const router = useRouter();&#10;&#10;    useEffect(() =&gt; {&#10;        const ctrl = new AbortController();&#10;&#10;        const loadMe = async () =&gt; {&#10;            try {&#10;                console.log(&quot;=== 대시보드: /v1/users/me 호출 ===&quot;);&#10;&#10;                // fetch 대신 apiCall 사용&#10;                const response = await apiCall&lt;MeResponse&gt;(&quot;/v1/users/me&quot;);&#10;                console.log(&quot;API 응답:&quot;, response);&#10;&#10;                if (response &amp;&amp; response.result) {&#10;                    setUserInfo(response.result);&#10;                } else {&#10;                    console.error(&quot;잘못된 응답 형태:&quot;, response);&#10;                    router.replace(&quot;/login&quot;);&#10;                }&#10;            } catch (e) {&#10;                // AbortError는 정상적인 취소이므로 무시&#10;                if (e instanceof Error &amp;&amp; e.name === 'AbortError') {&#10;                    console.log(&quot;API 요청이 취소되었습니다 (정상)&quot;);&#10;                    return;&#10;                }&#10;                console.error(&quot;me 호출 중 오류:&quot;, e);&#10;                if (!ctrl.signal.aborted) {&#10;                    router.replace(&quot;/login&quot;);&#10;                }&#10;            } finally {&#10;                if (!ctrl.signal.aborted) {&#10;                    setIsLoading(false);&#10;                }&#10;            }&#10;        };&#10;&#10;        loadMe();&#10;        return () =&gt; ctrl.abort();&#10;    }, [router]);&#10;&#10;    if (isLoading) {&#10;        return (&#10;            &lt;div className=&quot;container py-8 flex items-center justify-center&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;p&gt;로딩 중...&lt;/p&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-500 mt-2&quot;&gt;인증 상태를 확인하고 있습니다...&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    if (!userInfo) {&#10;        return (&#10;            &lt;div className=&quot;container py-8 flex items-center justify-center&quot;&gt;&#10;                &lt;div className=&quot;text-center&quot;&gt;&#10;                    &lt;p&gt;인증이 필요합니다.&lt;/p&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-500 mt-2&quot;&gt;잠시 후 로그인 페이지로 이동합니다...&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    return (&#10;        &lt;motion.div&#10;            className=&quot;container py-8&quot;&#10;            variants={stagger(0.1)}&#10;            initial=&quot;hidden&quot;&#10;            animate=&quot;show&quot;&#10;            suppressHydrationWarning&#10;        &gt;&#10;            &lt;motion.h1 variants={fadeInUp} className=&quot;text-2xl font-bold mb-4&quot; suppressHydrationWarning&gt;&#10;                Dashboard&#10;            &lt;/motion.h1&gt;&#10;&#10;            &lt;motion.div variants={fadeInUp} className=&quot;mb-6&quot; suppressHydrationWarning&gt;&#10;                &lt;p className=&quot;text-lg&quot;&gt;안녕하세요, {userInfo.username}님!&lt;/p&gt;&#10;                &lt;p className=&quot;text-gray-600&quot;&gt;{userInfo.userLoginId}&lt;/p&gt;&#10;            &lt;/motion.div&gt;&#10;        &lt;/motion.div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;import { motion } from &quot;framer-motion&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { apiCall } from &quot;@/lib/api/client&quot;; // apiCall import 추가&#10;&#10;const fadeInUp = {&#10;    hidden: { opacity: 0, y: 16 },&#10;    show: { opacity: 1, y: 0, transition: { duration: 0.4 } },&#10;};&#10;&#10;const stagger = (delay = 0.1) =&gt; ({&#10;    hidden: {},&#10;    show: { transition: { staggerChildren: delay } },&#10;});&#10;&#10;type MeResponse = {&#10;    result: {&#10;        id: number;&#10;        userLoginId: string;&#10;        username: string;&#10;        // 필요한 필드만 추가&#10;    };&#10;};&#10;&#10;export default function DashboardPage() {&#10;    const [userInfo, setUserInfo] = useState&lt;MeResponse[&quot;result&quot;] | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const router = useRouter();&#10;&#10;    useEffect(() =&gt; {&#10;        const ctrl = new AbortController();&#10;&#10;        const loadMe = async () =&gt; {&#10;            try {&#10;                console.log(&quot;=== 대시보드: /v1/users/me 호출 ===&quot;);&#10;&#10;                // fetch 대신 apiCall 사용&#10;                const response = await apiCall&lt;{&#10;                    result: {&#10;                        id: number;&#10;                        userLoginId: string;&#10;                        username: string;&#10;                    };&#10;                    message?: string;&#10;                }&gt;(&quot;/v1/users/me&quot;);&#10;                console.log(&quot;API 응답:&quot;, response);&#10;&#10;                if (response &amp;&amp; response.result) {&#10;                    setUserInfo(response.result);&#10;                } else {&#10;                    console.error(&quot;잘못된 응답 형태:&quot;, response);&#10;                    router.replace(&quot;/login&quot;);&#10;                }&#10;            } catch (e) {&#10;                // AbortError는 정상적인 취소이므로 무시&#10;                if (e instanceof Error &amp;&amp; e.name === 'AbortError') {&#10;                    console.log(&quot;API 요청이 취소되었습니다 (정상)&quot;);&#10;                    return;&#10;                }&#10;                console.error(&quot;me 호출 중 오류:&quot;, e);&#10;                if (!ctrl.signal.aborted) {&#10;                    router.replace(&quot;/login&quot;);&#10;                }&#10;            } finally {&#10;                if (!ctrl.signal.aborted) {&#10;                    setIsLoading(false);&#10;                }&#10;            }&#10;        };&#10;&#10;        loadMe();&#10;        return () =&gt; ctrl.abort();&#10;    }, [router]);&#10;&#10;    if (isLoading) {&#10;        return (&#10;            &lt;div className=&quot;container py-8 flex items-center justify-center&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;p&gt;로딩 중...&lt;/p&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-500 mt-2&quot;&gt;인증 상태를 확인하고 있습니다...&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    if (!userInfo) {&#10;        return (&#10;            &lt;div className=&quot;container py-8 flex items-center justify-center&quot;&gt;&#10;                &lt;div className=&quot;text-center&quot;&gt;&#10;                    &lt;p&gt;인증이 필요합니다.&lt;/p&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-500 mt-2&quot;&gt;잠시 후 로그인 페이지로 이동합니다...&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    return (&#10;        &lt;motion.div&#10;            className=&quot;container py-8&quot;&#10;            variants={stagger(0.1)}&#10;            initial=&quot;hidden&quot;&#10;            animate=&quot;show&quot;&#10;            suppressHydrationWarning&#10;        &gt;&#10;            &lt;motion.h1 variants={fadeInUp} className=&quot;text-2xl font-bold mb-4&quot; suppressHydrationWarning&gt;&#10;                Dashboard&#10;            &lt;/motion.h1&gt;&#10;&#10;            &lt;motion.div variants={fadeInUp} className=&quot;mb-6&quot; suppressHydrationWarning&gt;&#10;                &lt;p className=&quot;text-lg&quot;&gt;안녕하세요, {userInfo.username}님!&lt;/p&gt;&#10;                &lt;p className=&quot;text-gray-600&quot;&gt;{userInfo.userLoginId}&lt;/p&gt;&#10;            &lt;/motion.div&gt;&#10;        &lt;/motion.div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/(protected)/logout/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/(protected)/logout/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useEffect } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;&#10;export default function LogoutPage() {&#10;    const router = useRouter();&#10;&#10;    useEffect(() =&gt; {&#10;        const logout = async () =&gt; {&#10;            try {&#10;                // 백엔드 로그아웃 API 호출 (HttpOnly 쿠키 삭제는 백엔드에서 처리)&#10;                await fetch(&#10;                    `/api/v1/users/logout`,&#10;                    {&#10;                        method: &quot;DELETE&quot;,&#10;                        credentials: &quot;include&quot;, // HttpOnly 쿠키 자동 전송&#10;                    }&#10;                );&#10;            } catch (error) {&#10;                console.warn('백엔드 로그아웃 실패:', error);&#10;            } finally {&#10;                // 백엔드에서 쿠키 삭제를 처리하므로 프론트엔드에서는 바로 리다이렉트&#10;                setTimeout(() =&gt; {&#10;                    router.replace(&quot;/login&quot;);&#10;                }, 500);&#10;            }&#10;        };&#10;&#10;        logout();&#10;    }, [router]);&#10;&#10;    return (&#10;        &lt;div className=&quot;container py-8 flex items-center justify-center&quot;&gt;&#10;            &lt;div className=&quot;text-center&quot;&gt;&#10;                &lt;p&gt;로그아웃 중...&lt;/p&gt;&#10;                &lt;p className=&quot;text-sm text-gray-500 mt-2&quot;&gt;잠시만 기다려주세요.&lt;/p&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useEffect } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { apiCall } from &quot;@/lib/api/client&quot;; // apiCall import 추가&#10;&#10;export default function LogoutPage() {&#10;    const router = useRouter();&#10;&#10;    useEffect(() =&gt; {&#10;        const logout = async () =&gt; {&#10;            try {&#10;                // fetch 대신 apiCall 사용&#10;                await apiCall(&quot;/v1/users/logout&quot;, {&#10;                    method: &quot;DELETE&quot;,&#10;                });&#10;            } catch (error) {&#10;                console.warn('백엔드 로그아웃 실패:', error);&#10;            } finally {&#10;                // 백엔드에서 쿠키 삭제를 처리하므로 프론트엔드에서는 바로 리다이렉트&#10;                setTimeout(() =&gt; {&#10;                    router.replace(&quot;/login&quot;);&#10;                }, 500);&#10;            }&#10;        };&#10;&#10;        logout();&#10;    }, [router]);&#10;&#10;    return (&#10;        &lt;div className=&quot;container py-8 flex items-center justify-center&quot;&gt;&#10;            &lt;div className=&quot;text-center&quot;&gt;&#10;                &lt;p&gt;로그아웃 중...&lt;/p&gt;&#10;                &lt;p className=&quot;text-sm text-gray-500 mt-2&quot;&gt;잠시만 기다려주세요.&lt;/p&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/(protected)/transactions/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/(protected)/transactions/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { motion } from &quot;framer-motion&quot;;&#10;import {format, formatDate} from &quot;date-fns&quot;;&#10;import { ko } from &quot;date-fns/locale&quot;;&#10;import { CalendarIcon, RotateCcw, AlertCircle } from &quot;lucide-react&quot;;&#10;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Calendar } from &quot;@/components/ui/calendar&quot;;&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from &quot;@/components/ui/select&quot;;&#10;import { Popover, PopoverContent, PopoverTrigger } from &quot;@/components/ui/popover&quot;;&#10;import { DataTable } from &quot;@/components/ui/data-table&quot;;&#10;import { ColumnDef } from &quot;@tanstack/react-table&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import { PageShell } from &quot;@/components/layout/page-shell&quot;;&#10;import { tradeLogApi } from &quot;@/lib/api/tradelog&quot;;&#10;import { apiCall } from &quot;@/lib/api/client&quot;;&#10;import { walletApi } from &quot;@/lib/api/wallet&quot;;&#10;import type { TradeLogResponse } from &quot;@/lib/types/tradelog&quot;;&#10;&#10;const columns: ColumnDef&lt;TradeLogResponse&gt;[] = [&#10;    {&#10;        accessorKey: &quot;date&quot;,&#10;        header: () =&gt; &lt;div className=&quot;text-center&quot;&gt;거래날짜&lt;/div&gt;,&#10;        cell: ({ getValue }) =&gt; &lt;div className=&quot;text-center&quot;&gt;{getValue() as string}&lt;/div&gt;,&#10;    },&#10;    {&#10;        accessorKey: &quot;coinSymbol&quot;,&#10;        header: () =&gt; &lt;div className=&quot;text-center&quot;&gt;가상화폐 이름&lt;/div&gt;,&#10;        cell: ({ getValue }) =&gt; &lt;div className=&quot;text-center&quot;&gt;{getValue() as string}&lt;/div&gt;,&#10;    },&#10;    {&#10;        accessorKey: &quot;tradeType&quot;,&#10;        header: () =&gt; &lt;div className=&quot;text-center&quot;&gt;거래 구분&lt;/div&gt;,&#10;        cell: ({ getValue }) =&gt; &lt;div className=&quot;text-center&quot;&gt;{getValue() as string}&lt;/div&gt;,&#10;    },&#10;    {&#10;        accessorKey: &quot;price&quot;,&#10;        header: () =&gt; &lt;div className=&quot;text-center&quot;&gt;구매/판매 금액&lt;/div&gt;,&#10;        cell: ({ getValue }) =&gt; &lt;div className=&quot;text-center&quot;&gt;$ {Number(getValue()).toLocaleString()}&lt;/div&gt;,&#10;    },&#10;    {&#10;        accessorKey: &quot;quantity&quot;,&#10;        header: () =&gt; &lt;div className=&quot;text-center&quot;&gt;구매/판매 수&lt;/div&gt;,&#10;        cell: ({ getValue }) =&gt; &lt;div className=&quot;text-center&quot;&gt;{getValue() as string}&lt;/div&gt;,&#10;    },&#10;];&#10;&#10;const fadeInUp = {&#10;    hidden: { opacity: 0, y: 16 },&#10;    show: { opacity: 1, y: 0, transition: { duration: 0.4 } },&#10;};&#10;const stagger = (delay = 0.1) =&gt; ({&#10;    hidden: {},&#10;    show: { transition: { staggerChildren: delay } },&#10;});&#10;&#10;interface FilterState {&#10;    startDate: Date | undefined;&#10;    endDate: Date | undefined;&#10;    transactionType: string;&#10;}&#10;&#10;export default function TransactionsPage() {&#10;    const router = useRouter();&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [isAuthenticated, setIsAuthenticated] = useState(false);&#10;    const [filters, setFilters] = useState&lt;FilterState&gt;({&#10;        startDate: undefined,&#10;        endDate: undefined,&#10;        transactionType: &quot;전체&quot;,&#10;    });&#10;    const [tradeLogData, setTradeLogData] = useState&lt;TradeLogResponse[]&gt;([]);&#10;    const [dateError, setDateError] = useState(&quot;&quot;);&#10;    const [isStartOpen, setIsStartOpen] = useState(false);&#10;    const [isEndOpen, setIsEndOpen] = useState(false);&#10;    const [userId, setUserId] = useState&lt;number | null&gt;(null);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    useEffect(() =&gt; {&#10;        const checkAuthAndFetchData = async () =&gt; {&#10;            try {&#10;                // API 클라이언트를 사용하여 일관된 URL과 설정으로 인증 확인&#10;                const response = await apiCall&lt;any&gt;('/v1/users/me');&#10;                if (response &amp;&amp; (response as any).result?.id) {&#10;                    const currentUserId = (response as any).result.id;&#10;                    setIsAuthenticated(true);&#10;                    setUserId(currentUserId);&#10;                    console.log('현재 사용자 ID:', currentUserId);&#10;&#10;                    // userId로 직접 거래 내역 조회 (지갑 조회 과정 생략)&#10;                    await fetchTradeLogWithUserId(currentUserId);&#10;                } else {&#10;                    router.replace(&quot;/login&quot;);&#10;                    return;&#10;                }&#10;            } catch (error) {&#10;                console.error(&quot;인증 확인 실패:&quot;, error);&#10;                router.replace(&quot;/login&quot;);&#10;                return;&#10;            } finally {&#10;                setIsLoading(false);&#10;            }&#10;        };&#10;&#10;        checkAuthAndFetchData();&#10;    }, [router]);&#10;&#10;    // userId로 직접 거래 내역 조회하는 함수&#10;    const fetchTradeLogWithUserId = async (userId: number) =&gt; {&#10;        try {&#10;            setIsLoading(true);&#10;            console.log('거래 내역 조회 시작 - userId:', userId);&#10;            const response = await tradeLogApi.getUserTradeLogs(userId);&#10;            console.log(&quot;거래 내역 응답:&quot;, response);&#10;&#10;            if (response !== null) {&#10;                // @ts-ignore&#10;                setTradeLogData(response);&#10;            } else {&#10;                console.warn(&quot;거래 내역이 없습니다.&quot;);&#10;            }&#10;        } catch (error) {&#10;            console.error(&quot;거래 내역 조회 실패:&quot;, error);&#10;            setError(&quot;거래 내역을 불러오는데 실패했습니다: &quot; + (error as any)?.message);&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    };&#10;&#10;    const fetchTradeLog = async () =&gt; {&#10;        if (!userId) return;&#10;        await fetchTradeLogWithUserId(userId);&#10;    };&#10;&#10;    const handleFilterChange = (key: keyof FilterState, value: any) =&gt; {&#10;        const newFilters = { ...filters, [key]: value };&#10;        setFilters(newFilters);&#10;        const startDate = key === &quot;startDate&quot; ? value : newFilters.startDate;&#10;        const endDate = key === &quot;endDate&quot; ? value : newFilters.endDate;&#10;&#10;        if (startDate &amp;&amp; !endDate) setDateError(&quot;종료일을 선택해주세요.&quot;);&#10;        else if (!startDate &amp;&amp; endDate) setDateError(&quot;시작일을 선택해주세요.&quot;);&#10;        else if (startDate &amp;&amp; endDate &amp;&amp; startDate &gt; endDate)&#10;            setDateError(&quot;시작일은 종료일보다 이전이어야 합니다.&quot;);&#10;        else setDateError(&quot;&quot;);&#10;    };&#10;&#10;    const handleClear = () =&gt; {&#10;        setFilters({&#10;            startDate: undefined,&#10;            endDate: undefined,&#10;            transactionType: &quot;전체&quot;,&#10;        });&#10;        setDateError(&quot;&quot;);&#10;    };&#10;&#10;    const handleFilter = async () =&gt; {&#10;        if (!userId) return;&#10;        &#10;        const params: Record&lt;string, any&gt; = {};&#10;&#10;        if (filters.startDate) {&#10;            params.startDate = formatDate(filters.startDate, 'yyyy-MM-dd');&#10;        }&#10;        if (filters.endDate) {&#10;            params.endDate = formatDate(filters.endDate, 'yyyy-MM-dd');&#10;        }&#10;&#10;        // 거래 유형이 존재할 경우만 추가&#10;        if (filters.transactionType === '매수') {&#10;            params.type = 'BUY';&#10;        } else if (filters.transactionType === '매도') {&#10;            params.type = 'SELL';&#10;        } else if (filters.transactionType === '충전') {&#10;            params.type = 'CHARGE';&#10;        }&#10;&#10;&#10;        try {&#10;            const response = await tradeLogApi.getFilteredTradeLogs(userId, params);&#10;            // @ts-ignore&#10;            setTradeLogData(response);&#10;        } catch (error) {&#10;            console.error(&quot;필터 적용 중 오류 발생:&quot;, error);&#10;        }&#10;    };&#10;&#10;    if (isLoading) {&#10;        return (&#10;            &lt;div className=&quot;container py-8 flex items-center justify-center&quot;&gt;&#10;                &lt;p&gt;로딩 중...&lt;/p&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    if (!isAuthenticated) {&#10;        return null;&#10;    }&#10;&#10;    return (&#10;        &lt;PageShell&#10;            maxW=&quot;max-w-[80vw]&quot;&#10;            padded&#10;            innerClassName={cn(&quot;min-h-[60vh] flex flex-col items-center justify-center text-center space-y-6&quot;)}&#10;        &gt;&#10;            &lt;motion.div className=&quot;container py-8 space-y-6&quot; variants={stagger(0.1)} initial=&quot;hidden&quot; animate=&quot;show&quot; suppressHydrationWarning&gt;&#10;                &lt;motion.h1 variants={fadeInUp} className=&quot;text-2xl font-bold w-full text-left&quot; suppressHydrationWarning&gt;&#10;                    가상화폐 주문 내역 페이지&#10;                &lt;/motion.h1&gt;&#10;&#10;                {/* 필터 */}&#10;                &lt;motion.div variants={fadeInUp} suppressHydrationWarning&gt;&#10;                    &lt;div className=&quot;bg-white p-4 rounded-lg border shadow-sm mb-6&quot;&gt;&#10;                        &lt;div className=&quot;flex flex-wrap items-center justify-around gap-4&quot;&gt;&#10;                            {/* 날짜 선택 */}&#10;                            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                &lt;span className=&quot;text-sm font-medium text-gray-700&quot;&gt;기간 선택&lt;/span&gt;&#10;                                &lt;Popover open={isStartOpen} onOpenChange={setIsStartOpen}&gt;&#10;                                    &lt;PopoverTrigger asChild&gt;&#10;                                        &lt;Button variant=&quot;outline&quot; className={`w-40 justify-start ${dateError ? &quot;border-red-500&quot; : &quot;&quot;}`}&gt;&#10;                                            &lt;CalendarIcon className=&quot;mr-2 h-4 w-4&quot; /&gt;&#10;                                            {filters.startDate ? format(filters.startDate, &quot;yyyy.MM.dd&quot;, { locale: ko }) : &quot;시작일 선택&quot;}&#10;                                        &lt;/Button&gt;&#10;                                    &lt;/PopoverTrigger&gt;&#10;                                    &lt;PopoverContent className=&quot;w-auto p-0&quot;&gt;&#10;                                        &lt;Calendar&#10;                                            mode=&quot;single&quot;&#10;                                            selected={filters.startDate}&#10;                                            onSelect={(date) =&gt; {&#10;                                                setIsStartOpen(false);&#10;                                                handleFilterChange(&quot;startDate&quot;, date);&#10;                                            }}&#10;                                            initialFocus&#10;                                        /&gt;&#10;                                    &lt;/PopoverContent&gt;&#10;                                &lt;/Popover&gt;&#10;                                &lt;span className=&quot;text-gray-500&quot;&gt;~&lt;/span&gt;&#10;                                &lt;Popover open={isEndOpen} onOpenChange={setIsEndOpen}&gt;&#10;                                    &lt;PopoverTrigger asChild&gt;&#10;                                        &lt;Button variant=&quot;outline&quot; className={`w-40 justify-start ${dateError ? &quot;border-red-500&quot; : &quot;&quot;}`}&gt;&#10;                                            &lt;CalendarIcon className=&quot;mr-2 h-4 w-4&quot; /&gt;&#10;                                            {filters.endDate ? format(filters.endDate, &quot;yyyy.MM.dd&quot;, { locale: ko }) : &quot;종료일 선택&quot;}&#10;                                        &lt;/Button&gt;&#10;                                    &lt;/PopoverTrigger&gt;&#10;                                    &lt;PopoverContent className=&quot;w-auto p-0&quot;&gt;&#10;                                        &lt;Calendar&#10;                                            mode=&quot;single&quot;&#10;                                            selected={filters.endDate}&#10;                                            onSelect={(date) =&gt; {&#10;                                                setIsEndOpen(false);&#10;                                                handleFilterChange(&quot;endDate&quot;, date);&#10;                                            }}&#10;                                            initialFocus&#10;                                        /&gt;&#10;                                    &lt;/PopoverContent&gt;&#10;                                &lt;/Popover&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* 거래 구분 */}&#10;                            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                &lt;span className=&quot;text-sm font-medium text-gray-700&quot;&gt;거래구분 선택&lt;/span&gt;&#10;                                &lt;Select&#10;                                    value={filters.transactionType}&#10;                                    onValueChange={(value) =&gt; handleFilterChange(&quot;transactionType&quot;, value)}&#10;                                &gt;&#10;                                    &lt;SelectTrigger className=&quot;w-32&quot;&gt;&#10;                                        &lt;SelectValue /&gt;&#10;                                    &lt;/SelectTrigger&gt;&#10;                                    &lt;SelectContent&gt;&#10;                                        &lt;SelectItem value=&quot;전체&quot;&gt;전체&lt;/SelectItem&gt;&#10;                                        &lt;SelectItem value=&quot;매수&quot;&gt;매수&lt;/SelectItem&gt;&#10;                                        &lt;SelectItem value=&quot;매도&quot;&gt;매도&lt;/SelectItem&gt;&#10;                                        &lt;SelectItem value=&quot;충전&quot;&gt;충전&lt;/SelectItem&gt;&#10;&#10;                                    &lt;/SelectContent&gt;&#10;                                &lt;/Select&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* 버튼 */}&#10;                            &lt;div className=&quot;flex items-center gap-2 justify-end&quot;&gt;&#10;                                &lt;Button variant=&quot;outline&quot; size=&quot;sm&quot; onClick={handleClear} className=&quot;flex items-center gap-2&quot;&gt;&#10;                                    &lt;RotateCcw className=&quot;h-4 w-4&quot; /&gt;&#10;                                    초기화&#10;                                &lt;/Button&gt;&#10;                                &lt;Button&#10;                                    size=&quot;sm&quot;&#10;                                    onClick={handleFilter}&#10;                                    className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;                                    disabled={!!dateError}&#10;                                &gt;&#10;                                    적용&#10;                                &lt;/Button&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        {dateError &amp;&amp; (&#10;                            &lt;div className=&quot;mt-3 flex items-center gap-2 text-red-600 text-sm&quot;&gt;&#10;                                &lt;AlertCircle className=&quot;h-4 w-4&quot; /&gt;&#10;                                {dateError}&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/motion.div&gt;&#10;&#10;                {/* 거래 내역 테이블 */}&#10;                &lt;motion.div variants={fadeInUp}&gt;&#10;                    &lt;DataTable columns={columns} data={tradeLogData} pageSize={10} /&gt;&#10;                &lt;/motion.div&gt;&#10;            &lt;/motion.div&gt;&#10;            {/*&lt;Button*/}&#10;            {/*    size=&quot;sm&quot;*/}&#10;            {/*    className=&quot;bg-green-600 hover:bg-green-700&quot;*/}&#10;            {/*    onClick={async () =&gt; {*/}&#10;            {/*        try {*/}&#10;            {/*            const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/tradeLog/mock`, {*/}&#10;            {/*                method: &quot;POST&quot;,*/}&#10;            {/*                credentials : &quot;include&quot;,*/}&#10;            {/*            });*/}&#10;            {/*            if (res.ok) {*/}&#10;            {/*                alert(&quot;거래 내역 15개 생성 완료!&quot;);*/}&#10;            {/*                fetchTradeLog(); // 다시 불러오기*/}&#10;            {/*            } else {*/}&#10;            {/*                alert(&quot;생성 실패&quot;);*/}&#10;            {/*            }*/}&#10;            {/*        } catch (err) {*/}&#10;            {/*            console.error(&quot;Mock 생성 실패:&quot;, err);*/}&#10;            {/*            alert(&quot;에러 발생&quot;);*/}&#10;            {/*        }*/}&#10;            {/*    }}*/}&#10;            {/*&gt;*/}&#10;            {/*    거래내역 생성*/}&#10;            {/*&lt;/Button&gt;*/}&#10;        &lt;/PageShell&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { motion } from &quot;framer-motion&quot;;&#10;import {format, formatDate} from &quot;date-fns&quot;;&#10;import { ko } from &quot;date-fns/locale&quot;;&#10;import { CalendarIcon, RotateCcw, AlertCircle } from &quot;lucide-react&quot;;&#10;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Calendar } from &quot;@/components/ui/calendar&quot;;&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from &quot;@/components/ui/select&quot;;&#10;import { Popover, PopoverContent, PopoverTrigger } from &quot;@/components/ui/popover&quot;;&#10;import { DataTable } from &quot;@/components/ui/data-table&quot;;&#10;import { ColumnDef } from &quot;@tanstack/react-table&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import { PageShell } from &quot;@/components/layout/page-shell&quot;;&#10;import { tradeLogApi } from &quot;@/lib/api/tradelog&quot;;&#10;import { apiCall } from &quot;@/lib/api/client&quot;;&#10;import { walletApi } from &quot;@/lib/api/wallet&quot;;&#10;import type { TradeLogResponse } from &quot;@/lib/types/tradelog&quot;;&#10;&#10;const columns: ColumnDef&lt;TradeLogResponse&gt;[] = [&#10;    {&#10;        accessorKey: &quot;date&quot;,&#10;        header: () =&gt; &lt;div className=&quot;text-center&quot;&gt;거래날짜&lt;/div&gt;,&#10;        cell: ({ getValue }) =&gt; &lt;div className=&quot;text-center&quot;&gt;{getValue() as string}&lt;/div&gt;,&#10;    },&#10;    {&#10;        accessorKey: &quot;coinSymbol&quot;,&#10;        header: () =&gt; &lt;div className=&quot;text-center&quot;&gt;가상화폐 이름&lt;/div&gt;,&#10;        cell: ({ getValue }) =&gt; &lt;div className=&quot;text-center&quot;&gt;{getValue() as string}&lt;/div&gt;,&#10;    },&#10;    {&#10;        accessorKey: &quot;tradeType&quot;,&#10;        header: () =&gt; &lt;div className=&quot;text-center&quot;&gt;거래 구분&lt;/div&gt;,&#10;        cell: ({ getValue }) =&gt; &lt;div className=&quot;text-center&quot;&gt;{getValue() as string}&lt;/div&gt;,&#10;    },&#10;    {&#10;        accessorKey: &quot;price&quot;,&#10;        header: () =&gt; &lt;div className=&quot;text-center&quot;&gt;구매/판매 금액&lt;/div&gt;,&#10;        cell: ({ getValue }) =&gt; &lt;div className=&quot;text-center&quot;&gt;$ {Number(getValue()).toLocaleString()}&lt;/div&gt;,&#10;    },&#10;    {&#10;        accessorKey: &quot;quantity&quot;,&#10;        header: () =&gt; &lt;div className=&quot;text-center&quot;&gt;구매/판매 수&lt;/div&gt;,&#10;        cell: ({ getValue }) =&gt; &lt;div className=&quot;text-center&quot;&gt;{getValue() as string}&lt;/div&gt;,&#10;    },&#10;];&#10;&#10;const fadeInUp = {&#10;    hidden: { opacity: 0, y: 16 },&#10;    show: { opacity: 1, y: 0, transition: { duration: 0.4 } },&#10;};&#10;const stagger = (delay = 0.1) =&gt; ({&#10;    hidden: {},&#10;    show: { transition: { staggerChildren: delay } },&#10;});&#10;&#10;interface FilterState {&#10;    startDate: Date | undefined;&#10;    endDate: Date | undefined;&#10;    transactionType: string;&#10;}&#10;&#10;export default function TransactionsPage() {&#10;    const router = useRouter();&#10;    const [isLoading, setIsLoading] = useState(true);&#10;    const [isAuthenticated, setIsAuthenticated] = useState(false);&#10;    const [filters, setFilters] = useState&lt;FilterState&gt;({&#10;        startDate: undefined,&#10;        endDate: undefined,&#10;        transactionType: &quot;전체&quot;,&#10;    });&#10;    const [tradeLogData, setTradeLogData] = useState&lt;TradeLogResponse[]&gt;([]);&#10;    const [dateError, setDateError] = useState(&quot;&quot;);&#10;    const [isStartOpen, setIsStartOpen] = useState(false);&#10;    const [isEndOpen, setIsEndOpen] = useState(false);&#10;    const [userId, setUserId] = useState&lt;number | null&gt;(null);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    useEffect(() =&gt; {&#10;        const checkAuthAndFetchData = async () =&gt; {&#10;            try {&#10;                // API 클라이언트를 사용하여 일관된 URL과 설정으로 인증 확인&#10;                const response = await apiCall&lt;{&#10;                    result: {&#10;                        id: number;&#10;                        userLoginId: string;&#10;                        username: string;&#10;                    };&#10;                    message?: string;&#10;                }&gt;('/v1/users/me');&#10;                if (response &amp;&amp; (response as any).result?.id) {&#10;                    const currentUserId = (response as any).result.id;&#10;                    setIsAuthenticated(true);&#10;                    setUserId(currentUserId);&#10;                    console.log('현재 사용자 ID:', currentUserId);&#10;&#10;                    // userId로 직접 거래 내역 조회 (지갑 조회 과정 생략)&#10;                    await fetchTradeLogWithUserId(currentUserId);&#10;                } else {&#10;                    router.replace(&quot;/login&quot;);&#10;                    return;&#10;                }&#10;            } catch (error) {&#10;                console.error(&quot;인증 확인 실패:&quot;, error);&#10;                router.replace(&quot;/login&quot;);&#10;                return;&#10;            } finally {&#10;                setIsLoading(false);&#10;            }&#10;        };&#10;&#10;        checkAuthAndFetchData();&#10;    }, [router]);&#10;&#10;    // userId로 직접 거래 내역 조회하는 함수&#10;    const fetchTradeLogWithUserId = async (userId: number) =&gt; {&#10;        try {&#10;            setIsLoading(true);&#10;            console.log('거래 내역 조회 시작 - userId:', userId);&#10;            const response = await tradeLogApi.getUserTradeLogs(userId);&#10;            console.log(&quot;거래 내역 응답:&quot;, response);&#10;&#10;            if (response !== null) {&#10;                // @ts-ignore&#10;                setTradeLogData(response);&#10;            } else {&#10;                console.warn(&quot;거래 내역이 없습니다.&quot;);&#10;            }&#10;        } catch (error) {&#10;            console.error(&quot;거래 내역 조회 실패:&quot;, error);&#10;            setError(&quot;거래 내역을 불러오는데 실패했습니다: &quot; + (error as any)?.message);&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    };&#10;&#10;    const fetchTradeLog = async () =&gt; {&#10;        if (!userId) return;&#10;        await fetchTradeLogWithUserId(userId);&#10;    };&#10;&#10;    const handleFilterChange = (key: keyof FilterState, value: any) =&gt; {&#10;        const newFilters = { ...filters, [key]: value };&#10;        setFilters(newFilters);&#10;        const startDate = key === &quot;startDate&quot; ? value : newFilters.startDate;&#10;        const endDate = key === &quot;endDate&quot; ? value : newFilters.endDate;&#10;&#10;        if (startDate &amp;&amp; !endDate) setDateError(&quot;종료일을 선택해주세요.&quot;);&#10;        else if (!startDate &amp;&amp; endDate) setDateError(&quot;시작일을 선택해주세요.&quot;);&#10;        else if (startDate &amp;&amp; endDate &amp;&amp; startDate &gt; endDate)&#10;            setDateError(&quot;시작일은 종료일보다 이전이어야 합니다.&quot;);&#10;        else setDateError(&quot;&quot;);&#10;    };&#10;&#10;    const handleClear = () =&gt; {&#10;        setFilters({&#10;            startDate: undefined,&#10;            endDate: undefined,&#10;            transactionType: &quot;전체&quot;,&#10;        });&#10;        setDateError(&quot;&quot;);&#10;    };&#10;&#10;    const handleFilter = async () =&gt; {&#10;        if (!userId) return;&#10;        &#10;        const params: Record&lt;string, any&gt; = {};&#10;&#10;        if (filters.startDate) {&#10;            params.startDate = formatDate(filters.startDate, 'yyyy-MM-dd');&#10;        }&#10;        if (filters.endDate) {&#10;            params.endDate = formatDate(filters.endDate, 'yyyy-MM-dd');&#10;        }&#10;&#10;        // 거래 유형이 존재할 경우만 추가&#10;        if (filters.transactionType === '매수') {&#10;            params.type = 'BUY';&#10;        } else if (filters.transactionType === '매도') {&#10;            params.type = 'SELL';&#10;        } else if (filters.transactionType === '충전') {&#10;            params.type = 'CHARGE';&#10;        }&#10;&#10;&#10;        try {&#10;            const response = await tradeLogApi.getFilteredTradeLogs(userId, params);&#10;            // @ts-ignore&#10;            setTradeLogData(response);&#10;        } catch (error) {&#10;            console.error(&quot;필터 적용 중 오류 발생:&quot;, error);&#10;        }&#10;    };&#10;&#10;    if (isLoading) {&#10;        return (&#10;            &lt;div className=&quot;container py-8 flex items-center justify-center&quot;&gt;&#10;                &lt;p&gt;로딩 중...&lt;/p&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    if (!isAuthenticated) {&#10;        return null;&#10;    }&#10;&#10;    return (&#10;        &lt;PageShell&#10;            maxW=&quot;max-w-[80vw]&quot;&#10;            padded&#10;            innerClassName={cn(&quot;min-h-[60vh] flex flex-col items-center justify-center text-center space-y-6&quot;)}&#10;        &gt;&#10;            &lt;motion.div className=&quot;container py-8 space-y-6&quot; variants={stagger(0.1)} initial=&quot;hidden&quot; animate=&quot;show&quot; suppressHydrationWarning&gt;&#10;                &lt;motion.h1 variants={fadeInUp} className=&quot;text-2xl font-bold w-full text-left&quot; suppressHydrationWarning&gt;&#10;                    가상화폐 주문 내역 페이지&#10;                &lt;/motion.h1&gt;&#10;&#10;                {/* 필터 */}&#10;                &lt;motion.div variants={fadeInUp} suppressHydrationWarning&gt;&#10;                    &lt;div className=&quot;bg-white p-4 rounded-lg border shadow-sm mb-6&quot;&gt;&#10;                        &lt;div className=&quot;flex flex-wrap items-center justify-around gap-4&quot;&gt;&#10;                            {/* 날짜 선택 */}&#10;                            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                &lt;span className=&quot;text-sm font-medium text-gray-700&quot;&gt;기간 선택&lt;/span&gt;&#10;                                &lt;Popover open={isStartOpen} onOpenChange={setIsStartOpen}&gt;&#10;                                    &lt;PopoverTrigger asChild&gt;&#10;                                        &lt;Button variant=&quot;outline&quot; className={`w-40 justify-start ${dateError ? &quot;border-red-500&quot; : &quot;&quot;}`}&gt;&#10;                                            &lt;CalendarIcon className=&quot;mr-2 h-4 w-4&quot; /&gt;&#10;                                            {filters.startDate ? format(filters.startDate, &quot;yyyy.MM.dd&quot;, { locale: ko }) : &quot;시작일 선택&quot;}&#10;                                        &lt;/Button&gt;&#10;                                    &lt;/PopoverTrigger&gt;&#10;                                    &lt;PopoverContent className=&quot;w-auto p-0&quot;&gt;&#10;                                        &lt;Calendar&#10;                                            mode=&quot;single&quot;&#10;                                            selected={filters.startDate}&#10;                                            onSelect={(date) =&gt; {&#10;                                                setIsStartOpen(false);&#10;                                                handleFilterChange(&quot;startDate&quot;, date);&#10;                                            }}&#10;                                            initialFocus&#10;                                        /&gt;&#10;                                    &lt;/PopoverContent&gt;&#10;                                &lt;/Popover&gt;&#10;                                &lt;span className=&quot;text-gray-500&quot;&gt;~&lt;/span&gt;&#10;                                &lt;Popover open={isEndOpen} onOpenChange={setIsEndOpen}&gt;&#10;                                    &lt;PopoverTrigger asChild&gt;&#10;                                        &lt;Button variant=&quot;outline&quot; className={`w-40 justify-start ${dateError ? &quot;border-red-500&quot; : &quot;&quot;}`}&gt;&#10;                                            &lt;CalendarIcon className=&quot;mr-2 h-4 w-4&quot; /&gt;&#10;                                            {filters.endDate ? format(filters.endDate, &quot;yyyy.MM.dd&quot;, { locale: ko }) : &quot;종료일 선택&quot;}&#10;                                        &lt;/Button&gt;&#10;                                    &lt;/PopoverTrigger&gt;&#10;                                    &lt;PopoverContent className=&quot;w-auto p-0&quot;&gt;&#10;                                        &lt;Calendar&#10;                                            mode=&quot;single&quot;&#10;                                            selected={filters.endDate}&#10;                                            onSelect={(date) =&gt; {&#10;                                                setIsEndOpen(false);&#10;                                                handleFilterChange(&quot;endDate&quot;, date);&#10;                                            }}&#10;                                            initialFocus&#10;                                        /&gt;&#10;                                    &lt;/PopoverContent&gt;&#10;                                &lt;/Popover&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* 거래 구분 */}&#10;                            &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                &lt;span className=&quot;text-sm font-medium text-gray-700&quot;&gt;거래구분 선택&lt;/span&gt;&#10;                                &lt;Select&#10;                                    value={filters.transactionType}&#10;                                    onValueChange={(value) =&gt; handleFilterChange(&quot;transactionType&quot;, value)}&#10;                                &gt;&#10;                                    &lt;SelectTrigger className=&quot;w-32&quot;&gt;&#10;                                        &lt;SelectValue /&gt;&#10;                                    &lt;/SelectTrigger&gt;&#10;                                    &lt;SelectContent&gt;&#10;                                        &lt;SelectItem value=&quot;전체&quot;&gt;전체&lt;/SelectItem&gt;&#10;                                        &lt;SelectItem value=&quot;매수&quot;&gt;매수&lt;/SelectItem&gt;&#10;                                        &lt;SelectItem value=&quot;매도&quot;&gt;매도&lt;/SelectItem&gt;&#10;                                        &lt;SelectItem value=&quot;충전&quot;&gt;충전&lt;/SelectItem&gt;&#10;&#10;                                    &lt;/SelectContent&gt;&#10;                                &lt;/Select&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* 버튼 */}&#10;                            &lt;div className=&quot;flex items-center gap-2 justify-end&quot;&gt;&#10;                                &lt;Button variant=&quot;outline&quot; size=&quot;sm&quot; onClick={handleClear} className=&quot;flex items-center gap-2&quot;&gt;&#10;                                    &lt;RotateCcw className=&quot;h-4 w-4&quot; /&gt;&#10;                                    초기화&#10;                                &lt;/Button&gt;&#10;                                &lt;Button&#10;                                    size=&quot;sm&quot;&#10;                                    onClick={handleFilter}&#10;                                    className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;                                    disabled={!!dateError}&#10;                                &gt;&#10;                                    적용&#10;                                &lt;/Button&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        {dateError &amp;&amp; (&#10;                            &lt;div className=&quot;mt-3 flex items-center gap-2 text-red-600 text-sm&quot;&gt;&#10;                                &lt;AlertCircle className=&quot;h-4 w-4&quot; /&gt;&#10;                                {dateError}&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/motion.div&gt;&#10;&#10;                {/* 거래 내역 테이블 */}&#10;                &lt;motion.div variants={fadeInUp}&gt;&#10;                    &lt;DataTable columns={columns} data={tradeLogData} pageSize={10} /&gt;&#10;                &lt;/motion.div&gt;&#10;            &lt;/motion.div&gt;&#10;            {/*&lt;Button*/}&#10;            {/*    size=&quot;sm&quot;*/}&#10;            {/*    className=&quot;bg-green-600 hover:bg-green-700&quot;*/}&#10;            {/*    onClick={async () =&gt; {*/}&#10;            {/*        try {*/}&#10;            {/*            const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/tradeLog/mock`, {*/}&#10;            {/*                method: &quot;POST&quot;,*/}&#10;            {/*                credentials : &quot;include&quot;,*/}&#10;            {/*            });*/}&#10;            {/*            if (res.ok) {*/}&#10;            {/*                alert(&quot;거래 내역 15개 생성 완료!&quot;);*/}&#10;            {/*                fetchTradeLog(); // 다시 불러오기*/}&#10;            {/*            } else {*/}&#10;            {/*                alert(&quot;생성 실패&quot;);*/}&#10;            {/*            }*/}&#10;            {/*        } catch (err) {*/}&#10;            {/*            console.error(&quot;Mock 생성 실패:&quot;, err);*/}&#10;            {/*            alert(&quot;에러 발생&quot;);*/}&#10;            {/*        }*/}&#10;            {/*    }}*/}&#10;            {/*&gt;*/}&#10;            {/*    거래내역 생성*/}&#10;            {/*&lt;/Button&gt;*/}&#10;        &lt;/PageShell&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/(protected)/user/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/(protected)/user/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { Input } from &quot;@/components/ui/input&quot;;&#10;import { Label } from &quot;@/components/ui/label&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { motion } from &quot;framer-motion&quot;;&#10;import { fadeInUp } from &quot;@/lib/motion&quot;;&#10;import { apiCall } from &quot;@/lib/api/client&quot;;&#10;&#10;type UserInfo = {&#10;    userLoginId: string;&#10;    username: string;&#10;    role?: string;&#10;    id?: number;&#10;};&#10;&#10;export default function MyPage() {&#10;    const router = useRouter();&#10;    const [user, setUser] = useState&lt;UserInfo | null&gt;(null);&#10;    const [loading, setLoading] = useState(true);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    useEffect(() =&gt; {&#10;        const fetchMyInfo = async () =&gt; {&#10;            try {&#10;                const data = await apiCall&lt;{result: UserInfo}&gt;(`/v1/users/me`);&#10;&#10;                if (data &amp;&amp; data.result) {&#10;                    setUser(data.result);&#10;                } else {&#10;                    setError(data?.message || &quot;유저 정보를 불러올 수 없습니다.&quot;);&#10;                }&#10;            } catch (error: any) {&#10;                console.error(&quot;유저 정보 조회 실패:&quot;, error);&#10;                if (error.status === 401) {&#10;                    router.replace(&quot;/login&quot;);&#10;                } else {&#10;                    setError(error.message || &quot;유저 정보를 불러올 수 없습니다.&quot;);&#10;                }&#10;            } finally {&#10;                setLoading(false);&#10;            }&#10;        };&#10;&#10;        fetchMyInfo();&#10;    }, [router]);&#10;&#10;    return (&#10;        &lt;div className=&quot;min-h-[calc(100vh-64px-260px)] flex items-center justify-center&quot;&gt;&#10;            &lt;motion.div&#10;                variants={fadeInUp}&#10;                initial=&quot;hidden&quot;&#10;                animate=&quot;show&quot;&#10;                className=&quot;w-full max-w-sm border rounded-lg p-6 bg-card shadow&quot;&#10;            &gt;&#10;                &lt;h1 className=&quot;text-2xl font-bold mb-6 text-center&quot;&gt;내 정보&lt;/h1&gt;&#10;                {loading ? (&#10;                    &lt;div className=&quot;text-center text-muted-foreground&quot;&gt;불러오는 중...&lt;/div&gt;&#10;                ) : error ? (&#10;                    &lt;p className=&quot;text-sm text-red-500 text-center&quot;&gt;{error}&lt;/p&gt;&#10;                ) : user ? (&#10;                    &lt;form className=&quot;space-y-4&quot;&gt;&#10;                        &lt;div className=&quot;space-y-2&quot;&gt;&#10;                            &lt;Label htmlFor=&quot;userLoginId&quot;&gt;아이디&lt;/Label&gt;&#10;                            &lt;Input id=&quot;userLoginId&quot; type=&quot;text&quot; value={user.userLoginId} disabled /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;space-y-2&quot;&gt;&#10;                            &lt;Label htmlFor=&quot;username&quot;&gt;닉네임&lt;/Label&gt;&#10;                            &lt;Input id=&quot;username&quot; type=&quot;text&quot; value={user.username} disabled /&gt;&#10;                        &lt;/div&gt;&#10;                        {user.role &amp;&amp; (&#10;                            &lt;div className=&quot;space-y-2&quot;&gt;&#10;                                &lt;Label htmlFor=&quot;role&quot;&gt;권한&lt;/Label&gt;&#10;                                &lt;Input id=&quot;role&quot; type=&quot;text&quot; value={user.role} disabled /&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                        {user.id &amp;&amp; (&#10;                            &lt;div className=&quot;space-y-2&quot;&gt;&#10;                                &lt;Label htmlFor=&quot;id&quot;&gt;회원번호&lt;/Label&gt;&#10;                                &lt;Input id=&quot;id&quot; type=&quot;text&quot; value={user.id} disabled /&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                        &lt;Button&#10;                            type=&quot;button&quot;&#10;                            className=&quot;w-full&quot;&#10;                            variant=&quot;outline&quot;&#10;                            onClick={() =&gt; router.push(&quot;/dashboard&quot;)}&#10;                        &gt;&#10;                            대시보드로 이동&#10;                        &lt;/Button&gt;&#10;                    &lt;/form&gt;&#10;                ) : (&#10;                    &lt;p className=&quot;text-sm text-muted-foreground text-center&quot;&gt;정보 없음&lt;/p&gt;&#10;                )}&#10;&#10;                &lt;div className=&quot;mt-6 text-center&quot;&gt;&#10;                    &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                        &lt;Button&#10;                            variant=&quot;link&quot;&#10;                            className=&quot;p-0 h-auto font-normal text-primary&quot;&#10;                            onClick={() =&gt; router.push('/logout')}&#10;                        &gt;&#10;                            로그아웃&#10;                        &lt;/Button&gt;&#10;                    &lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/motion.div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { Input } from &quot;@/components/ui/input&quot;;&#10;import { Label } from &quot;@/components/ui/label&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { motion } from &quot;framer-motion&quot;;&#10;import { fadeInUp } from &quot;@/lib/motion&quot;;&#10;import { apiCall } from &quot;@/lib/api/client&quot;;&#10;&#10;type UserInfo = {&#10;    userLoginId: string;&#10;    username: string;&#10;    role?: string;&#10;    id?: number;&#10;};&#10;&#10;export default function MyPage() {&#10;    const router = useRouter();&#10;    const [user, setUser] = useState&lt;UserInfo | null&gt;(null);&#10;    const [loading, setLoading] = useState(true);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    useEffect(() =&gt; {&#10;        const fetchMyInfo = async () =&gt; {&#10;            try {&#10;                // 백엔드 API 응답 구조에 맞는 타입 정의&#10;                const data = await apiCall&lt;{&#10;                    result: UserInfo;&#10;                    message?: string;&#10;                }&gt;(`/v1/users/me`);&#10;&#10;                if (data &amp;&amp; data.result) {&#10;                    setUser(data.result);&#10;                } else {&#10;                    setError(data?.message || &quot;유저 정보를 불러올 수 없습니다.&quot;);&#10;                }&#10;            } catch (error: any) {&#10;                console.error(&quot;유저 정보 조회 실패:&quot;, error);&#10;                if (error.status === 401) {&#10;                    router.replace(&quot;/login&quot;);&#10;                } else {&#10;                    setError(error.message || &quot;유저 정보를 불러올 수 없습니다.&quot;);&#10;                }&#10;            } finally {&#10;                setLoading(false);&#10;            }&#10;        };&#10;&#10;        fetchMyInfo();&#10;    }, [router]);&#10;&#10;    return (&#10;        &lt;div className=&quot;min-h-[calc(100vh-64px-260px)] flex items-center justify-center&quot;&gt;&#10;            &lt;motion.div&#10;                variants={fadeInUp}&#10;                initial=&quot;hidden&quot;&#10;                animate=&quot;show&quot;&#10;                className=&quot;w-full max-w-sm border rounded-lg p-6 bg-card shadow&quot;&#10;            &gt;&#10;                &lt;h1 className=&quot;text-2xl font-bold mb-6 text-center&quot;&gt;내 정보&lt;/h1&gt;&#10;                {loading ? (&#10;                    &lt;div className=&quot;text-center text-muted-foreground&quot;&gt;불러오는 중...&lt;/div&gt;&#10;                ) : error ? (&#10;                    &lt;p className=&quot;text-sm text-red-500 text-center&quot;&gt;{error}&lt;/p&gt;&#10;                ) : user ? (&#10;                    &lt;form className=&quot;space-y-4&quot;&gt;&#10;                        &lt;div className=&quot;space-y-2&quot;&gt;&#10;                            &lt;Label htmlFor=&quot;userLoginId&quot;&gt;아이디&lt;/Label&gt;&#10;                            &lt;Input id=&quot;userLoginId&quot; type=&quot;text&quot; value={user.userLoginId} disabled /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;space-y-2&quot;&gt;&#10;                            &lt;Label htmlFor=&quot;username&quot;&gt;닉네임&lt;/Label&gt;&#10;                            &lt;Input id=&quot;username&quot; type=&quot;text&quot; value={user.username} disabled /&gt;&#10;                        &lt;/div&gt;&#10;                        {user.role &amp;&amp; (&#10;                            &lt;div className=&quot;space-y-2&quot;&gt;&#10;                                &lt;Label htmlFor=&quot;role&quot;&gt;권한&lt;/Label&gt;&#10;                                &lt;Input id=&quot;role&quot; type=&quot;text&quot; value={user.role} disabled /&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                        {user.id &amp;&amp; (&#10;                            &lt;div className=&quot;space-y-2&quot;&gt;&#10;                                &lt;Label htmlFor=&quot;id&quot;&gt;회원번호&lt;/Label&gt;&#10;                                &lt;Input id=&quot;id&quot; type=&quot;text&quot; value={user.id} disabled /&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                        &lt;Button&#10;                            type=&quot;button&quot;&#10;                            className=&quot;w-full&quot;&#10;                            variant=&quot;outline&quot;&#10;                            onClick={() =&gt; router.push(&quot;/dashboard&quot;)}&#10;                        &gt;&#10;                            대시보드로 이동&#10;                        &lt;/Button&gt;&#10;                    &lt;/form&gt;&#10;                ) : (&#10;                    &lt;p className=&quot;text-sm text-muted-foreground text-center&quot;&gt;정보 없음&lt;/p&gt;&#10;                )}&#10;&#10;                &lt;div className=&quot;mt-6 text-center&quot;&gt;&#10;                    &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                        &lt;Button&#10;                            variant=&quot;link&quot;&#10;                            className=&quot;p-0 h-auto font-normal text-primary&quot;&#10;                            onClick={() =&gt; router.push('/logout')}&#10;                        &gt;&#10;                            로그아웃&#10;                        &lt;/Button&gt;&#10;                    &lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/motion.div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/app/(public)/register/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/app/(public)/register/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { z } from &quot;zod&quot;;&#10;import { zodResolver } from &quot;@hookform/resolvers/zod&quot;;&#10;import { useForm } from &quot;react-hook-form&quot;;&#10;import { Input } from &quot;@/components/ui/input&quot;;&#10;import { Label } from &quot;@/components/ui/label&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { motion } from &quot;framer-motion&quot;;&#10;import { fadeInUp } from &quot;@/lib/motion&quot;;&#10;import { apiCall } from &quot;@/lib/api/client&quot;;&#10;&#10;const schema = z.object({&#10;    userLoginId: z.string().min(1, &quot;아이디를 입력해주세요.&quot;),&#10;    password: z.string().min(3, &quot;비밀번호는 3자 이상&quot;),&#10;    confirmPassword: z.string().min(1, &quot;비밀번호 확인을 입력해주세요.&quot;),&#10;    username: z.string().min(1, &quot;유저이름을 입력해주세요.&quot;),&#10;});&#10;&#10;type FormValues = z.infer&lt;typeof schema&gt;;&#10;&#10;export default function RegisterPage() {&#10;    const router = useRouter();&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(false);&#10;&#10;    // 회원가입 에러 메시지 설정&#10;    useEffect(() =&gt; {&#10;        // URL 파라미터에서 에러 확인&#10;        const searchParams = new URLSearchParams(window.location.search);&#10;        const registerError = searchParams.get('error');&#10;&#10;        if (registerError) {&#10;            const errorMessages: { [key: string]: string } = {&#10;                'duplicate_id': '이미 사용 중인 아이디입니다.',&#10;                'duplicate_username': '이미 사용 중인 유저이름입니다.',&#10;                'server_error': '서버 오류가 발생했습니다.',&#10;                'validation_error': '입력 정보를 확인해주세요.'&#10;            };&#10;            setError(errorMessages[registerError] || '알 수 없는 오류가 발생했습니다.');&#10;        }&#10;    }, []);&#10;&#10;    const form = useForm&lt;FormValues&gt;({&#10;        resolver: zodResolver(schema),&#10;        defaultValues: {&#10;            userLoginId: &quot;&quot;,&#10;            password: &quot;&quot;,&#10;            confirmPassword: &quot;&quot;,&#10;            username: &quot;&quot;&#10;        },&#10;    });&#10;    //(`${process.env.NEXT_PUBLIC_API_URL}/api/v1/users/register`&#10;    const onRegister = async (values: any) =&gt; {&#10;        setIsLoading(true);&#10;        setError(null);&#10;&#10;        try {&#10;            // apiCall에 적절한 타입 지정&#10;            const data = await apiCall&lt;{&#10;                result?: any;&#10;                message?: string;&#10;                resultCode?: string;&#10;            }&gt;(&quot;/v1/users/register&quot;, {&#10;                method: &quot;POST&quot;,&#10;                body: JSON.stringify(values),&#10;            });&#10;&#10;            if (data &amp;&amp; data.result) {&#10;                alert('회원가입이 완료되었습니다!');&#10;                setTimeout(() =&gt; {&#10;                    router.replace(&quot;/login?message=register_success&quot;);&#10;                }, 500);&#10;            } else {&#10;                // 백엔드 에러 코드에 따라 특정 필드에 에러 설정&#10;                if (data.resultCode === &quot;400-1&quot; || data.message?.includes('아이디')) {&#10;                    // 아이디 중복 에러&#10;                    form.setError(&quot;userLoginId&quot;, {&#10;                        type: &quot;server&quot;,&#10;                        message: data.message || &quot;이미 존재하는 아이디입니다.&quot;&#10;                    });&#10;                } else if (data.resultCode === &quot;400-2&quot; || data.message?.includes('유저이름')) {&#10;                    // 유저이름 중복 에러&#10;                    form.setError(&quot;username&quot;, {&#10;                        type: &quot;server&quot;,&#10;                        message: data.message || &quot;이미 존재하는 유저이름입니다.&quot;&#10;                    });&#10;                } else if (data.resultCode === &quot;400&quot; || data.message?.includes('비밀번호 확인')) {&#10;                    // 비밀번호 불일치 에러&#10;                    form.setError(&quot;confirmPassword&quot;, {&#10;                        type: &quot;server&quot;,&#10;                        message: data.message || &quot;비밀번호 확인이 일치하지 않습니다.&quot;&#10;                    });&#10;                } else {&#10;                    // 기타 에러는 전체 에러로 표시&#10;                    setError(data.message || &quot;회원가입에 실패했습니다. 다시 시도해주세요.&quot;);&#10;                }&#10;            }&#10;        } catch (error) {&#10;            console.error('회원가입 요청 에러:', error);&#10;            setError(&quot;서버 오류가 발생했습니다. 잠시 후 다시 시도해주세요.&quot;);&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;min-h-[calc(100vh-64px-260px)] flex items-center justify-center&quot;&gt;&#10;            &lt;motion.div&#10;                variants={fadeInUp}&#10;                initial=&quot;hidden&quot;&#10;                animate=&quot;show&quot;&#10;                className=&quot;w-full max-w-md border rounded-lg p-6 bg-card shadow&quot;&#10;            &gt;&#10;                &lt;h1 className=&quot;text-2xl font-bold mb-6 text-center&quot;&gt;회원가입&lt;/h1&gt;&#10;                &lt;form onSubmit={form.handleSubmit(onRegister)} className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                        &lt;Label htmlFor=&quot;userLoginId&quot;&gt;아이디&lt;/Label&gt;&#10;                        &lt;Input id=&quot;userLoginId&quot; type=&quot;text&quot; {...form.register(&quot;userLoginId&quot;)} /&gt;&#10;                        {form.formState.errors.userLoginId &amp;&amp; (&#10;                            &lt;p className=&quot;text-sm text-red-500&quot;&gt;&#10;                                {form.formState.errors.userLoginId.message}&#10;                            &lt;/p&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                        &lt;Label htmlFor=&quot;password&quot;&gt;비밀번호&lt;/Label&gt;&#10;                        &lt;Input id=&quot;password&quot; type=&quot;password&quot; {...form.register(&quot;password&quot;)} /&gt;&#10;                        {form.formState.errors.password &amp;&amp; (&#10;                            &lt;p className=&quot;text-sm text-red-500&quot;&gt;&#10;                                {form.formState.errors.password.message}&#10;                            &lt;/p&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                        &lt;Label htmlFor=&quot;confirmPassword&quot;&gt;비밀번호 확인&lt;/Label&gt;&#10;                        &lt;Input id=&quot;confirmPassword&quot; type=&quot;password&quot; {...form.register(&quot;confirmPassword&quot;)} /&gt;&#10;                        {form.formState.errors.confirmPassword &amp;&amp; (&#10;                            &lt;p className=&quot;text-sm text-red-500&quot;&gt;&#10;                                {form.formState.errors.confirmPassword.message}&#10;                            &lt;/p&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;&#10;&#10;&#10;                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                        &lt;Label htmlFor=&quot;name&quot;&gt;유저이름&lt;/Label&gt;&#10;                        &lt;Input id=&quot;name&quot; type=&quot;text&quot; {...form.register(&quot;username&quot;)} /&gt;&#10;                        {form.formState.errors.username &amp;&amp; (&#10;                            &lt;p className=&quot;text-sm text-red-500&quot;&gt;&#10;                                {form.formState.errors.username.message}&#10;                            &lt;/p&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;&#10;                    {error &amp;&amp; &lt;p className=&quot;text-sm text-red-500&quot;&gt;{error}&lt;/p&gt;}&#10;&#10;                    &lt;Button type=&quot;submit&quot; className=&quot;w-full&quot; disabled={isLoading}&gt;&#10;                        {isLoading ? &quot;가입 중...&quot; : &quot;회원가입&quot;}&#10;                    &lt;/Button&gt;&#10;                &lt;/form&gt;&#10;&#10;                &lt;div className=&quot;mt-6 text-center&quot;&gt;&#10;                    &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                        이미 계정이 있으신가요?{&quot; &quot;}&#10;                        &lt;Button&#10;                            variant=&quot;link&quot;&#10;                            className=&quot;p-0 h-auto font-normal text-primary&quot;&#10;                            onClick={() =&gt; router.push('/login')}&#10;                        &gt;&#10;                            로그인&#10;                        &lt;/Button&gt;&#10;                    &lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/motion.div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { z } from &quot;zod&quot;;&#10;import { zodResolver } from &quot;@hookform/resolvers/zod&quot;;&#10;import { useForm } from &quot;react-hook-form&quot;;&#10;import { Input } from &quot;@/components/ui/input&quot;;&#10;import { Label } from &quot;@/components/ui/label&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { motion } from &quot;framer-motion&quot;;&#10;import { fadeInUp } from &quot;@/lib/motion&quot;;&#10;import { apiCall } from &quot;@/lib/api/client&quot;;&#10;&#10;const schema = z.object({&#10;    userLoginId: z.string().min(1, &quot;아이디를 입력해주세요.&quot;),&#10;    password: z.string().min(3, &quot;비밀번호는 3자 이상&quot;),&#10;    confirmPassword: z.string().min(1, &quot;비밀번호 확인을 입력해주세요.&quot;),&#10;    username: z.string().min(1, &quot;유저이름을 입력해주세요.&quot;),&#10;});&#10;&#10;type FormValues = z.infer&lt;typeof schema&gt;;&#10;&#10;export default function RegisterPage() {&#10;    const router = useRouter();&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;    const [isLoading, setIsLoading] = useState(false);&#10;&#10;    // 회원가입 에러 메시지 설정&#10;    useEffect(() =&gt; {&#10;        // URL 파라미터에서 에러 확인&#10;        const searchParams = new URLSearchParams(window.location.search);&#10;        const registerError = searchParams.get('error');&#10;&#10;        if (registerError) {&#10;            const errorMessages: { [key: string]: string } = {&#10;                'duplicate_id': '이미 사용 중인 아이디입니다.',&#10;                'duplicate_username': '이미 사용 중인 유저이름입니다.',&#10;                'server_error': '서버 오류가 발생했습니다.',&#10;                'validation_error': '입력 정보를 확인해주세요.'&#10;            };&#10;            setError(errorMessages[registerError] || '알 수 없는 오류가 발생했습니다.');&#10;        }&#10;    }, []);&#10;&#10;    const form = useForm&lt;FormValues&gt;({&#10;        resolver: zodResolver(schema),&#10;        defaultValues: {&#10;            userLoginId: &quot;&quot;,&#10;            password: &quot;&quot;,&#10;            confirmPassword: &quot;&quot;,&#10;            username: &quot;&quot;&#10;        },&#10;    });&#10;    //(`${process.env.NEXT_PUBLIC_API_URL}/api/v1/users/register`&#10;    const onRegister = async (values: any) =&gt; {&#10;        setIsLoading(true);&#10;        setError(null);&#10;&#10;        try {&#10;            // apiCall에 적절한 타입 지정&#10;            const data = await apiCall&lt;{&#10;                result?: any;&#10;                message?: string;&#10;                resultCode?: string;&#10;            }&gt;(&quot;/v1/users/register&quot;, {&#10;                method: &quot;POST&quot;,&#10;                body: JSON.stringify(values),&#10;            });&#10;&#10;            if (data &amp;&amp; data.result) {&#10;                alert('회원가입이 완료되었습니다!');&#10;                setTimeout(() =&gt; {&#10;                    router.replace(&quot;/login?message=register_success&quot;);&#10;                }, 500);&#10;            } else if (data) {&#10;                // 백엔드 에러 코드에 따라 특정 필드에 에러 설정 (data가 null이 아닐 때만)&#10;                if (data.resultCode === &quot;400-1&quot; || data.message?.includes('아이디')) {&#10;                    // 아이디 중복 에러&#10;                    form.setError(&quot;userLoginId&quot;, {&#10;                        type: &quot;server&quot;,&#10;                        message: data.message || &quot;이미 존재하는 아이디입니다.&quot;&#10;                    });&#10;                } else if (data.resultCode === &quot;400-2&quot; || data.message?.includes('유저이름')) {&#10;                    // 유저이름 중복 에러&#10;                    form.setError(&quot;username&quot;, {&#10;                        type: &quot;server&quot;,&#10;                        message: data.message || &quot;이미 존재하는 유저이름입니다.&quot;&#10;                    });&#10;                } else if (data.resultCode === &quot;400&quot; || data.message?.includes('비밀번호 확인')) {&#10;                    // 비밀번호 불일치 에러&#10;                    form.setError(&quot;confirmPassword&quot;, {&#10;                        type: &quot;server&quot;,&#10;                        message: data.message || &quot;비밀번호 확인이 일치하지 않습니다.&quot;&#10;                    });&#10;                } else {&#10;                    // 기타 에러는 전체 에러로 표시&#10;                    setError(data.message || &quot;회원가입에 실패했습니다. 다시 시도해주세요.&quot;);&#10;                }&#10;            } else {&#10;                // data가 null인 경우&#10;                setError(&quot;서버 응답이 없습니다. 다시 시도해주세요.&quot;);&#10;            }&#10;        } catch (error) {&#10;            console.error('회원가입 요청 에러:', error);&#10;            setError(&quot;서버 오류가 발생했습니다. 잠시 후 다시 시도해주세요.&quot;);&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;min-h-[calc(100vh-64px-260px)] flex items-center justify-center&quot;&gt;&#10;            &lt;motion.div&#10;                variants={fadeInUp}&#10;                initial=&quot;hidden&quot;&#10;                animate=&quot;show&quot;&#10;                className=&quot;w-full max-w-md border rounded-lg p-6 bg-card shadow&quot;&#10;            &gt;&#10;                &lt;h1 className=&quot;text-2xl font-bold mb-6 text-center&quot;&gt;회원가입&lt;/h1&gt;&#10;                &lt;form onSubmit={form.handleSubmit(onRegister)} className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                        &lt;Label htmlFor=&quot;userLoginId&quot;&gt;아이디&lt;/Label&gt;&#10;                        &lt;Input id=&quot;userLoginId&quot; type=&quot;text&quot; {...form.register(&quot;userLoginId&quot;)} /&gt;&#10;                        {form.formState.errors.userLoginId &amp;&amp; (&#10;                            &lt;p className=&quot;text-sm text-red-500&quot;&gt;&#10;                                {form.formState.errors.userLoginId.message}&#10;                            &lt;/p&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                        &lt;Label htmlFor=&quot;password&quot;&gt;비밀번호&lt;/Label&gt;&#10;                        &lt;Input id=&quot;password&quot; type=&quot;password&quot; {...form.register(&quot;password&quot;)} /&gt;&#10;                        {form.formState.errors.password &amp;&amp; (&#10;                            &lt;p className=&quot;text-sm text-red-500&quot;&gt;&#10;                                {form.formState.errors.password.message}&#10;                            &lt;/p&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                        &lt;Label htmlFor=&quot;confirmPassword&quot;&gt;비밀번호 확인&lt;/Label&gt;&#10;                        &lt;Input id=&quot;confirmPassword&quot; type=&quot;password&quot; {...form.register(&quot;confirmPassword&quot;)} /&gt;&#10;                        {form.formState.errors.confirmPassword &amp;&amp; (&#10;                            &lt;p className=&quot;text-sm text-red-500&quot;&gt;&#10;                                {form.formState.errors.confirmPassword.message}&#10;                            &lt;/p&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;&#10;&#10;&#10;                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                        &lt;Label htmlFor=&quot;name&quot;&gt;유저이름&lt;/Label&gt;&#10;                        &lt;Input id=&quot;name&quot; type=&quot;text&quot; {...form.register(&quot;username&quot;)} /&gt;&#10;                        {form.formState.errors.username &amp;&amp; (&#10;                            &lt;p className=&quot;text-sm text-red-500&quot;&gt;&#10;                                {form.formState.errors.username.message}&#10;                            &lt;/p&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;&#10;                    {error &amp;&amp; &lt;p className=&quot;text-sm text-red-500&quot;&gt;{error}&lt;/p&gt;}&#10;&#10;                    &lt;Button type=&quot;submit&quot; className=&quot;w-full&quot; disabled={isLoading}&gt;&#10;                        {isLoading ? &quot;가입 중...&quot; : &quot;회원가입&quot;}&#10;                    &lt;/Button&gt;&#10;                &lt;/form&gt;&#10;&#10;                &lt;div className=&quot;mt-6 text-center&quot;&gt;&#10;                    &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                        이미 계정이 있으신가요?{&quot; &quot;}&#10;                        &lt;Button&#10;                            variant=&quot;link&quot;&#10;                            className=&quot;p-0 h-auto font-normal text-primary&quot;&#10;                            onClick={() =&gt; router.push('/login')}&#10;                        &gt;&#10;                            로그인&#10;                        &lt;/Button&gt;&#10;                    &lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/motion.div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/lib/api/coin.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/lib/api/coin.ts" />
              <option name="originalContent" value="const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || &quot;http://localhost:8080&quot;;&#10;&#10;// 토큰 가져오기 함수&#10;const getAuthToken = () =&gt; {&#10;    const cookies = document.cookie.split(';');&#10;    const tokenCookie = cookies.find(cookie =&gt;&#10;        cookie.trim().startsWith('accessToken=')&#10;    );&#10;    if (tokenCookie) {&#10;        const token = tokenCookie.split('=')[1];&#10;        return tokenCookie.split('=')[1];&#10;    }&#10;    return null;&#10;};&#10;&#10;export const coinApi = {&#10;&#10;    // 코인 목록 조회 (관리자용)&#10;    getCoins: async () =&gt; {&#10;        const token = getAuthToken();&#10;        const res = await fetch(`${API_BASE_URL}/api/v1/adm/coins`, {&#10;            method: &quot;GET&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                ...(token &amp;&amp; {&quot;Authorization&quot;: `Bearer ${token}`}),&#10;            },&#10;            credentials: &quot;include&quot;,&#10;        });&#10;&#10;        if (!res.ok) {&#10;            throw new Error(`코인 목록 조회 실패: ${res.status}`);&#10;        }&#10;&#10;        return res.json();&#10;    },&#10;&#10;    // 코인 등록 (관리자용)&#10;    createCoin: async (coinData: { koreanName: string; englishName: string; symbol: string; }) =&gt; {&#10;        const token = getAuthToken();&#10;        const res = await fetch(`${API_BASE_URL}/api/v1/adm/coins`, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                ...(token &amp;&amp; {&quot;Authorization&quot;: `Bearer ${token}`}),&#10;            },&#10;            credentials: &quot;include&quot;,&#10;            body: JSON.stringify(coinData),&#10;        });&#10;&#10;        if (!res.ok) {&#10;            throw new Error(`코인 등록 실패: ${res.status}`);&#10;        }&#10;&#10;        return res.json();&#10;    },&#10;&#10;    // 코인 삭제 (관리자용)&#10;    deleteCoin: async (id: number) =&gt; {&#10;        const token = getAuthToken();&#10;        const res = await fetch(`${API_BASE_URL}/api/v1/adm/coins/${id}`, {&#10;            method: &quot;DELETE&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;                ...(token &amp;&amp; {&quot;Authorization&quot;: `Bearer ${token}`}),&#10;            },&#10;            credentials: &quot;include&quot;,&#10;        });&#10;&#10;        if (!res.ok) {&#10;            throw new Error(`코인 삭제 실패: ${res.status}`);&#10;        }&#10;    },&#10;}" />
              <option name="updatedContent" value="const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || &quot;http://localhost:8080&quot;;&#10;&#10;export const coinApi = {&#10;&#10;    // 코인 목록 조회 (관리자용)&#10;    getCoins: async () =&gt; {&#10;        const res = await fetch(`${API_BASE_URL}/api/v1/adm/coins`, {&#10;            method: &quot;GET&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;            },&#10;            credentials: &quot;include&quot;, // HttpOnly 쿠키 자동 전송&#10;        });&#10;&#10;        if (!res.ok) {&#10;            throw new Error(`코인 목록 조회 실패: ${res.status}`);&#10;        }&#10;&#10;        return res.json();&#10;    },&#10;&#10;    // 코인 등록 (관리자용)&#10;    createCoin: async (coinData: { koreanName: string; englishName: string; symbol: string; }) =&gt; {&#10;        const res = await fetch(`${API_BASE_URL}/api/v1/adm/coins`, {&#10;            method: &quot;POST&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;            },&#10;            credentials: &quot;include&quot;, // HttpOnly 쿠키 자동 전송&#10;            body: JSON.stringify(coinData),&#10;        });&#10;&#10;        if (!res.ok) {&#10;            throw new Error(`코인 등록 실패: ${res.status}`);&#10;        }&#10;&#10;        return res.json();&#10;    },&#10;&#10;    // 코인 삭제 (관리자용)&#10;    deleteCoin: async (id: number) =&gt; {&#10;        const res = await fetch(`${API_BASE_URL}/api/v1/adm/coins/${id}`, {&#10;            method: &quot;DELETE&quot;,&#10;            headers: {&#10;                &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;            },&#10;            credentials: &quot;include&quot;, // HttpOnly 쿠키 자동 전송&#10;        });&#10;&#10;        if (!res.ok) {&#10;            throw new Error(`코인 삭제 실패: ${res.status}`);&#10;        }&#10;    },&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/lib/api/tradelog.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/lib/api/tradelog.ts" />
              <option name="originalContent" value="import { apiCall } from './client'&#10;import type { ApiResponse } from '@/lib/types/common'&#10;import type { TradeLogResponse, TradeGetItems } from '@/lib/types/tradelog'&#10;&#10;export const tradeLogApi = {&#10;  // 사용자의 거래 내역 조회 - 새로운 userId 기반 API 사용&#10;  getUserTradeLogs: (userId: number) =&gt;&#10;      apiCall&lt;TradeLogResponse[]&gt;(`/tradeLog/user/${userId}`),&#10;&#10;  // 특정 코인의 거래 내역 조회&#10;  getCoinTradeLogs: (userId: number, coinId: number) =&gt;&#10;      apiCall&lt;ApiResponse&lt;TradeLogResponse[]&gt;&gt;(`/tradeLog/user/${userId}?coinId=${coinId}`),&#10;&#10;  // 특정 거래 내역 상세 조회&#10;  getTradeLogById: (id: number) =&gt;&#10;      apiCall&lt;ApiResponse&lt;TradeLogResponse&gt;&gt;(`/tradeLog/${id}`),&#10;&#10;  getFilteredTradeLogs: async (&#10;      userId: number,&#10;      filters: Record&lt;string, any&gt;&#10;  ): Promise&lt;TradeLogResponse[]&gt; =&gt; {&#10;    const query = new URLSearchParams();&#10;&#10;    Object.entries(filters).forEach(([key, value]) =&gt; {&#10;      if (value !== undefined &amp;&amp; value !== null) {&#10;        query.append(key, String(value));&#10;      }&#10;    });&#10;&#10;    return (&#10;        await apiCall&lt;TradeLogResponse[]&gt;&#10;            `/tradeLog/user/${userId}?${query.toString()}`&#10;        )&#10;    ) ?? []; // null이면 빈 배열 반환&#10;  },&#10;}&#10;" />
              <option name="updatedContent" value="import { apiCall } from './client'&#10;import type { ApiResponse } from '@/lib/types/common'&#10;import type { TradeLogResponse, TradeGetItems } from '@/lib/types/tradelog'&#10;&#10;export const tradeLogApi = {&#10;  // 사용자의 거래 내역 조회 - 새로운 userId 기반 API 사용&#10;  getUserTradeLogs: (userId: number) =&gt;&#10;      apiCall&lt;TradeLogResponse[]&gt;(`/tradeLog/user/${userId}`),&#10;&#10;  // 특정 코인의 거래 내역 조회&#10;  getCoinTradeLogs: (userId: number, coinId: number) =&gt;&#10;      apiCall&lt;ApiResponse&lt;TradeLogResponse[]&gt;&gt;(`/tradeLog/user/${userId}?coinId=${coinId}`),&#10;&#10;  // 특정 거래 내역 상세 조회&#10;  getTradeLogById: (id: number) =&gt;&#10;      apiCall&lt;ApiResponse&lt;TradeLogResponse&gt;&gt;(`/tradeLog/${id}`),&#10;&#10;  getFilteredTradeLogs: async (&#10;      userId: number,&#10;      filters: Record&lt;string, any&gt;&#10;  ): Promise&lt;TradeLogResponse[]&gt; =&gt; {&#10;    const query = new URLSearchParams();&#10;&#10;    Object.entries(filters).forEach(([key, value]) =&gt; {&#10;      if (value !== undefined &amp;&amp; value !== null) {&#10;        query.append(key, String(value));&#10;      }&#10;    });&#10;&#10;    const result = await apiCall&lt;TradeLogResponse[]&gt;(&#10;        `/tradeLog/user/${userId}?${query.toString()}`&#10;    );&#10;    &#10;    return result ?? []; // null이면 빈 배열 반환&#10;  },&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/middlewar2e.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/middlewar2e.ts" />
              <option name="originalContent" value="// middlewar2e.ts (또는 src/middlewar2e.ts)&#10;import type { NextRequest } from &quot;next/server&quot;;&#10;import { NextResponse } from &quot;next/server&quot;;&#10;&#10;const AUTH_ENABLED = process.env.NEXT_PUBLIC_AUTH_ENABLED !== &quot;false&quot;;&#10;&#10;export function middlewar2e(req: NextRequest) {&#10;    // 인증 끄고 싶을 때는 그냥 통과&#10;    if (!AUTH_ENABLED) return NextResponse.next();&#10;&#10;    const { pathname } = req.nextUrl;&#10;    const token = req.cookies.get(&quot;accessToken&quot;)?.value; // access_token → accessToken으로 변경&#10;    const role = req.cookies.get(&quot;role&quot;)?.value;&#10;&#10;    // ADMIN 전용&#10;    if (pathname.startsWith(&quot;/admin&quot;)) {&#10;        if (!token || role !== &quot;ADMIN&quot;) {&#10;            return NextResponse.redirect(new URL(&quot;/login&quot;, req.url));&#10;        }&#10;        return NextResponse.next();&#10;    }&#10;&#10;    // 보호가 필요한 경로&#10;    const needAuth = [&#10;        &quot;/dashboard&quot;,&#10;        &quot;/wallet&quot;,&#10;        &quot;/transactions&quot;,&#10;        &quot;/coin-transactions&quot;,&#10;    ].some((p) =&gt; pathname.startsWith(p));&#10;&#10;    if (needAuth &amp;&amp; !token) {&#10;        return NextResponse.redirect(new URL(&quot;/login&quot;, req.url));&#10;    }&#10;&#10;    return NextResponse.next();&#10;}&#10;&#10;&#10;export const config = {&#10;    matcher: [&#10;        &quot;/dashboard/:path*&quot;,&#10;        &quot;/wallet/:path*&quot;,&#10;        &quot;/transactions/:path*&quot;,&#10;        &quot;/coin-transactions/:path*&quot;,&#10;        &quot;/admin/:path*&quot;,&#10;    ],&#10;};&#10;" />
              <option name="updatedContent" value="// middlewar2e.ts (또는 src/middlewar2e.ts)&#13;&#10;import type { NextRequest } from &quot;next/server&quot;;&#13;&#10;import { NextResponse } from &quot;next/server&quot;;&#13;&#10;&#13;&#10;// HttpOnly 쿠키 사용 시 middleware에서 인증 확인 불가능하므로 비활성화&#13;&#10;const AUTH_ENABLED = false; // process.env.NEXT_PUBLIC_AUTH_ENABLED !== &quot;false&quot;;&#13;&#10;&#13;&#10;export function middlewar2e(req: NextRequest) {&#13;&#10;    // HttpOnly 쿠키는 middleware에서 읽을 수 없으므로 항상 통과&#13;&#10;    // 실제 인증은 각 페이지에서 API 호출로 처리&#13;&#10;    return NextResponse.next();&#13;&#10;}&#13;&#10;&#13;&#10;export const config = {&#13;&#10;    matcher: [&#13;&#10;        &quot;/dashboard/:path*&quot;,&#13;&#10;        &quot;/wallet/:path*&quot;,&#13;&#10;        &quot;/transactions/:path*&quot;,&#13;&#10;        &quot;/coin-transactions/:path*&quot;,&#13;&#10;        &quot;/admin/:path*&quot;,&#13;&#10;    ],&#13;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>