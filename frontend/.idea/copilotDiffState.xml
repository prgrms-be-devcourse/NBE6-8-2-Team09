<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/charge/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/charge/route.ts" />
              <option name="originalContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// POST /api/wallets/users/[userId]/charge - 지갑 충전&#10;export async function POST(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;        const body = await request.json();&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}/charge`, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;            },&#10;            body: JSON.stringify(body),&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('지갑 충전 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// POST /api/wallets/users/[userId]/charge - 지갑 충전&#10;export async function POST(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;        const body = await request.json();&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}/charge`, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;                // 프론트엔드에서 받은 쿠키를 백엔드로 전달&#10;                'Cookie': request.headers.get('cookie') || '',&#10;            },&#10;            body: JSON.stringify(body),&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('지갑 충전 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/purchase/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/purchase/route.ts" />
              <option name="originalContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// POST /api/wallets/users/[userId]/purchase - 코인 구매&#10;export async function POST(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;        const body = await request.json();&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}/purchase`, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;            },&#10;            body: JSON.stringify(body),&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('코인 구매 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// POST /api/wallets/users/[userId]/purchase - 코인 구매&#10;export async function POST(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;        const body = await request.json();&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}/purchase`, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;                // 프론트엔드에서 받은 쿠키를 백엔드로 전달&#10;                'Cookie': request.headers.get('cookie') || '',&#10;            },&#10;            body: JSON.stringify(body),&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('코인 구매 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/route.ts" />
              <option name="originalContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// GET /api/wallets/users/[userId] - 지갑 정보 조회&#10;export async function GET(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}`, {&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;            },&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('지갑 조회 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// GET /api/wallets/users/[userId] - 지갑 정보 조회&#10;export async function GET(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}`, {&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;                // 프론트엔드에서 받은 쿠키를 백엔드로 전달&#10;                'Cookie': request.headers.get('cookie') || '',&#10;            },&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('지갑 조회 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/sell/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/sell/route.ts" />
              <option name="originalContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// POST /api/wallets/users/[userId]/sell - 코인 판매&#10;export async function POST(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;        const body = await request.json();&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}/sell`, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;            },&#10;            body: JSON.stringify(body),&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('코인 판매 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// POST /api/wallets/users/[userId]/sell - 코인 판매&#10;export async function POST(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;        const body = await request.json();&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}/sell`, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;                // 프론트엔드에서 받은 쿠키를 백엔드로 전달&#10;                'Cookie': request.headers.get('cookie') || '',&#10;            },&#10;            body: JSON.stringify(body),&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('코인 판매 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/auth.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/auth.ts" />
              <option name="originalContent" value="import { cookies } from &quot;next/headers&quot;;&#10;&#10;export type Role = &quot;ADMIN&quot; | &quot;MEMBER&quot;;&#10;&#10;export async function getSessionFromCookie() {&#10;    const cookieStore = await cookies(); // Next 15/edge에서 Promise임&#10;    const token = cookieStore.get(&quot;access_Token&quot;)?.value;&#10;    const role = (cookieStore.get(&quot;role&quot;)?.value as Role) ?? &quot;MEMBER&quot;;&#10;&#10;    return {&#10;        isAuthenticated: !!token,&#10;        role,&#10;        user: token ? { email: &quot;you@example.com&quot;, role } : null,&#10;    };&#10;}&#10;" />
              <option name="updatedContent" value="import { cookies } from &quot;next/headers&quot;;&#10;&#10;export type Role = &quot;ADMIN&quot; | &quot;MEMBER&quot;;&#10;&#10;export async function getSessionFromCookie() {&#10;    const cookieStore = await cookies(); // Next 15/edge에서 Promise임&#10;    const token = cookieStore.get(&quot;accessToken&quot;)?.value; // 실제 쿠키 이름인 accessToken으로 수정&#10;    const role = (cookieStore.get(&quot;role&quot;)?.value as Role) ?? &quot;MEMBER&quot;;&#10;&#10;    return {&#10;        isAuthenticated: !!token,&#10;        role,&#10;        user: token ? { email: &quot;you@example.com&quot;, role } : null,&#10;    };&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/rbac.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/rbac.ts" />
              <option name="originalContent" value="import { redirect } from &quot;next/navigation&quot;;&#10;import { getSessionFromCookie } from &quot;./auth&quot;;&#10;&#10;const AUTH_ENABLED = process.env.NEXT_PUBLIC_AUTH_ENABLED !== &quot;false&quot;;&#10;&#10;export async function requireAuth() {&#10;    if (!AUTH_ENABLED) {&#10;        return { isAuthenticated: false, role: &quot;USER&quot; as const, user: null };&#10;    }&#10;    const session = await getSessionFromCookie();&#10;    if (!session.isAuthenticated) redirect(&quot;/login&quot;);&#10;    return session;&#10;}&#10;&#10;export async function requireRole(roles: (&quot;ADMIN&quot; | &quot;USER&quot;)[]) {&#10;    const session = await requireAuth();&#10;    if (!roles.includes(session.role)) {&#10;        redirect(&quot;/dashboard&quot;);&#10;    }&#10;    return session;&#10;}&#10;" />
              <option name="updatedContent" value="import { redirect } from &quot;next/navigation&quot;;&#13;&#10;import { getSessionFromCookie } from &quot;./auth&quot;;&#13;&#10;&#13;&#10;const AUTH_ENABLED = process.env.NEXT_PUBLIC_AUTH_ENABLED !== &quot;false&quot;;&#13;&#10;&#13;&#10;export async function requireAuth() {&#13;&#10;    if (!AUTH_ENABLED) {&#13;&#10;        return { isAuthenticated: false, role: &quot;MEMBER&quot; as const, user: null };&#13;&#10;    }&#13;&#10;    const session = await getSessionFromCookie();&#13;&#10;    if (!session.isAuthenticated) redirect(&quot;/login&quot;);&#13;&#10;    return session;&#13;&#10;}&#13;&#10;&#13;&#10;export async function requireRole(roles: (&quot;ADMIN&quot; | &quot;MEMBER&quot;)[]) {&#13;&#10;    const session = await requireAuth();&#13;&#10;    if (!roles.includes(session.role)) {&#13;&#10;        redirect(&quot;/dashboard&quot;);&#13;&#10;    }&#13;&#10;    return session;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/types/user/index.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/types/user/index.ts" />
              <option name="originalContent" value="// 유저 관련 dto&#10;&#10;export interface UserDto {&#10;    id: number;&#10;    username: string;&#10;    userLoginId: string;&#10;    role: 'ADMIN' | 'USER';&#10;    createdAt: string;&#10;    modifiedAt: string;&#10;}&#10;&#10;export interface userWithUsernameDto {&#10;    id: number;&#10;    username: string;&#10;    userLoginId: string;&#10;    role: 'ADMIN' | 'USER';&#10;    createdAt: string;&#10;    modifiedAt: string;&#10;}&#10;&#10;export interface userRegisterDto {&#10;    userLoginId: string;&#10;    username: string;&#10;    password: string;&#10;    confirmPassword: string;&#10;}&#10;&#10;export interface userLoginReqBody {&#10;    userLoginId: string;&#10;    password: string;&#10;}&#10;&#10;export interface userLoginResBody {&#10;    item: UserDto;&#10;    apiKey: string;&#10;    accessToken: string;&#10;}&#10;" />
              <option name="updatedContent" value="// 유저 관련 dto&#10;&#10;export interface UserDto {&#10;    id: number;&#10;    username: string;&#10;    userLoginId: string;&#10;    role: 'ADMIN' | 'MEMBER';&#10;    createdAt: string;&#10;    modifiedAt: string;&#10;}&#10;&#10;export interface userWithUsernameDto {&#10;    id: number;&#10;    username: string;&#10;    userLoginId: string;&#10;    role: 'ADMIN' | 'MEMBER';&#10;    createdAt: string;&#10;    modifiedAt: string;&#10;}&#10;&#10;export interface userRegisterDto {&#10;    userLoginId: string;&#10;    username: string;&#10;    password: string;&#10;    confirmPassword: string;&#10;}&#10;&#10;export interface userLoginReqBody {&#10;    userLoginId: string;&#10;    password: string;&#10;}&#10;&#10;export interface userLoginResBody {&#10;    item: UserDto;&#10;    apiKey: string;&#10;    accessToken: string;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>