<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/charge/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/charge/route.ts" />
              <option name="originalContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// POST /api/wallets/users/[userId]/charge - 지갑 충전&#10;export async function POST(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;        const body = await request.json();&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}/charge`, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;            },&#10;            body: JSON.stringify(body),&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('지갑 충전 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// POST /api/wallets/users/[userId]/charge - 지갑 충전&#10;export async function POST(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;        const body = await request.json();&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}/charge`, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;                // 프론트엔드에서 받은 쿠키를 백엔드로 전달&#10;                'Cookie': request.headers.get('cookie') || '',&#10;            },&#10;            body: JSON.stringify(body),&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('지갑 충전 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/purchase/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/purchase/route.ts" />
              <option name="originalContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// POST /api/wallets/users/[userId]/purchase - 코인 구매&#10;export async function POST(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;        const body = await request.json();&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}/purchase`, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;            },&#10;            body: JSON.stringify(body),&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('코인 구매 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// POST /api/wallets/users/[userId]/purchase - 코인 구매&#10;export async function POST(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;        const body = await request.json();&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}/purchase`, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;                // 프론트엔드에서 받은 쿠키를 백엔드로 전달&#10;                'Cookie': request.headers.get('cookie') || '',&#10;            },&#10;            body: JSON.stringify(body),&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('코인 구매 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/route.ts" />
              <option name="originalContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// GET /api/wallets/users/[userId] - 지갑 정보 조회&#10;export async function GET(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}`, {&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;            },&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('지갑 조회 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// GET /api/wallets/users/[userId] - 지갑 정보 조회&#10;export async function GET(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}`, {&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;                // 프론트엔드에서 받은 쿠키를 백엔드로 전달&#10;                'Cookie': request.headers.get('cookie') || '',&#10;            },&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('지갑 조회 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/sell/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/sell/route.ts" />
              <option name="originalContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// POST /api/wallets/users/[userId]/sell - 코인 판매&#10;export async function POST(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;        const body = await request.json();&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}/sell`, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;            },&#10;            body: JSON.stringify(body),&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('코인 판매 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// POST /api/wallets/users/[userId]/sell - 코인 판매&#10;export async function POST(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;        const body = await request.json();&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}/sell`, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;                // 프론트엔드에서 받은 쿠키를 백엔드로 전달&#10;                'Cookie': request.headers.get('cookie') || '',&#10;            },&#10;            body: JSON.stringify(body),&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('코인 판매 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/exchange/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/exchange/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useEffect, useState } from &quot;react&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import { CoinPriceResponse } from &quot;@/lib/types/type&quot;;&#10;&#10;export default function ExchangePage() {&#10;    const [isRunning, setIsRunning] = useState(false);&#10;    const [coin, setCoin] = useState(&quot;&quot;);&#10;    const [price, setPrice] = useState(0);&#10;    const [time, setTime] = useState(&quot;&quot;);&#10;&#10;    const searchParams = useSearchParams();&#10;    const router = useRouter();&#10;&#10;    // 쿼리에서 code 읽어서 초기값으로 설정&#10;    useEffect(() =&gt; {&#10;        const code = searchParams.get(&quot;code&quot;);&#10;        if (code) setCoin(code);&#10;    }, [searchParams]);&#10;&#10;    const startFetching = async () =&gt; {&#10;        try {&#10;            const response = await fetch(&quot;/api/ws/start&quot;, { method: &quot;GET&quot; });&#10;            await response.text();&#10;            setIsRunning(true);&#10;        } catch (error) {&#10;            console.error(&quot;WebSocket 연결 실패:&quot;, error);&#10;        }&#10;    };&#10;&#10;    const stopFetching = async () =&gt; {&#10;        try {&#10;            const response = await fetch(&quot;/api/ws/stop&quot;, { method: &quot;GET&quot; });&#10;            await response.text();&#10;            setIsRunning(false);&#10;        } catch (error) {&#10;            console.error(&quot;중단 요청 실패:&quot;, error);&#10;        }&#10;    };&#10;&#10;    const clicktime = async () =&gt; {&#10;        if (!coin.trim()) {&#10;            alert(&quot;코인 이름을 입력해주세요.&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            const now = new Date();&#10;            const koreaTime = new Date(now.toLocaleString(&quot;en-US&quot;, { timeZone: &quot;Asia/Seoul&quot; }));&#10;            const pad = (n: number) =&gt; n.toString().padStart(2, &quot;0&quot;);&#10;            const formattedTime =&#10;                `${koreaTime.getFullYear()}-${pad(koreaTime.getMonth() + 1)}-${pad(koreaTime.getDate())}` +&#10;                ` ${pad(koreaTime.getHours())}:${pad(koreaTime.getMinutes())}:${pad(koreaTime.getSeconds())}`;&#10;&#10;            setTime(formattedTime);&#10;            router.replace(`/exchange?code=${encodeURIComponent(coin)}`);&#10;&#10;            const response = await fetch(&#10;                `/api/exchange/call?symbol=${encodeURIComponent(coin)}&amp;time=${encodeURIComponent(formattedTime)}`,&#10;                { method: &quot;GET&quot; }&#10;            );&#10;&#10;            const data: CoinPriceResponse = await response.json();&#10;            setPrice(data.price);&#10;        } catch (error) {&#10;            console.error(&quot;가격 정보 요청 실패:&quot;, error);&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div className=&quot;p-4 flex justify-center&quot;&gt;&#10;                &lt;button&#10;                    onClick={isRunning ? stopFetching : startFetching}&#10;                    className={`px-4 py-2 rounded text-white ${isRunning ? &quot;bg-red-600&quot; : &quot;bg-green-600&quot;}`}&#10;                &gt;&#10;                    {isRunning ? &quot;중단&quot; : &quot;실행&quot;}&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;p-4 flex justify-center gap-2&quot;&gt;&#10;                &lt;input&#10;                    type=&quot;text&quot;&#10;                    value={coin}&#10;                    onChange={(e) =&gt; setCoin(e.target.value)}&#10;                    placeholder=&quot;예: KRW-BTC&quot;&#10;                    className=&quot;px-4 py-2 rounded bg-white border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 text-black&quot;&#10;                /&gt;&#10;                &lt;button&#10;                    onClick={clicktime}&#10;                    className=&quot;px-4 py-2 rounded text-white bg-blue-600&quot;&#10;                &gt;&#10;                    시간 코인가격 추출 버튼&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;p-4 flex justify-center text-lg font-mono text-black bg-white&quot;&gt;&#10;                {coin &amp;&amp; time &amp;&amp; price !== 0 &amp;&amp; `${coin} ${time} ${price.toLocaleString()}원`}&#10;            &lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useEffect, useState, Suspense } from &quot;react&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import { CoinPriceResponse } from &quot;@/lib/types/type&quot;;&#10;&#10;function ExchangeContent() {&#10;    const [isRunning, setIsRunning] = useState(false);&#10;    const [coin, setCoin] = useState(&quot;&quot;);&#10;    const [price, setPrice] = useState(0);&#10;    const [time, setTime] = useState(&quot;&quot;);&#10;&#10;    const searchParams = useSearchParams();&#10;    const router = useRouter();&#10;&#10;    // 쿼리에서 code 읽어서 초기값으로 설정&#10;    useEffect(() =&gt; {&#10;        const code = searchParams.get(&quot;code&quot;);&#10;        if (code) setCoin(code);&#10;    }, [searchParams]);&#10;&#10;    const startFetching = async () =&gt; {&#10;        try {&#10;            const response = await fetch(&quot;/api/ws/start&quot;, { method: &quot;GET&quot; });&#10;            await response.text();&#10;            setIsRunning(true);&#10;        } catch (error) {&#10;            console.error(&quot;WebSocket 연결 실패:&quot;, error);&#10;        }&#10;    };&#10;&#10;    const stopFetching = async () =&gt; {&#10;        try {&#10;            const response = await fetch(&quot;/api/ws/stop&quot;, { method: &quot;GET&quot; });&#10;            await response.text();&#10;            setIsRunning(false);&#10;        } catch (error) {&#10;            console.error(&quot;중단 요청 실패:&quot;, error);&#10;        }&#10;    };&#10;&#10;    const clicktime = async () =&gt; {&#10;        if (!coin.trim()) {&#10;            alert(&quot;코인 이름을 입력해주세요.&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            const now = new Date();&#10;            const koreaTime = new Date(now.toLocaleString(&quot;en-US&quot;, { timeZone: &quot;Asia/Seoul&quot; }));&#10;            const pad = (n: number) =&gt; n.toString().padStart(2, &quot;0&quot;);&#10;            const formattedTime =&#10;                `${koreaTime.getFullYear()}-${pad(koreaTime.getMonth() + 1)}-${pad(koreaTime.getDate())}` +&#10;                ` ${pad(koreaTime.getHours())}:${pad(koreaTime.getMinutes())}:${pad(koreaTime.getSeconds())}`;&#10;&#10;            setTime(formattedTime);&#10;            router.replace(`/exchange?code=${encodeURIComponent(coin)}`);&#10;&#10;            const response = await fetch(&#10;                `/api/exchange/call?symbol=${encodeURIComponent(coin)}&amp;time=${encodeURIComponent(formattedTime)}`,&#10;                { method: &quot;GET&quot; }&#10;            );&#10;&#10;            const data: CoinPriceResponse = await response.json();&#10;            setPrice(data.price);&#10;        } catch (error) {&#10;            console.error(&quot;가격 정보 요청 실패:&quot;, error);&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div className=&quot;p-4 flex justify-center&quot;&gt;&#10;                &lt;button&#10;                    onClick={isRunning ? stopFetching : startFetching}&#10;                    className={`px-4 py-2 rounded text-white ${isRunning ? &quot;bg-red-600&quot; : &quot;bg-green-600&quot;}`}&#10;                &gt;&#10;                    {isRunning ? &quot;중단&quot; : &quot;실행&quot;}&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;p-4 flex justify-center gap-2&quot;&gt;&#10;                &lt;input&#10;                    type=&quot;text&quot;&#10;                    value={coin}&#10;                    onChange={(e) =&gt; setCoin(e.target.value)}&#10;                    placeholder=&quot;예: KRW-BTC&quot;&#10;                    className=&quot;px-4 py-2 rounded bg-white border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 text-black&quot;&#10;                /&gt;&#10;                &lt;button&#10;                    onClick={clicktime}&#10;                    className=&quot;px-4 py-2 rounded text-white bg-blue-600&quot;&#10;                &gt;&#10;                    시간 코인가격 추출 버튼&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;p-4 flex justify-center text-lg font-mono text-black bg-white&quot;&gt;&#10;                {coin &amp;&amp; time &amp;&amp; price !== 0 &amp;&amp; `${coin} ${time} ${price.toLocaleString()}원`}&#10;            &lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}&#10;&#10;export default function ExchangePage() {&#10;    return (&#10;        &lt;Suspense fallback={&lt;div&gt;로딩 중...&lt;/div&gt;}&gt;&#10;            &lt;ExchangeContent /&gt;&#10;        &lt;/Suspense&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>